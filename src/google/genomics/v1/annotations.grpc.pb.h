// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/genomics/v1/annotations.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fgenomics_2fv1_2fannotations_2eproto__INCLUDED
#define GRPC_google_2fgenomics_2fv1_2fannotations_2eproto__INCLUDED

#include "google/genomics/v1/annotations.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace genomics {
namespace v1 {

// This service provides storage and positional retrieval of genomic
// reference annotations, including variant annotations.
class AnnotationServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.genomics.v1.AnnotationServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new annotation set. Caller must have WRITE permission for the
    // associated dataset.
    //
    // The following fields are required:
    //
    //   * [datasetId][google.genomics.v1.AnnotationSet.dataset_id]
    //   * [referenceSetId][google.genomics.v1.AnnotationSet.reference_set_id]
    //
    // All other fields may be optionally specified, unless documented as being
    // server-generated (for example, the `id` field).
    virtual ::grpc::Status CreateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest& request, ::google::genomics::v1::AnnotationSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>> AsyncCreateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>>(AsyncCreateAnnotationSetRaw(context, request, cq));
    }
    // Gets an annotation set. Caller must have READ permission for
    // the associated dataset.
    virtual ::grpc::Status GetAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationSetRequest& request, ::google::genomics::v1::AnnotationSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>> AsyncGetAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>>(AsyncGetAnnotationSetRaw(context, request, cq));
    }
    // Updates an annotation set. The update must respect all mutability
    // restrictions and other invariants described on the annotation set resource.
    // Caller must have WRITE permission for the associated dataset.
    virtual ::grpc::Status UpdateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest& request, ::google::genomics::v1::AnnotationSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>> AsyncUpdateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>>(AsyncUpdateAnnotationSetRaw(context, request, cq));
    }
    // Deletes an annotation set. Caller must have WRITE permission
    // for the associated annotation set.
    virtual ::grpc::Status DeleteAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteAnnotationSetRaw(context, request, cq));
    }
    // Searches for annotation sets that match the given criteria. Annotation sets
    // are returned in an unspecified order. This order is consistent, such that
    // two queries for the same content (regardless of page size) yield annotation
    // sets in the same order across their respective streams of paginated
    // responses. Caller must have READ permission for the queried datasets.
    virtual ::grpc::Status SearchAnnotationSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest& request, ::google::genomics::v1::SearchAnnotationSetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchAnnotationSetsResponse>> AsyncSearchAnnotationSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchAnnotationSetsResponse>>(AsyncSearchAnnotationSetsRaw(context, request, cq));
    }
    // Creates a new annotation. Caller must have WRITE permission
    // for the associated annotation set.
    //
    // The following fields are required:
    //
    // * [annotationSetId][google.genomics.v1.Annotation.annotation_set_id]
    // * [referenceName][google.genomics.v1.Annotation.reference_name] or
    //   [referenceId][google.genomics.v1.Annotation.reference_id]
    //
    // ### Transcripts
    //
    // For annotations of type TRANSCRIPT, the following fields of
    // [transcript][google.genomics.v1.Annotation.transcript] must be provided:
    //
    // * [exons.start][google.genomics.v1.Transcript.Exon.start]
    // * [exons.end][google.genomics.v1.Transcript.Exon.end]
    //
    // All other fields may be optionally specified, unless documented as being
    // server-generated (for example, the `id` field). The annotated
    // range must be no longer than 100Mbp (mega base pairs). See the
    // [Annotation resource][google.genomics.v1.Annotation]
    // for additional restrictions on each field.
    virtual ::grpc::Status CreateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationRequest& request, ::google::genomics::v1::Annotation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>> AsyncCreateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>>(AsyncCreateAnnotationRaw(context, request, cq));
    }
    // Creates one or more new annotations atomically. All annotations must
    // belong to the same annotation set. Caller must have WRITE
    // permission for this annotation set. For optimal performance, batch
    // positionally adjacent annotations together.
    //
    // If the request has a systemic issue, such as an attempt to write to
    // an inaccessible annotation set, the entire RPC will fail accordingly. For
    // lesser data issues, when possible an error will be isolated to the
    // corresponding batch entry in the response; the remaining well formed
    // annotations will be created normally.
    //
    // For details on the requirements for each individual annotation resource,
    // see
    // [CreateAnnotation][google.genomics.v1.AnnotationServiceV1.CreateAnnotation].
    virtual ::grpc::Status BatchCreateAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest& request, ::google::genomics::v1::BatchCreateAnnotationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::BatchCreateAnnotationsResponse>> AsyncBatchCreateAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::BatchCreateAnnotationsResponse>>(AsyncBatchCreateAnnotationsRaw(context, request, cq));
    }
    // Gets an annotation. Caller must have READ permission
    // for the associated annotation set.
    virtual ::grpc::Status GetAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationRequest& request, ::google::genomics::v1::Annotation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>> AsyncGetAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>>(AsyncGetAnnotationRaw(context, request, cq));
    }
    // Updates an annotation. Caller must have
    // WRITE permission for the associated dataset.
    virtual ::grpc::Status UpdateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationRequest& request, ::google::genomics::v1::Annotation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>> AsyncUpdateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>>(AsyncUpdateAnnotationRaw(context, request, cq));
    }
    // Deletes an annotation. Caller must have WRITE permission for
    // the associated annotation set.
    virtual ::grpc::Status DeleteAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteAnnotationRaw(context, request, cq));
    }
    // Searches for annotations that match the given criteria. Results are
    // ordered by genomic coordinate (by reference sequence, then position).
    // Annotations with equivalent genomic coordinates are returned in an
    // unspecified order. This order is consistent, such that two queries for the
    // same content (regardless of page size) yield annotations in the same order
    // across their respective streams of paginated responses. Caller must have
    // READ permission for the queried annotation sets.
    virtual ::grpc::Status SearchAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationsRequest& request, ::google::genomics::v1::SearchAnnotationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchAnnotationsResponse>> AsyncSearchAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchAnnotationsResponse>>(AsyncSearchAnnotationsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>* AsyncCreateAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>* AsyncGetAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::AnnotationSet>* AsyncUpdateAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchAnnotationSetsResponse>* AsyncSearchAnnotationSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>* AsyncCreateAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::BatchCreateAnnotationsResponse>* AsyncBatchCreateAnnotationsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>* AsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Annotation>* AsyncUpdateAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchAnnotationsResponse>* AsyncSearchAnnotationsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest& request, ::google::genomics::v1::AnnotationSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>> AsyncCreateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>>(AsyncCreateAnnotationSetRaw(context, request, cq));
    }
    ::grpc::Status GetAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationSetRequest& request, ::google::genomics::v1::AnnotationSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>> AsyncGetAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>>(AsyncGetAnnotationSetRaw(context, request, cq));
    }
    ::grpc::Status UpdateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest& request, ::google::genomics::v1::AnnotationSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>> AsyncUpdateAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>>(AsyncUpdateAnnotationSetRaw(context, request, cq));
    }
    ::grpc::Status DeleteAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteAnnotationSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteAnnotationSetRaw(context, request, cq));
    }
    ::grpc::Status SearchAnnotationSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest& request, ::google::genomics::v1::SearchAnnotationSetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchAnnotationSetsResponse>> AsyncSearchAnnotationSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchAnnotationSetsResponse>>(AsyncSearchAnnotationSetsRaw(context, request, cq));
    }
    ::grpc::Status CreateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationRequest& request, ::google::genomics::v1::Annotation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>> AsyncCreateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>>(AsyncCreateAnnotationRaw(context, request, cq));
    }
    ::grpc::Status BatchCreateAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest& request, ::google::genomics::v1::BatchCreateAnnotationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::BatchCreateAnnotationsResponse>> AsyncBatchCreateAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::BatchCreateAnnotationsResponse>>(AsyncBatchCreateAnnotationsRaw(context, request, cq));
    }
    ::grpc::Status GetAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationRequest& request, ::google::genomics::v1::Annotation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>> AsyncGetAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>>(AsyncGetAnnotationRaw(context, request, cq));
    }
    ::grpc::Status UpdateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationRequest& request, ::google::genomics::v1::Annotation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>> AsyncUpdateAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>>(AsyncUpdateAnnotationRaw(context, request, cq));
    }
    ::grpc::Status DeleteAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteAnnotation(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteAnnotationRaw(context, request, cq));
    }
    ::grpc::Status SearchAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationsRequest& request, ::google::genomics::v1::SearchAnnotationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchAnnotationsResponse>> AsyncSearchAnnotations(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchAnnotationsResponse>>(AsyncSearchAnnotationsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>* AsyncCreateAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>* AsyncGetAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::AnnotationSet>* AsyncUpdateAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteAnnotationSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchAnnotationSetsResponse>* AsyncSearchAnnotationSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>* AsyncCreateAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::BatchCreateAnnotationsResponse>* AsyncBatchCreateAnnotationsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>* AsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Annotation>* AsyncUpdateAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchAnnotationsResponse>* AsyncSearchAnnotationsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_CreateAnnotationSet_;
    const ::grpc::RpcMethod rpcmethod_GetAnnotationSet_;
    const ::grpc::RpcMethod rpcmethod_UpdateAnnotationSet_;
    const ::grpc::RpcMethod rpcmethod_DeleteAnnotationSet_;
    const ::grpc::RpcMethod rpcmethod_SearchAnnotationSets_;
    const ::grpc::RpcMethod rpcmethod_CreateAnnotation_;
    const ::grpc::RpcMethod rpcmethod_BatchCreateAnnotations_;
    const ::grpc::RpcMethod rpcmethod_GetAnnotation_;
    const ::grpc::RpcMethod rpcmethod_UpdateAnnotation_;
    const ::grpc::RpcMethod rpcmethod_DeleteAnnotation_;
    const ::grpc::RpcMethod rpcmethod_SearchAnnotations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new annotation set. Caller must have WRITE permission for the
    // associated dataset.
    //
    // The following fields are required:
    //
    //   * [datasetId][google.genomics.v1.AnnotationSet.dataset_id]
    //   * [referenceSetId][google.genomics.v1.AnnotationSet.reference_set_id]
    //
    // All other fields may be optionally specified, unless documented as being
    // server-generated (for example, the `id` field).
    virtual ::grpc::Status CreateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response);
    // Gets an annotation set. Caller must have READ permission for
    // the associated dataset.
    virtual ::grpc::Status GetAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response);
    // Updates an annotation set. The update must respect all mutability
    // restrictions and other invariants described on the annotation set resource.
    // Caller must have WRITE permission for the associated dataset.
    virtual ::grpc::Status UpdateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response);
    // Deletes an annotation set. Caller must have WRITE permission
    // for the associated annotation set.
    virtual ::grpc::Status DeleteAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest* request, ::google::protobuf::Empty* response);
    // Searches for annotation sets that match the given criteria. Annotation sets
    // are returned in an unspecified order. This order is consistent, such that
    // two queries for the same content (regardless of page size) yield annotation
    // sets in the same order across their respective streams of paginated
    // responses. Caller must have READ permission for the queried datasets.
    virtual ::grpc::Status SearchAnnotationSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest* request, ::google::genomics::v1::SearchAnnotationSetsResponse* response);
    // Creates a new annotation. Caller must have WRITE permission
    // for the associated annotation set.
    //
    // The following fields are required:
    //
    // * [annotationSetId][google.genomics.v1.Annotation.annotation_set_id]
    // * [referenceName][google.genomics.v1.Annotation.reference_name] or
    //   [referenceId][google.genomics.v1.Annotation.reference_id]
    //
    // ### Transcripts
    //
    // For annotations of type TRANSCRIPT, the following fields of
    // [transcript][google.genomics.v1.Annotation.transcript] must be provided:
    //
    // * [exons.start][google.genomics.v1.Transcript.Exon.start]
    // * [exons.end][google.genomics.v1.Transcript.Exon.end]
    //
    // All other fields may be optionally specified, unless documented as being
    // server-generated (for example, the `id` field). The annotated
    // range must be no longer than 100Mbp (mega base pairs). See the
    // [Annotation resource][google.genomics.v1.Annotation]
    // for additional restrictions on each field.
    virtual ::grpc::Status CreateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationRequest* request, ::google::genomics::v1::Annotation* response);
    // Creates one or more new annotations atomically. All annotations must
    // belong to the same annotation set. Caller must have WRITE
    // permission for this annotation set. For optimal performance, batch
    // positionally adjacent annotations together.
    //
    // If the request has a systemic issue, such as an attempt to write to
    // an inaccessible annotation set, the entire RPC will fail accordingly. For
    // lesser data issues, when possible an error will be isolated to the
    // corresponding batch entry in the response; the remaining well formed
    // annotations will be created normally.
    //
    // For details on the requirements for each individual annotation resource,
    // see
    // [CreateAnnotation][google.genomics.v1.AnnotationServiceV1.CreateAnnotation].
    virtual ::grpc::Status BatchCreateAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest* request, ::google::genomics::v1::BatchCreateAnnotationsResponse* response);
    // Gets an annotation. Caller must have READ permission
    // for the associated annotation set.
    virtual ::grpc::Status GetAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationRequest* request, ::google::genomics::v1::Annotation* response);
    // Updates an annotation. Caller must have
    // WRITE permission for the associated dataset.
    virtual ::grpc::Status UpdateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationRequest* request, ::google::genomics::v1::Annotation* response);
    // Deletes an annotation. Caller must have WRITE permission for
    // the associated annotation set.
    virtual ::grpc::Status DeleteAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationRequest* request, ::google::protobuf::Empty* response);
    // Searches for annotations that match the given criteria. Results are
    // ordered by genomic coordinate (by reference sequence, then position).
    // Annotations with equivalent genomic coordinates are returned in an
    // unspecified order. This order is consistent, such that two queries for the
    // same content (regardless of page size) yield annotations in the same order
    // across their respective streams of paginated responses. Caller must have
    // READ permission for the queried annotation sets.
    virtual ::grpc::Status SearchAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationsRequest* request, ::google::genomics::v1::SearchAnnotationsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateAnnotationSet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAnnotationSet(::grpc::ServerContext* context, ::google::genomics::v1::CreateAnnotationSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::AnnotationSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAnnotationSet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotationSet(::grpc::ServerContext* context, ::google::genomics::v1::GetAnnotationSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::AnnotationSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateAnnotationSet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAnnotationSet(::grpc::ServerContext* context, ::google::genomics::v1::UpdateAnnotationSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::AnnotationSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteAnnotationSet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotationSet(::grpc::ServerContext* context, ::google::genomics::v1::DeleteAnnotationSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchAnnotationSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchAnnotationSets() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SearchAnnotationSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchAnnotationSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest* request, ::google::genomics::v1::SearchAnnotationSetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchAnnotationSets(::grpc::ServerContext* context, ::google::genomics::v1::SearchAnnotationSetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::SearchAnnotationSetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateAnnotation() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAnnotation(::grpc::ServerContext* context, ::google::genomics::v1::CreateAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Annotation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchCreateAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchCreateAnnotations() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_BatchCreateAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest* request, ::google::genomics::v1::BatchCreateAnnotationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchCreateAnnotations(::grpc::ServerContext* context, ::google::genomics::v1::BatchCreateAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::BatchCreateAnnotationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotation(::grpc::ServerContext* context, ::google::genomics::v1::GetAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Annotation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateAnnotation() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAnnotation(::grpc::ServerContext* context, ::google::genomics::v1::UpdateAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Annotation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotation(::grpc::ServerContext* context, ::google::genomics::v1::DeleteAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchAnnotations() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SearchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationsRequest* request, ::google::genomics::v1::SearchAnnotationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchAnnotations(::grpc::ServerContext* context, ::google::genomics::v1::SearchAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::SearchAnnotationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAnnotationSet<WithAsyncMethod_GetAnnotationSet<WithAsyncMethod_UpdateAnnotationSet<WithAsyncMethod_DeleteAnnotationSet<WithAsyncMethod_SearchAnnotationSets<WithAsyncMethod_CreateAnnotation<WithAsyncMethod_BatchCreateAnnotations<WithAsyncMethod_GetAnnotation<WithAsyncMethod_UpdateAnnotation<WithAsyncMethod_DeleteAnnotation<WithAsyncMethod_SearchAnnotations<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateAnnotationSet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAnnotationSet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateAnnotationSet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteAnnotationSet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchAnnotationSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchAnnotationSets() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SearchAnnotationSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchAnnotationSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest* request, ::google::genomics::v1::SearchAnnotationSetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateAnnotation() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchCreateAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchCreateAnnotations() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_BatchCreateAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest* request, ::google::genomics::v1::BatchCreateAnnotationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateAnnotation() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchAnnotations() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SearchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationsRequest* request, ::google::genomics::v1::SearchAnnotationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateAnnotationSet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::CreateAnnotationSetRequest, ::google::genomics::v1::AnnotationSet>(std::bind(&WithStreamedUnaryMethod_CreateAnnotationSet<BaseClass>::StreamedCreateAnnotationSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAnnotationSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::CreateAnnotationSetRequest,::google::genomics::v1::AnnotationSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAnnotationSet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::GetAnnotationSetRequest, ::google::genomics::v1::AnnotationSet>(std::bind(&WithStreamedUnaryMethod_GetAnnotationSet<BaseClass>::StreamedGetAnnotationSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnnotationSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::GetAnnotationSetRequest,::google::genomics::v1::AnnotationSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateAnnotationSet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::UpdateAnnotationSetRequest, ::google::genomics::v1::AnnotationSet>(std::bind(&WithStreamedUnaryMethod_UpdateAnnotationSet<BaseClass>::StreamedUpdateAnnotationSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationSetRequest* request, ::google::genomics::v1::AnnotationSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAnnotationSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::UpdateAnnotationSetRequest,::google::genomics::v1::AnnotationSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAnnotationSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteAnnotationSet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::DeleteAnnotationSetRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteAnnotationSet<BaseClass>::StreamedDeleteAnnotationSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteAnnotationSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAnnotationSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationSetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAnnotationSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::DeleteAnnotationSetRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchAnnotationSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchAnnotationSets() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::SearchAnnotationSetsRequest, ::google::genomics::v1::SearchAnnotationSetsResponse>(std::bind(&WithStreamedUnaryMethod_SearchAnnotationSets<BaseClass>::StreamedSearchAnnotationSets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchAnnotationSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchAnnotationSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationSetsRequest* request, ::google::genomics::v1::SearchAnnotationSetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchAnnotationSets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::SearchAnnotationSetsRequest,::google::genomics::v1::SearchAnnotationSetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateAnnotation() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::CreateAnnotationRequest, ::google::genomics::v1::Annotation>(std::bind(&WithStreamedUnaryMethod_CreateAnnotation<BaseClass>::StreamedCreateAnnotation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::CreateAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::CreateAnnotationRequest,::google::genomics::v1::Annotation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchCreateAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchCreateAnnotations() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::BatchCreateAnnotationsRequest, ::google::genomics::v1::BatchCreateAnnotationsResponse>(std::bind(&WithStreamedUnaryMethod_BatchCreateAnnotations<BaseClass>::StreamedBatchCreateAnnotations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchCreateAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchCreateAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::BatchCreateAnnotationsRequest* request, ::google::genomics::v1::BatchCreateAnnotationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchCreateAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::BatchCreateAnnotationsRequest,::google::genomics::v1::BatchCreateAnnotationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::GetAnnotationRequest, ::google::genomics::v1::Annotation>(std::bind(&WithStreamedUnaryMethod_GetAnnotation<BaseClass>::StreamedGetAnnotation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::GetAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::GetAnnotationRequest,::google::genomics::v1::Annotation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateAnnotation() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::UpdateAnnotationRequest, ::google::genomics::v1::Annotation>(std::bind(&WithStreamedUnaryMethod_UpdateAnnotation<BaseClass>::StreamedUpdateAnnotation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateAnnotationRequest* request, ::google::genomics::v1::Annotation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::UpdateAnnotationRequest,::google::genomics::v1::Annotation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::DeleteAnnotationRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteAnnotation<BaseClass>::StreamedDeleteAnnotation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteAnnotationRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::DeleteAnnotationRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchAnnotations() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::SearchAnnotationsRequest, ::google::genomics::v1::SearchAnnotationsResponse>(std::bind(&WithStreamedUnaryMethod_SearchAnnotations<BaseClass>::StreamedSearchAnnotations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchAnnotations(::grpc::ServerContext* context, const ::google::genomics::v1::SearchAnnotationsRequest* request, ::google::genomics::v1::SearchAnnotationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::SearchAnnotationsRequest,::google::genomics::v1::SearchAnnotationsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAnnotationSet<WithStreamedUnaryMethod_GetAnnotationSet<WithStreamedUnaryMethod_UpdateAnnotationSet<WithStreamedUnaryMethod_DeleteAnnotationSet<WithStreamedUnaryMethod_SearchAnnotationSets<WithStreamedUnaryMethod_CreateAnnotation<WithStreamedUnaryMethod_BatchCreateAnnotations<WithStreamedUnaryMethod_GetAnnotation<WithStreamedUnaryMethod_UpdateAnnotation<WithStreamedUnaryMethod_DeleteAnnotation<WithStreamedUnaryMethod_SearchAnnotations<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAnnotationSet<WithStreamedUnaryMethod_GetAnnotationSet<WithStreamedUnaryMethod_UpdateAnnotationSet<WithStreamedUnaryMethod_DeleteAnnotationSet<WithStreamedUnaryMethod_SearchAnnotationSets<WithStreamedUnaryMethod_CreateAnnotation<WithStreamedUnaryMethod_BatchCreateAnnotations<WithStreamedUnaryMethod_GetAnnotation<WithStreamedUnaryMethod_UpdateAnnotation<WithStreamedUnaryMethod_DeleteAnnotation<WithStreamedUnaryMethod_SearchAnnotations<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace genomics
}  // namespace google


#endif  // GRPC_google_2fgenomics_2fv1_2fannotations_2eproto__INCLUDED
