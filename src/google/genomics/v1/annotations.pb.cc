// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/annotations.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/annotations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {
class AnnotationSet_InfoEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotationSet::AnnotationSet_InfoEntry> {
} _AnnotationSet_InfoEntry_default_instance_;
class AnnotationSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotationSet> {
} _AnnotationSet_default_instance_;
class Annotation_InfoEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Annotation::Annotation_InfoEntry> {
} _Annotation_InfoEntry_default_instance_;
class AnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Annotation> {
  public:
  const ::google::genomics::v1::VariantAnnotation* variant_;
  const ::google::genomics::v1::Transcript* transcript_;
} _Annotation_default_instance_;
class VariantAnnotation_ClinicalConditionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VariantAnnotation_ClinicalCondition> {
} _VariantAnnotation_ClinicalCondition_default_instance_;
class VariantAnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VariantAnnotation> {
} _VariantAnnotation_default_instance_;
class Transcript_ExonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transcript_Exon> {
} _Transcript_Exon_default_instance_;
class Transcript_CodingSequenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transcript_CodingSequence> {
} _Transcript_CodingSequence_default_instance_;
class TranscriptDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transcript> {
} _Transcript_default_instance_;
class ExternalIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExternalId> {
} _ExternalId_default_instance_;
class CreateAnnotationSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateAnnotationSetRequest> {
} _CreateAnnotationSetRequest_default_instance_;
class GetAnnotationSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAnnotationSetRequest> {
} _GetAnnotationSetRequest_default_instance_;
class UpdateAnnotationSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateAnnotationSetRequest> {
} _UpdateAnnotationSetRequest_default_instance_;
class DeleteAnnotationSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteAnnotationSetRequest> {
} _DeleteAnnotationSetRequest_default_instance_;
class SearchAnnotationSetsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchAnnotationSetsRequest> {
} _SearchAnnotationSetsRequest_default_instance_;
class SearchAnnotationSetsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchAnnotationSetsResponse> {
} _SearchAnnotationSetsResponse_default_instance_;
class CreateAnnotationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateAnnotationRequest> {
} _CreateAnnotationRequest_default_instance_;
class BatchCreateAnnotationsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchCreateAnnotationsRequest> {
} _BatchCreateAnnotationsRequest_default_instance_;
class BatchCreateAnnotationsResponse_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchCreateAnnotationsResponse_Entry> {
} _BatchCreateAnnotationsResponse_Entry_default_instance_;
class BatchCreateAnnotationsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchCreateAnnotationsResponse> {
} _BatchCreateAnnotationsResponse_default_instance_;
class GetAnnotationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAnnotationRequest> {
} _GetAnnotationRequest_default_instance_;
class UpdateAnnotationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateAnnotationRequest> {
} _UpdateAnnotationRequest_default_instance_;
class DeleteAnnotationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteAnnotationRequest> {
} _DeleteAnnotationRequest_default_instance_;
class SearchAnnotationsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchAnnotationsRequest> {
  public:
  ::google::protobuf::internal::ArenaStringPtr reference_id_;
  ::google::protobuf::internal::ArenaStringPtr reference_name_;
} _SearchAnnotationsRequest_default_instance_;
class SearchAnnotationsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchAnnotationsResponse> {
} _SearchAnnotationsResponse_default_instance_;

namespace protobuf_google_2fgenomics_2fv1_2fannotations_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, reference_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, source_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationSet, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, annotation_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, reference_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, reverse_strand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Annotation_default_instance_), variant_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Annotation_default_instance_), transcript_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation_ClinicalCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation_ClinicalCondition, names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation_ClinicalCondition, external_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation_ClinicalCondition, concept_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation_ClinicalCondition, omim_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, alternate_bases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, gene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, transcript_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantAnnotation, clinical_significance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_Exon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_Exon, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_Exon, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_Exon, frame_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_CodingSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_CodingSequence, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript_CodingSequence, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript, gene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript, exons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcript, coding_sequence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAnnotationSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAnnotationSetRequest, annotation_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAnnotationSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAnnotationSetRequest, annotation_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationSetRequest, annotation_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationSetRequest, annotation_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationSetRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAnnotationSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAnnotationSetRequest, annotation_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, dataset_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, reference_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsResponse, annotation_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationSetsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAnnotationRequest, annotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsRequest, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsRequest, request_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsResponse_Entry, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsResponse_Entry, annotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCreateAnnotationsResponse, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAnnotationRequest, annotation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationRequest, annotation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationRequest, annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAnnotationRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAnnotationRequest, annotation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, annotation_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SearchAnnotationsRequest_default_instance_), reference_id_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SearchAnnotationsRequest_default_instance_), reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsRequest, reference_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsResponse, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchAnnotationsResponse, next_page_token_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AnnotationSet)},
  { 12, -1, sizeof(Annotation)},
  { 30, -1, sizeof(VariantAnnotation_ClinicalCondition)},
  { 39, -1, sizeof(VariantAnnotation)},
  { 51, -1, sizeof(Transcript_Exon)},
  { 59, -1, sizeof(Transcript_CodingSequence)},
  { 66, -1, sizeof(Transcript)},
  { 74, -1, sizeof(ExternalId)},
  { 81, -1, sizeof(CreateAnnotationSetRequest)},
  { 87, -1, sizeof(GetAnnotationSetRequest)},
  { 93, -1, sizeof(UpdateAnnotationSetRequest)},
  { 101, -1, sizeof(DeleteAnnotationSetRequest)},
  { 107, -1, sizeof(SearchAnnotationSetsRequest)},
  { 118, -1, sizeof(SearchAnnotationSetsResponse)},
  { 125, -1, sizeof(CreateAnnotationRequest)},
  { 131, -1, sizeof(BatchCreateAnnotationsRequest)},
  { 138, -1, sizeof(BatchCreateAnnotationsResponse_Entry)},
  { 145, -1, sizeof(BatchCreateAnnotationsResponse)},
  { 151, -1, sizeof(GetAnnotationRequest)},
  { 157, -1, sizeof(UpdateAnnotationRequest)},
  { 165, -1, sizeof(DeleteAnnotationRequest)},
  { 171, -1, sizeof(SearchAnnotationsRequest)},
  { 184, -1, sizeof(SearchAnnotationsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotationSet_InfoEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotationSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Annotation_InfoEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Annotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VariantAnnotation_ClinicalCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VariantAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transcript_Exon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transcript_CodingSequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transcript_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExternalId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateAnnotationSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAnnotationSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateAnnotationSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteAnnotationSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchAnnotationSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchAnnotationSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateAnnotationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchCreateAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchCreateAnnotationsResponse_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchCreateAnnotationsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAnnotationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateAnnotationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteAnnotationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchAnnotationsResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/genomics/v1/annotations.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = AnnotationSet::AnnotationSet_InfoEntry::CreateReflection(file_level_metadata[0].descriptor, _AnnotationSet_InfoEntry_default_instance_.get_mutable());
file_level_metadata[2].reflection = Annotation::Annotation_InfoEntry::CreateReflection(file_level_metadata[2].descriptor, _Annotation_InfoEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace

void TableStruct::Shutdown() {
  _AnnotationSet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Annotation_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _VariantAnnotation_ClinicalCondition_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _VariantAnnotation_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Transcript_Exon_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Transcript_CodingSequence_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Transcript_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ExternalId_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CreateAnnotationSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetAnnotationSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _UpdateAnnotationSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _DeleteAnnotationSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SearchAnnotationSetsRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SearchAnnotationSetsResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CreateAnnotationRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BatchCreateAnnotationsRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _BatchCreateAnnotationsResponse_Entry_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _BatchCreateAnnotationsResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GetAnnotationRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _UpdateAnnotationRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _DeleteAnnotationRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SearchAnnotationsRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SearchAnnotationsResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  delete file_level_metadata[0].reflection;
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  _AnnotationSet_InfoEntry_default_instance_.DefaultConstruct();
  _AnnotationSet_default_instance_.DefaultConstruct();
  _Annotation_InfoEntry_default_instance_.DefaultConstruct();
  _Annotation_default_instance_.DefaultConstruct();
  _VariantAnnotation_ClinicalCondition_default_instance_.DefaultConstruct();
  _VariantAnnotation_default_instance_.DefaultConstruct();
  _Transcript_Exon_default_instance_.DefaultConstruct();
  _Transcript_CodingSequence_default_instance_.DefaultConstruct();
  _Transcript_default_instance_.DefaultConstruct();
  _ExternalId_default_instance_.DefaultConstruct();
  _CreateAnnotationSetRequest_default_instance_.DefaultConstruct();
  _GetAnnotationSetRequest_default_instance_.DefaultConstruct();
  _UpdateAnnotationSetRequest_default_instance_.DefaultConstruct();
  _DeleteAnnotationSetRequest_default_instance_.DefaultConstruct();
  _SearchAnnotationSetsRequest_default_instance_.DefaultConstruct();
  _SearchAnnotationSetsResponse_default_instance_.DefaultConstruct();
  _CreateAnnotationRequest_default_instance_.DefaultConstruct();
  _BatchCreateAnnotationsRequest_default_instance_.DefaultConstruct();
  _BatchCreateAnnotationsResponse_Entry_default_instance_.DefaultConstruct();
  _BatchCreateAnnotationsResponse_default_instance_.DefaultConstruct();
  _GetAnnotationRequest_default_instance_.DefaultConstruct();
  _UpdateAnnotationRequest_default_instance_.DefaultConstruct();
  _DeleteAnnotationRequest_default_instance_.DefaultConstruct();
  _SearchAnnotationsRequest_default_instance_.DefaultConstruct();
  _SearchAnnotationsResponse_default_instance_.DefaultConstruct();
  _AnnotationSet_InfoEntry_default_instance_.get_mutable()->set_default_instance(_AnnotationSet_InfoEntry_default_instance_.get_mutable());
  _AnnotationSet_InfoEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Annotation_InfoEntry_default_instance_.get_mutable()->set_default_instance(_Annotation_InfoEntry_default_instance_.get_mutable());
  _Annotation_InfoEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Annotation_default_instance_.variant_ = const_cast< ::google::genomics::v1::VariantAnnotation*>(
      ::google::genomics::v1::VariantAnnotation::internal_default_instance());
  _Annotation_default_instance_.transcript_ = const_cast< ::google::genomics::v1::Transcript*>(
      ::google::genomics::v1::Transcript::internal_default_instance());
  _Transcript_Exon_default_instance_.get_mutable()->frame_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  _Transcript_default_instance_.get_mutable()->coding_sequence_ = const_cast< ::google::genomics::v1::Transcript_CodingSequence*>(
      ::google::genomics::v1::Transcript_CodingSequence::internal_default_instance());
  _CreateAnnotationSetRequest_default_instance_.get_mutable()->annotation_set_ = const_cast< ::google::genomics::v1::AnnotationSet*>(
      ::google::genomics::v1::AnnotationSet::internal_default_instance());
  _UpdateAnnotationSetRequest_default_instance_.get_mutable()->annotation_set_ = const_cast< ::google::genomics::v1::AnnotationSet*>(
      ::google::genomics::v1::AnnotationSet::internal_default_instance());
  _UpdateAnnotationSetRequest_default_instance_.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
  _CreateAnnotationRequest_default_instance_.get_mutable()->annotation_ = const_cast< ::google::genomics::v1::Annotation*>(
      ::google::genomics::v1::Annotation::internal_default_instance());
  _BatchCreateAnnotationsResponse_Entry_default_instance_.get_mutable()->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _BatchCreateAnnotationsResponse_Entry_default_instance_.get_mutable()->annotation_ = const_cast< ::google::genomics::v1::Annotation*>(
      ::google::genomics::v1::Annotation::internal_default_instance());
  _UpdateAnnotationRequest_default_instance_.get_mutable()->annotation_ = const_cast< ::google::genomics::v1::Annotation*>(
      ::google::genomics::v1::Annotation::internal_default_instance());
  _UpdateAnnotationRequest_default_instance_.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
  _SearchAnnotationsRequest_default_instance_.reference_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _SearchAnnotationsRequest_default_instance_.reference_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$google/genomics/v1/annotations.proto\022\022"
      "google.genomics.v1\032\034google/api/annotatio"
      "ns.proto\032\033google/protobuf/empty.proto\032 g"
      "oogle/protobuf/field_mask.proto\032\034google/"
      "protobuf/struct.proto\032\036google/protobuf/w"
      "rappers.proto\032\027google/rpc/status.proto\"\241"
      "\002\n\rAnnotationSet\022\n\n\002id\030\001 \001(\t\022\022\n\ndataset_"
      "id\030\002 \001(\t\022\030\n\020reference_set_id\030\003 \001(\t\022\014\n\004na"
      "me\030\004 \001(\t\022\022\n\nsource_uri\030\005 \001(\t\0220\n\004type\030\006 \001"
      "(\0162\".google.genomics.v1.AnnotationType\0229"
      "\n\004info\030\021 \003(\0132+.google.genomics.v1.Annota"
      "tionSet.InfoEntry\032G\n\tInfoEntry\022\013\n\003key\030\001 "
      "\001(\t\022)\n\005value\030\002 \001(\0132\032.google.protobuf.Lis"
      "tValue:\0028\001\"\317\003\n\nAnnotation\022\n\n\002id\030\001 \001(\t\022\031\n"
      "\021annotation_set_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\024"
      "\n\014reference_id\030\004 \001(\t\022\026\n\016reference_name\030\005"
      " \001(\t\022\r\n\005start\030\006 \001(\003\022\013\n\003end\030\007 \001(\003\022\026\n\016reve"
      "rse_strand\030\010 \001(\010\0220\n\004type\030\t \001(\0162\".google."
      "genomics.v1.AnnotationType\0228\n\007variant\030\n "
      "\001(\0132%.google.genomics.v1.VariantAnnotati"
      "onH\000\0224\n\ntranscript\030\013 \001(\0132\036.google.genomi"
      "cs.v1.TranscriptH\000\0226\n\004info\030\014 \003(\0132(.googl"
      "e.genomics.v1.Annotation.InfoEntry\032G\n\tIn"
      "foEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.go"
      "ogle.protobuf.ListValue:\0028\001B\007\n\005value\"\374\010\n"
      "\021VariantAnnotation\0228\n\004type\030\001 \001(\0162*.googl"
      "e.genomics.v1.VariantAnnotation.Type\022<\n\006"
      "effect\030\002 \001(\0162,.google.genomics.v1.Varian"
      "tAnnotation.Effect\022\027\n\017alternate_bases\030\003 "
      "\001(\t\022\017\n\007gene_id\030\004 \001(\t\022\026\n\016transcript_ids\030\005"
      " \003(\t\022K\n\nconditions\030\006 \003(\01327.google.genomi"
      "cs.v1.VariantAnnotation.ClinicalConditio"
      "n\022Y\n\025clinical_significance\030\007 \001(\0162:.googl"
      "e.genomics.v1.VariantAnnotation.Clinical"
      "Significance\032}\n\021ClinicalCondition\022\r\n\005nam"
      "es\030\001 \003(\t\0224\n\014external_ids\030\002 \003(\0132\036.google."
      "genomics.v1.ExternalId\022\022\n\nconcept_id\030\003 \001"
      "(\t\022\017\n\007omim_id\030\004 \001(\t\"}\n\004Type\022\024\n\020TYPE_UNSP"
      "ECIFIED\020\000\022\016\n\nTYPE_OTHER\020\001\022\r\n\tINSERTION\020\002"
      "\022\014\n\010DELETION\020\003\022\020\n\014SUBSTITUTION\020\004\022\007\n\003SNP\020"
      "\005\022\016\n\nSTRUCTURAL\020\006\022\007\n\003CNV\020\007\"\303\001\n\006Effect\022\026\n"
      "\022EFFECT_UNSPECIFIED\020\000\022\020\n\014EFFECT_OTHER\020\001\022"
      "\016\n\nFRAMESHIFT\020\002\022\032\n\026FRAME_PRESERVING_INDE"
      "L\020\003\022\022\n\016SYNONYMOUS_SNP\020\004\022\025\n\021NONSYNONYMOUS"
      "_SNP\020\005\022\r\n\tSTOP_GAIN\020\006\022\r\n\tSTOP_LOSS\020\007\022\032\n\026"
      "SPLICE_SITE_DISRUPTION\020\010\"\300\002\n\024ClinicalSig"
      "nificance\022%\n!CLINICAL_SIGNIFICANCE_UNSPE"
      "CIFIED\020\000\022\037\n\033CLINICAL_SIGNIFICANCE_OTHER\020"
      "\001\022\r\n\tUNCERTAIN\020\002\022\n\n\006BENIGN\020\003\022\021\n\rLIKELY_B"
      "ENIGN\020\004\022\025\n\021LIKELY_PATHOGENIC\020\005\022\016\n\nPATHOG"
      "ENIC\020\006\022\021\n\rDRUG_RESPONSE\020\007\022\026\n\022HISTOCOMPAT"
      "IBILITY\020\010\022\027\n\023CONFERS_SENSITIVITY\020\t\022\017\n\013RI"
      "SK_FACTOR\020\n\022\017\n\013ASSOCIATION\020\013\022\016\n\nPROTECTI"
      "VE\020\014\022\025\n\021MULTIPLE_REPORTED\020\r\"\227\002\n\nTranscri"
      "pt\022\017\n\007gene_id\030\001 \001(\t\0222\n\005exons\030\002 \003(\0132#.goo"
      "gle.genomics.v1.Transcript.Exon\022F\n\017codin"
      "g_sequence\030\003 \001(\0132-.google.genomics.v1.Tr"
      "anscript.CodingSequence\032N\n\004Exon\022\r\n\005start"
      "\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\022*\n\005frame\030\003 \001(\0132\033.goo"
      "gle.protobuf.Int32Value\032,\n\016CodingSequenc"
      "e\022\r\n\005start\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"-\n\nExterna"
      "lId\022\023\n\013source_name\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\"W\n\032"
      "CreateAnnotationSetRequest\0229\n\016annotation"
      "_set\030\001 \001(\0132!.google.genomics.v1.Annotati"
      "onSet\"4\n\027GetAnnotationSetRequest\022\031\n\021anno"
      "tation_set_id\030\001 \001(\t\"\243\001\n\032UpdateAnnotation"
      "SetRequest\022\031\n\021annotation_set_id\030\001 \001(\t\0229\n"
      "\016annotation_set\030\002 \001(\0132!.google.genomics."
      "v1.AnnotationSet\022/\n\013update_mask\030\003 \001(\0132\032."
      "google.protobuf.FieldMask\"7\n\032DeleteAnnot"
      "ationSetRequest\022\031\n\021annotation_set_id\030\001 \001"
      "(\t\"\264\001\n\033SearchAnnotationSetsRequest\022\023\n\013da"
      "taset_ids\030\001 \003(\t\022\030\n\020reference_set_id\030\002 \001("
      "\t\022\014\n\004name\030\003 \001(\t\0221\n\005types\030\004 \003(\0162\".google."
      "genomics.v1.AnnotationType\022\022\n\npage_token"
      "\030\005 \001(\t\022\021\n\tpage_size\030\006 \001(\005\"s\n\034SearchAnnot"
      "ationSetsResponse\022:\n\017annotation_sets\030\001 \003"
      "(\0132!.google.genomics.v1.AnnotationSet\022\027\n"
      "\017next_page_token\030\002 \001(\t\"M\n\027CreateAnnotati"
      "onRequest\0222\n\nannotation\030\001 \001(\0132\036.google.g"
      "enomics.v1.Annotation\"h\n\035BatchCreateAnno"
      "tationsRequest\0223\n\013annotations\030\001 \003(\0132\036.go"
      "ogle.genomics.v1.Annotation\022\022\n\nrequest_i"
      "d\030\002 \001(\t\"\314\001\n\036BatchCreateAnnotationsRespon"
      "se\022I\n\007entries\030\001 \003(\01328.google.genomics.v1"
      ".BatchCreateAnnotationsResponse.Entry\032_\n"
      "\005Entry\022\"\n\006status\030\001 \001(\0132\022.google.rpc.Stat"
      "us\0222\n\nannotation\030\002 \001(\0132\036.google.genomics"
      ".v1.Annotation\"-\n\024GetAnnotationRequest\022\025"
      "\n\rannotation_id\030\001 \001(\t\"\225\001\n\027UpdateAnnotati"
      "onRequest\022\025\n\rannotation_id\030\001 \001(\t\0222\n\nanno"
      "tation\030\002 \001(\0132\036.google.genomics.v1.Annota"
      "tion\022/\n\013update_mask\030\003 \001(\0132\032.google.proto"
      "buf.FieldMask\"0\n\027DeleteAnnotationRequest"
      "\022\025\n\rannotation_id\030\001 \001(\t\"\270\001\n\030SearchAnnota"
      "tionsRequest\022\032\n\022annotation_set_ids\030\001 \003(\t"
      "\022\026\n\014reference_id\030\002 \001(\tH\000\022\030\n\016reference_na"
      "me\030\003 \001(\tH\000\022\r\n\005start\030\004 \001(\003\022\013\n\003end\030\005 \001(\003\022\022"
      "\n\npage_token\030\006 \001(\t\022\021\n\tpage_size\030\007 \001(\005B\013\n"
      "\treference\"i\n\031SearchAnnotationsResponse\022"
      "3\n\013annotations\030\001 \003(\0132\036.google.genomics.v"
      "1.Annotation\022\027\n\017next_page_token\030\002 \001(\t*e\n"
      "\016AnnotationType\022\037\n\033ANNOTATION_TYPE_UNSPE"
      "CIFIED\020\000\022\013\n\007GENERIC\020\001\022\013\n\007VARIANT\020\002\022\010\n\004GE"
      "NE\020\003\022\016\n\nTRANSCRIPT\020\0042\204\r\n\023AnnotationServi"
      "ceV1\022\224\001\n\023CreateAnnotationSet\022..google.ge"
      "nomics.v1.CreateAnnotationSetRequest\032!.g"
      "oogle.genomics.v1.AnnotationSet\"*\202\323\344\223\002$\""
      "\022/v1/annotationsets:\016annotation_set\022\222\001\n\020"
      "GetAnnotationSet\022+.google.genomics.v1.Ge"
      "tAnnotationSetRequest\032!.google.genomics."
      "v1.AnnotationSet\".\202\323\344\223\002(\022&/v1/annotation"
      "sets/{annotation_set_id}\022\250\001\n\023UpdateAnnot"
      "ationSet\022..google.genomics.v1.UpdateAnno"
      "tationSetRequest\032!.google.genomics.v1.An"
      "notationSet\">\202\323\344\223\0028\032&/v1/annotationsets/"
      "{annotation_set_id}:\016annotation_set\022\215\001\n\023"
      "DeleteAnnotationSet\022..google.genomics.v1"
      ".DeleteAnnotationSetRequest\032\026.google.pro"
      "tobuf.Empty\".\202\323\344\223\002(*&/v1/annotationsets/"
      "{annotation_set_id}\022\237\001\n\024SearchAnnotation"
      "Sets\022/.google.genomics.v1.SearchAnnotati"
      "onSetsRequest\0320.google.genomics.v1.Searc"
      "hAnnotationSetsResponse\"$\202\323\344\223\002\036\"\031/v1/ann"
      "otationsets/search:\001*\022\204\001\n\020CreateAnnotati"
      "on\022+.google.genomics.v1.CreateAnnotation"
      "Request\032\036.google.genomics.v1.Annotation\""
      "#\202\323\344\223\002\035\"\017/v1/annotations:\nannotation\022\247\001\n"
      "\026BatchCreateAnnotations\0221.google.genomic"
      "s.v1.BatchCreateAnnotationsRequest\0322.goo"
      "gle.genomics.v1.BatchCreateAnnotationsRe"
      "sponse\"&\202\323\344\223\002 \"\033/v1/annotations:batchCre"
      "ate:\001*\022\202\001\n\rGetAnnotation\022(.google.genomi"
      "cs.v1.GetAnnotationRequest\032\036.google.geno"
      "mics.v1.Annotation\"\'\202\323\344\223\002!\022\037/v1/annotati"
      "ons/{annotation_id}\022\224\001\n\020UpdateAnnotation"
      "\022+.google.genomics.v1.UpdateAnnotationRe"
      "quest\032\036.google.genomics.v1.Annotation\"3\202"
      "\323\344\223\002-\032\037/v1/annotations/{annotation_id}:\n"
      "annotation\022\200\001\n\020DeleteAnnotation\022+.google"
      ".genomics.v1.DeleteAnnotationRequest\032\026.g"
      "oogle.protobuf.Empty\"\'\202\323\344\223\002!*\037/v1/annota"
      "tions/{annotation_id}\022\223\001\n\021SearchAnnotati"
      "ons\022,.google.genomics.v1.SearchAnnotatio"
      "nsRequest\032-.google.genomics.v1.SearchAnn"
      "otationsResponse\"!\202\323\344\223\002\033\"\026/v1/annotation"
      "s/search:\001*Bk\n\026com.google.genomics.v1B\020A"
      "nnotationsProtoP\001Z:google.golang.org/gen"
      "proto/googleapis/genomics/v1;genomics\370\001\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5968);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/annotations.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fgenomics_2fv1_2fannotations_2eproto

const ::google::protobuf::EnumDescriptor* VariantAnnotation_Type_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_enum_descriptors[0];
}
bool VariantAnnotation_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VariantAnnotation_Type VariantAnnotation::TYPE_UNSPECIFIED;
const VariantAnnotation_Type VariantAnnotation::TYPE_OTHER;
const VariantAnnotation_Type VariantAnnotation::INSERTION;
const VariantAnnotation_Type VariantAnnotation::DELETION;
const VariantAnnotation_Type VariantAnnotation::SUBSTITUTION;
const VariantAnnotation_Type VariantAnnotation::SNP;
const VariantAnnotation_Type VariantAnnotation::STRUCTURAL;
const VariantAnnotation_Type VariantAnnotation::CNV;
const VariantAnnotation_Type VariantAnnotation::Type_MIN;
const VariantAnnotation_Type VariantAnnotation::Type_MAX;
const int VariantAnnotation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VariantAnnotation_Effect_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_enum_descriptors[1];
}
bool VariantAnnotation_Effect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VariantAnnotation_Effect VariantAnnotation::EFFECT_UNSPECIFIED;
const VariantAnnotation_Effect VariantAnnotation::EFFECT_OTHER;
const VariantAnnotation_Effect VariantAnnotation::FRAMESHIFT;
const VariantAnnotation_Effect VariantAnnotation::FRAME_PRESERVING_INDEL;
const VariantAnnotation_Effect VariantAnnotation::SYNONYMOUS_SNP;
const VariantAnnotation_Effect VariantAnnotation::NONSYNONYMOUS_SNP;
const VariantAnnotation_Effect VariantAnnotation::STOP_GAIN;
const VariantAnnotation_Effect VariantAnnotation::STOP_LOSS;
const VariantAnnotation_Effect VariantAnnotation::SPLICE_SITE_DISRUPTION;
const VariantAnnotation_Effect VariantAnnotation::Effect_MIN;
const VariantAnnotation_Effect VariantAnnotation::Effect_MAX;
const int VariantAnnotation::Effect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VariantAnnotation_ClinicalSignificance_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_enum_descriptors[2];
}
bool VariantAnnotation_ClinicalSignificance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VariantAnnotation_ClinicalSignificance VariantAnnotation::CLINICAL_SIGNIFICANCE_UNSPECIFIED;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::CLINICAL_SIGNIFICANCE_OTHER;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::UNCERTAIN;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::BENIGN;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::LIKELY_BENIGN;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::LIKELY_PATHOGENIC;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::PATHOGENIC;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::DRUG_RESPONSE;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::HISTOCOMPATIBILITY;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::CONFERS_SENSITIVITY;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::RISK_FACTOR;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::ASSOCIATION;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::PROTECTIVE;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::MULTIPLE_REPORTED;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::ClinicalSignificance_MIN;
const VariantAnnotation_ClinicalSignificance VariantAnnotation::ClinicalSignificance_MAX;
const int VariantAnnotation::ClinicalSignificance_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AnnotationType_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_enum_descriptors[3];
}
bool AnnotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

AnnotationSet::AnnotationSet_InfoEntry::AnnotationSet_InfoEntry() {}
AnnotationSet::AnnotationSet_InfoEntry::AnnotationSet_InfoEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AnnotationSet::AnnotationSet_InfoEntry::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[0];
}
void AnnotationSet::AnnotationSet_InfoEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AnnotationSet::AnnotationSet_InfoEntry::MergeFrom(const AnnotationSet_InfoEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotationSet::kIdFieldNumber;
const int AnnotationSet::kDatasetIdFieldNumber;
const int AnnotationSet::kReferenceSetIdFieldNumber;
const int AnnotationSet::kNameFieldNumber;
const int AnnotationSet::kSourceUriFieldNumber;
const int AnnotationSet::kTypeFieldNumber;
const int AnnotationSet::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotationSet::AnnotationSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.AnnotationSet)
}
AnnotationSet::AnnotationSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.AnnotationSet)
}
AnnotationSet::AnnotationSet(const AnnotationSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id(),
      GetArenaNoVirtual());
  }
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_uri().size() > 0) {
    source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_uri(),
      GetArenaNoVirtual());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.AnnotationSet)
}

void AnnotationSet::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

AnnotationSet::~AnnotationSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.AnnotationSet)
  SharedDtor();
}

void AnnotationSet::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AnnotationSet::ArenaDtor(void* object) {
  AnnotationSet* _this = reinterpret_cast< AnnotationSet* >(object);
  (void)_this;
}
void AnnotationSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AnnotationSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotationSet::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotationSet& AnnotationSet::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotationSet* AnnotationSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AnnotationSet>(arena);
}

void AnnotationSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.AnnotationSet)
  info_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_ = 0;
}

bool AnnotationSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.AnnotationSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.AnnotationSet.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.AnnotationSet.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_set_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.AnnotationSet.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.AnnotationSet.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), this->source_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.AnnotationSet.source_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.AnnotationType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::genomics::v1::AnnotationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          AnnotationSet_InfoEntry::Parser< ::google::protobuf::internal::MapField<
              AnnotationSet_InfoEntry,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.AnnotationSet.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.AnnotationSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.AnnotationSet)
  return false;
#undef DO_
}

void AnnotationSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.AnnotationSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset_id(), output);
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_set_id(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_uri(), output);
  }

  // .google.genomics.v1.AnnotationType type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // map<string, .google.protobuf.ListValue> info = 17;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.AnnotationSet.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AnnotationSet_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AnnotationSet_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.AnnotationSet)
}

::google::protobuf::uint8* AnnotationSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.AnnotationSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset_id(), target);
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_set_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.AnnotationSet.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_uri(), target);
  }

  // .google.genomics.v1.AnnotationType type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // map<string, .google.protobuf.ListValue> info = 17;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.AnnotationSet.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AnnotationSet_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AnnotationSet_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.AnnotationSet)
  return target;
}

size_t AnnotationSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.AnnotationSet)
  size_t total_size = 0;

  // map<string, .google.protobuf.ListValue> info = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<AnnotationSet_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // .google.genomics.v1.AnnotationType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotationSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.AnnotationSet)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotationSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.AnnotationSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.AnnotationSet)
    MergeFrom(*source);
  }
}

void AnnotationSet::MergeFrom(const AnnotationSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.AnnotationSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AnnotationSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.AnnotationSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationSet::CopyFrom(const AnnotationSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.AnnotationSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationSet::IsInitialized() const {
  return true;
}

void AnnotationSet::Swap(AnnotationSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AnnotationSet* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AnnotationSet::UnsafeArenaSwap(AnnotationSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AnnotationSet::InternalSwap(AnnotationSet* other) {
  info_.Swap(&other->info_);
  id_.Swap(&other->id_);
  dataset_id_.Swap(&other->dataset_id_);
  reference_set_id_.Swap(&other->reference_set_id_);
  name_.Swap(&other->name_);
  source_uri_.Swap(&other->source_uri_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotationSet::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotationSet

// string id = 1;
void AnnotationSet::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AnnotationSet::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.AnnotationSet.id)
  return id_.Get();
}
void AnnotationSet::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.AnnotationSet.id)
}
void AnnotationSet::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.AnnotationSet.id)
}
void AnnotationSet::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.AnnotationSet.id)
}
::std::string* AnnotationSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.AnnotationSet.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.AnnotationSet.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.AnnotationSet.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AnnotationSet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.AnnotationSet.id)
}
void AnnotationSet::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.AnnotationSet.id)
}

// string dataset_id = 2;
void AnnotationSet::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AnnotationSet::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.AnnotationSet.dataset_id)
  return dataset_id_.Get();
}
void AnnotationSet::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.AnnotationSet.dataset_id)
}
void AnnotationSet::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.AnnotationSet.dataset_id)
}
void AnnotationSet::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.AnnotationSet.dataset_id)
}
::std::string* AnnotationSet::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.AnnotationSet.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.AnnotationSet.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.AnnotationSet.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AnnotationSet::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.AnnotationSet.dataset_id)
}
void AnnotationSet::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.AnnotationSet.dataset_id)
}

// string reference_set_id = 3;
void AnnotationSet::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AnnotationSet::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.AnnotationSet.reference_set_id)
  return reference_set_id_.Get();
}
void AnnotationSet::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.AnnotationSet.reference_set_id)
}
void AnnotationSet::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.AnnotationSet.reference_set_id)
}
void AnnotationSet::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.AnnotationSet.reference_set_id)
}
::std::string* AnnotationSet::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.AnnotationSet.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.AnnotationSet.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.AnnotationSet.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AnnotationSet::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.AnnotationSet.reference_set_id)
}
void AnnotationSet::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.AnnotationSet.reference_set_id)
}

// string name = 4;
void AnnotationSet::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AnnotationSet::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.AnnotationSet.name)
  return name_.Get();
}
void AnnotationSet::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.AnnotationSet.name)
}
void AnnotationSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.AnnotationSet.name)
}
void AnnotationSet::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.AnnotationSet.name)
}
::std::string* AnnotationSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.AnnotationSet.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.AnnotationSet.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.AnnotationSet.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AnnotationSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.AnnotationSet.name)
}
void AnnotationSet::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.AnnotationSet.name)
}

// string source_uri = 5;
void AnnotationSet::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AnnotationSet::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.AnnotationSet.source_uri)
  return source_uri_.Get();
}
void AnnotationSet::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.AnnotationSet.source_uri)
}
void AnnotationSet::set_source_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.AnnotationSet.source_uri)
}
void AnnotationSet::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.AnnotationSet.source_uri)
}
::std::string* AnnotationSet::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.AnnotationSet.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.AnnotationSet.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AnnotationSet::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.AnnotationSet.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AnnotationSet::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.AnnotationSet.source_uri)
}
void AnnotationSet::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.AnnotationSet.source_uri)
}

// .google.genomics.v1.AnnotationType type = 6;
void AnnotationSet::clear_type() {
  type_ = 0;
}
::google::genomics::v1::AnnotationType AnnotationSet::type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.AnnotationSet.type)
  return static_cast< ::google::genomics::v1::AnnotationType >(type_);
}
void AnnotationSet::set_type(::google::genomics::v1::AnnotationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.AnnotationSet.type)
}

// map<string, .google.protobuf.ListValue> info = 17;
int AnnotationSet::info_size() const {
  return info_.size();
}
void AnnotationSet::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >&
AnnotationSet::info() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.AnnotationSet.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >*
AnnotationSet::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.AnnotationSet.info)
  return info_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Annotation::Annotation_InfoEntry::Annotation_InfoEntry() {}
Annotation::Annotation_InfoEntry::Annotation_InfoEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Annotation::Annotation_InfoEntry::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[2];
}
void Annotation::Annotation_InfoEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Annotation::Annotation_InfoEntry::MergeFrom(const Annotation_InfoEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotation::kIdFieldNumber;
const int Annotation::kAnnotationSetIdFieldNumber;
const int Annotation::kNameFieldNumber;
const int Annotation::kReferenceIdFieldNumber;
const int Annotation::kReferenceNameFieldNumber;
const int Annotation::kStartFieldNumber;
const int Annotation::kEndFieldNumber;
const int Annotation::kReverseStrandFieldNumber;
const int Annotation::kTypeFieldNumber;
const int Annotation::kVariantFieldNumber;
const int Annotation::kTranscriptFieldNumber;
const int Annotation::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotation::Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Annotation)
}
Annotation::Annotation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_set_id().size() > 0) {
    annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_set_id(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_) + sizeof(type_));
  clear_has_value();
  switch (from.value_case()) {
    case kVariant: {
      mutable_variant()->::google::genomics::v1::VariantAnnotation::MergeFrom(from.variant());
      break;
    }
    case kTranscript: {
      mutable_transcript()->::google::genomics::v1::Transcript::MergeFrom(from.transcript());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Annotation)
}

void Annotation::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_) + sizeof(type_));
  clear_has_value();
  _cached_size_ = 0;
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  annotation_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_value()) {
    clear_value();
  }
}

void Annotation::ArenaDtor(void* object) {
  Annotation* _this = reinterpret_cast< Annotation* >(object);
  (void)_this;
}
void Annotation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotation::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Annotation& Annotation::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Annotation* Annotation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Annotation>(arena);
}

void Annotation::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:google.genomics.v1.Annotation)
  switch (value_case()) {
    case kVariant: {
      if (GetArenaNoVirtual() == NULL) {
        delete value_.variant_;
      }
      break;
    }
    case kTranscript: {
      if (GetArenaNoVirtual() == NULL) {
        delete value_.transcript_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Annotation)
  info_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_) + sizeof(type_));
  clear_value();
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Annotation.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string annotation_set_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_set_id().data(), this->annotation_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Annotation.annotation_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Annotation.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), this->reference_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Annotation.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Annotation.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse_strand = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_strand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.AnnotationType type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::genomics::v1::AnnotationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.VariantAnnotation variant = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.Transcript transcript = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transcript()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          Annotation_InfoEntry::Parser< ::google::protobuf::internal::MapField<
              Annotation_InfoEntry,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Annotation.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Annotation)
  return false;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string annotation_set_id = 2;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.annotation_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->annotation_set_id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string reference_id = 4;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference_id(), output);
  }

  // string reference_name = 5;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reference_name(), output);
  }

  // int64 start = 6;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->start(), output);
  }

  // int64 end = 7;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end(), output);
  }

  // bool reverse_strand = 8;
  if (this->reverse_strand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reverse_strand(), output);
  }

  // .google.genomics.v1.AnnotationType type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // .google.genomics.v1.VariantAnnotation variant = 10;
  if (has_variant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.variant_, output);
  }

  // .google.genomics.v1.Transcript transcript = 11;
  if (has_transcript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.transcript_, output);
  }

  // map<string, .google.protobuf.ListValue> info = 12;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Annotation.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Annotation_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Annotation_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Annotation)
}

::google::protobuf::uint8* Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string annotation_set_id = 2;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.annotation_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->annotation_set_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string reference_id = 4;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference_id(), target);
  }

  // string reference_name = 5;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Annotation.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reference_name(), target);
  }

  // int64 start = 6;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->start(), target);
  }

  // int64 end = 7;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end(), target);
  }

  // bool reverse_strand = 8;
  if (this->reverse_strand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reverse_strand(), target);
  }

  // .google.genomics.v1.AnnotationType type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // .google.genomics.v1.VariantAnnotation variant = 10;
  if (has_variant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *value_.variant_, deterministic, target);
  }

  // .google.genomics.v1.Transcript transcript = 11;
  if (has_transcript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *value_.transcript_, deterministic, target);
  }

  // map<string, .google.protobuf.ListValue> info = 12;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Annotation.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Annotation_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Annotation_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Annotation)
  size_t total_size = 0;

  // map<string, .google.protobuf.ListValue> info = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<Annotation_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string annotation_set_id = 2;
  if (this->annotation_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_set_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string reference_id = 4;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // string reference_name = 5;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // int64 start = 6;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 7;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // bool reverse_strand = 8;
  if (this->reverse_strand() != 0) {
    total_size += 1 + 1;
  }

  // .google.genomics.v1.AnnotationType type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (value_case()) {
    // .google.genomics.v1.VariantAnnotation variant = 10;
    case kVariant: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.variant_);
      break;
    }
    // .google.genomics.v1.Transcript transcript = 11;
    case kTranscript: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.transcript_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Annotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.annotation_set_id().size() > 0) {
    set_annotation_set_id(from.annotation_set_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.reverse_strand() != 0) {
    set_reverse_strand(from.reverse_strand());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.value_case()) {
    case kVariant: {
      mutable_variant()->::google::genomics::v1::VariantAnnotation::MergeFrom(from.variant());
      break;
    }
    case kTranscript: {
      mutable_transcript()->::google::genomics::v1::Transcript::MergeFrom(from.transcript());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Annotation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Annotation::UnsafeArenaSwap(Annotation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Annotation::InternalSwap(Annotation* other) {
  info_.Swap(&other->info_);
  id_.Swap(&other->id_);
  annotation_set_id_.Swap(&other->annotation_set_id_);
  name_.Swap(&other->name_);
  reference_id_.Swap(&other->reference_id_);
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(reverse_strand_, other->reverse_strand_);
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Annotation::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotation

// string id = 1;
void Annotation::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Annotation::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.id)
  return id_.Get();
}
void Annotation::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.id)
}
void Annotation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Annotation.id)
}
void Annotation::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Annotation.id)
}
::std::string* Annotation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Annotation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.id)
}
void Annotation::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.id)
}

// string annotation_set_id = 2;
void Annotation::clear_annotation_set_id() {
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Annotation::annotation_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.annotation_set_id)
  return annotation_set_id_.Get();
}
void Annotation::set_annotation_set_id(const ::std::string& value) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.annotation_set_id)
}
void Annotation::set_annotation_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Annotation.annotation_set_id)
}
void Annotation::set_annotation_set_id(const char* value,
    size_t size) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Annotation.annotation_set_id)
}
::std::string* Annotation::mutable_annotation_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.annotation_set_id)
  return annotation_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::release_annotation_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.annotation_set_id)
  
  return annotation_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::unsafe_arena_release_annotation_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.annotation_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Annotation::set_allocated_annotation_set_id(::std::string* annotation_set_id) {
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.annotation_set_id)
}
void Annotation::unsafe_arena_set_allocated_annotation_set_id(
    ::std::string* annotation_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.annotation_set_id)
}

// string name = 3;
void Annotation::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Annotation::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.name)
  return name_.Get();
}
void Annotation::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.name)
}
void Annotation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Annotation.name)
}
void Annotation::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Annotation.name)
}
::std::string* Annotation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Annotation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.name)
}
void Annotation::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.name)
}

// string reference_id = 4;
void Annotation::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Annotation::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.reference_id)
  return reference_id_.Get();
}
void Annotation::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.reference_id)
}
void Annotation::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Annotation.reference_id)
}
void Annotation::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Annotation.reference_id)
}
::std::string* Annotation::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Annotation::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.reference_id)
}
void Annotation::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.reference_id)
}

// string reference_name = 5;
void Annotation::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Annotation::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.reference_name)
  return reference_name_.Get();
}
void Annotation::set_reference_name(const ::std::string& value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.reference_name)
}
void Annotation::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Annotation.reference_name)
}
void Annotation::set_reference_name(const char* value,
    size_t size) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Annotation.reference_name)
}
::std::string* Annotation::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.reference_name)
  
  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Annotation::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Annotation::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.reference_name)
}
void Annotation::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.reference_name)
}

// int64 start = 6;
void Annotation::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Annotation::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.start)
  return start_;
}
void Annotation::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.start)
}

// int64 end = 7;
void Annotation::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Annotation::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.end)
  return end_;
}
void Annotation::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.end)
}

// bool reverse_strand = 8;
void Annotation::clear_reverse_strand() {
  reverse_strand_ = false;
}
bool Annotation::reverse_strand() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.reverse_strand)
  return reverse_strand_;
}
void Annotation::set_reverse_strand(bool value) {
  
  reverse_strand_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.reverse_strand)
}

// .google.genomics.v1.AnnotationType type = 9;
void Annotation::clear_type() {
  type_ = 0;
}
::google::genomics::v1::AnnotationType Annotation::type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.type)
  return static_cast< ::google::genomics::v1::AnnotationType >(type_);
}
void Annotation::set_type(::google::genomics::v1::AnnotationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Annotation.type)
}

// .google.genomics.v1.VariantAnnotation variant = 10;
bool Annotation::has_variant() const {
  return value_case() == kVariant;
}
void Annotation::set_has_variant() {
  _oneof_case_[0] = kVariant;
}
void Annotation::clear_variant() {
  if (has_variant()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.variant_;
    }
    clear_has_value();
  }
}
 const ::google::genomics::v1::VariantAnnotation& Annotation::variant() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.variant)
  return has_variant()
      ? *value_.variant_
      : ::google::genomics::v1::VariantAnnotation::default_instance();
}
::google::genomics::v1::VariantAnnotation* Annotation::mutable_variant() {
  if (!has_variant()) {
    clear_value();
    set_has_variant();
    value_.variant_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantAnnotation >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.variant)
  return value_.variant_;
}
::google::genomics::v1::VariantAnnotation* Annotation::release_variant() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.variant)
  if (has_variant()) {
    clear_has_value();
    if (GetArenaNoVirtual() != NULL) {
      ::google::genomics::v1::VariantAnnotation* temp = new ::google::genomics::v1::VariantAnnotation(*value_.variant_);
      value_.variant_ = NULL;
      return temp;
    } else {
      ::google::genomics::v1::VariantAnnotation* temp = value_.variant_;
      value_.variant_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Annotation::set_allocated_variant(::google::genomics::v1::VariantAnnotation* variant) {
  clear_value();
  if (variant) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(variant) == NULL) {
      GetArenaNoVirtual()->Own(variant);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(variant)) {
      ::google::genomics::v1::VariantAnnotation* new_variant = 
          ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantAnnotation >(
          GetArenaNoVirtual());
      new_variant->CopyFrom(*variant);
      variant = new_variant;
    }
    set_has_variant();
    value_.variant_ = variant;
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.variant)
}
 ::google::genomics::v1::VariantAnnotation* Annotation::unsafe_arena_release_variant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.variant)
  if (has_variant()) {
    clear_has_value();
    ::google::genomics::v1::VariantAnnotation* temp = value_.variant_;
    value_.variant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Annotation::unsafe_arena_set_allocated_variant(::google::genomics::v1::VariantAnnotation* variant) {
  clear_value();
  if (variant) {
    set_has_variant();
    value_.variant_ = variant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.variant)
}

// .google.genomics.v1.Transcript transcript = 11;
bool Annotation::has_transcript() const {
  return value_case() == kTranscript;
}
void Annotation::set_has_transcript() {
  _oneof_case_[0] = kTranscript;
}
void Annotation::clear_transcript() {
  if (has_transcript()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.transcript_;
    }
    clear_has_value();
  }
}
 const ::google::genomics::v1::Transcript& Annotation::transcript() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Annotation.transcript)
  return has_transcript()
      ? *value_.transcript_
      : ::google::genomics::v1::Transcript::default_instance();
}
::google::genomics::v1::Transcript* Annotation::mutable_transcript() {
  if (!has_transcript()) {
    clear_value();
    set_has_transcript();
    value_.transcript_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Transcript >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Annotation.transcript)
  return value_.transcript_;
}
::google::genomics::v1::Transcript* Annotation::release_transcript() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Annotation.transcript)
  if (has_transcript()) {
    clear_has_value();
    if (GetArenaNoVirtual() != NULL) {
      ::google::genomics::v1::Transcript* temp = new ::google::genomics::v1::Transcript(*value_.transcript_);
      value_.transcript_ = NULL;
      return temp;
    } else {
      ::google::genomics::v1::Transcript* temp = value_.transcript_;
      value_.transcript_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Annotation::set_allocated_transcript(::google::genomics::v1::Transcript* transcript) {
  clear_value();
  if (transcript) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(transcript) == NULL) {
      GetArenaNoVirtual()->Own(transcript);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(transcript)) {
      ::google::genomics::v1::Transcript* new_transcript = 
          ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Transcript >(
          GetArenaNoVirtual());
      new_transcript->CopyFrom(*transcript);
      transcript = new_transcript;
    }
    set_has_transcript();
    value_.transcript_ = transcript;
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Annotation.transcript)
}
 ::google::genomics::v1::Transcript* Annotation::unsafe_arena_release_transcript() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Annotation.transcript)
  if (has_transcript()) {
    clear_has_value();
    ::google::genomics::v1::Transcript* temp = value_.transcript_;
    value_.transcript_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Annotation::unsafe_arena_set_allocated_transcript(::google::genomics::v1::Transcript* transcript) {
  clear_value();
  if (transcript) {
    set_has_transcript();
    value_.transcript_ = transcript;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Annotation.transcript)
}

// map<string, .google.protobuf.ListValue> info = 12;
int Annotation::info_size() const {
  return info_.size();
}
void Annotation::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >&
Annotation::info() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.Annotation.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >*
Annotation::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.Annotation.info)
  return info_.MutableMap();
}

bool Annotation::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Annotation::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Annotation::ValueCase Annotation::value_case() const {
  return Annotation::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantAnnotation_ClinicalCondition::kNamesFieldNumber;
const int VariantAnnotation_ClinicalCondition::kExternalIdsFieldNumber;
const int VariantAnnotation_ClinicalCondition::kConceptIdFieldNumber;
const int VariantAnnotation_ClinicalCondition::kOmimIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantAnnotation_ClinicalCondition::VariantAnnotation_ClinicalCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantAnnotation.ClinicalCondition)
}
VariantAnnotation_ClinicalCondition::VariantAnnotation_ClinicalCondition(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  names_(arena),
  external_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantAnnotation.ClinicalCondition)
}
VariantAnnotation_ClinicalCondition::VariantAnnotation_ClinicalCondition(const VariantAnnotation_ClinicalCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      names_(from.names_),
      external_ids_(from.external_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.concept_id().size() > 0) {
    concept_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.concept_id(),
      GetArenaNoVirtual());
  }
  omim_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.omim_id().size() > 0) {
    omim_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.omim_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantAnnotation.ClinicalCondition)
}

void VariantAnnotation_ClinicalCondition::SharedCtor() {
  concept_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  omim_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VariantAnnotation_ClinicalCondition::~VariantAnnotation_ClinicalCondition() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  SharedDtor();
}

void VariantAnnotation_ClinicalCondition::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  concept_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  omim_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VariantAnnotation_ClinicalCondition::ArenaDtor(void* object) {
  VariantAnnotation_ClinicalCondition* _this = reinterpret_cast< VariantAnnotation_ClinicalCondition* >(object);
  (void)_this;
}
void VariantAnnotation_ClinicalCondition::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantAnnotation_ClinicalCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantAnnotation_ClinicalCondition::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariantAnnotation_ClinicalCondition& VariantAnnotation_ClinicalCondition::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

VariantAnnotation_ClinicalCondition* VariantAnnotation_ClinicalCondition::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantAnnotation_ClinicalCondition>(arena);
}

void VariantAnnotation_ClinicalCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  names_.Clear();
  external_ids_.Clear();
  concept_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  omim_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool VariantAnnotation_ClinicalCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantAnnotation.ClinicalCondition.names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.ExternalId external_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_external_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string concept_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_concept_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->concept_id().data(), this->concept_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string omim_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_omim_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->omim_id().data(), this->omim_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  return false;
#undef DO_
}

void VariantAnnotation_ClinicalCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.ClinicalCondition.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  // repeated .google.genomics.v1.ExternalId external_ids = 2;
  for (unsigned int i = 0, n = this->external_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->external_ids(i), output);
  }

  // string concept_id = 3;
  if (this->concept_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->concept_id().data(), this->concept_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->concept_id(), output);
  }

  // string omim_id = 4;
  if (this->omim_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->omim_id().data(), this->omim_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->omim_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantAnnotation.ClinicalCondition)
}

::google::protobuf::uint8* VariantAnnotation_ClinicalCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.ClinicalCondition.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  // repeated .google.genomics.v1.ExternalId external_ids = 2;
  for (unsigned int i = 0, n = this->external_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->external_ids(i), deterministic, target);
  }

  // string concept_id = 3;
  if (this->concept_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->concept_id().data(), this->concept_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->concept_id(), target);
  }

  // string omim_id = 4;
  if (this->omim_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->omim_id().data(), this->omim_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->omim_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  return target;
}

size_t VariantAnnotation_ClinicalCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  size_t total_size = 0;

  // repeated string names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated .google.genomics.v1.ExternalId external_ids = 2;
  {
    unsigned int count = this->external_ids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->external_ids(i));
    }
  }

  // string concept_id = 3;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->concept_id());
  }

  // string omim_id = 4;
  if (this->omim_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->omim_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantAnnotation_ClinicalCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantAnnotation_ClinicalCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantAnnotation_ClinicalCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantAnnotation.ClinicalCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantAnnotation.ClinicalCondition)
    MergeFrom(*source);
  }
}

void VariantAnnotation_ClinicalCondition::MergeFrom(const VariantAnnotation_ClinicalCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  external_ids_.MergeFrom(from.external_ids_);
  if (from.concept_id().size() > 0) {
    set_concept_id(from.concept_id());
  }
  if (from.omim_id().size() > 0) {
    set_omim_id(from.omim_id());
  }
}

void VariantAnnotation_ClinicalCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantAnnotation_ClinicalCondition::CopyFrom(const VariantAnnotation_ClinicalCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantAnnotation.ClinicalCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantAnnotation_ClinicalCondition::IsInitialized() const {
  return true;
}

void VariantAnnotation_ClinicalCondition::Swap(VariantAnnotation_ClinicalCondition* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantAnnotation_ClinicalCondition* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VariantAnnotation_ClinicalCondition::UnsafeArenaSwap(VariantAnnotation_ClinicalCondition* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantAnnotation_ClinicalCondition::InternalSwap(VariantAnnotation_ClinicalCondition* other) {
  names_.InternalSwap(&other->names_);
  external_ids_.InternalSwap(&other->external_ids_);
  concept_id_.Swap(&other->concept_id_);
  omim_id_.Swap(&other->omim_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantAnnotation_ClinicalCondition::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariantAnnotation_ClinicalCondition

// repeated string names = 1;
int VariantAnnotation_ClinicalCondition::names_size() const {
  return names_.size();
}
void VariantAnnotation_ClinicalCondition::clear_names() {
  names_.Clear();
}
const ::std::string& VariantAnnotation_ClinicalCondition::names(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  return names_.Get(index);
}
::std::string* VariantAnnotation_ClinicalCondition::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  return names_.Mutable(index);
}
void VariantAnnotation_ClinicalCondition::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VariantAnnotation_ClinicalCondition::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
void VariantAnnotation_ClinicalCondition::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
}
void VariantAnnotation_ClinicalCondition::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
}
::std::string* VariantAnnotation_ClinicalCondition::add_names() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  return names_.Add();
}
void VariantAnnotation_ClinicalCondition::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
}
#if LANG_CXX11
void VariantAnnotation_ClinicalCondition::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
}
#endif
void VariantAnnotation_ClinicalCondition::add_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
}
void VariantAnnotation_ClinicalCondition::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VariantAnnotation_ClinicalCondition::names() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  return names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VariantAnnotation_ClinicalCondition::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantAnnotation.ClinicalCondition.names)
  return &names_;
}

// repeated .google.genomics.v1.ExternalId external_ids = 2;
int VariantAnnotation_ClinicalCondition::external_ids_size() const {
  return external_ids_.size();
}
void VariantAnnotation_ClinicalCondition::clear_external_ids() {
  external_ids_.Clear();
}
const ::google::genomics::v1::ExternalId& VariantAnnotation_ClinicalCondition::external_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.ClinicalCondition.external_ids)
  return external_ids_.Get(index);
}
::google::genomics::v1::ExternalId* VariantAnnotation_ClinicalCondition::mutable_external_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.ClinicalCondition.external_ids)
  return external_ids_.Mutable(index);
}
::google::genomics::v1::ExternalId* VariantAnnotation_ClinicalCondition::add_external_ids() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantAnnotation.ClinicalCondition.external_ids)
  return external_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ExternalId >*
VariantAnnotation_ClinicalCondition::mutable_external_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantAnnotation.ClinicalCondition.external_ids)
  return &external_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ExternalId >&
VariantAnnotation_ClinicalCondition::external_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantAnnotation.ClinicalCondition.external_ids)
  return external_ids_;
}

// string concept_id = 3;
void VariantAnnotation_ClinicalCondition::clear_concept_id() {
  concept_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantAnnotation_ClinicalCondition::concept_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
  return concept_id_.Get();
}
void VariantAnnotation_ClinicalCondition::set_concept_id(const ::std::string& value) {
  
  concept_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
}
void VariantAnnotation_ClinicalCondition::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  concept_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
}
void VariantAnnotation_ClinicalCondition::set_concept_id(const char* value,
    size_t size) {
  
  concept_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
}
::std::string* VariantAnnotation_ClinicalCondition::mutable_concept_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
  return concept_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation_ClinicalCondition::release_concept_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
  
  return concept_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation_ClinicalCondition::unsafe_arena_release_concept_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return concept_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantAnnotation_ClinicalCondition::set_allocated_concept_id(::std::string* concept_id) {
  if (concept_id != NULL) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
}
void VariantAnnotation_ClinicalCondition::unsafe_arena_set_allocated_concept_id(
    ::std::string* concept_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (concept_id != NULL) {
    
  } else {
    
  }
  concept_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      concept_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantAnnotation.ClinicalCondition.concept_id)
}

// string omim_id = 4;
void VariantAnnotation_ClinicalCondition::clear_omim_id() {
  omim_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantAnnotation_ClinicalCondition::omim_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
  return omim_id_.Get();
}
void VariantAnnotation_ClinicalCondition::set_omim_id(const ::std::string& value) {
  
  omim_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
}
void VariantAnnotation_ClinicalCondition::set_omim_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  omim_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
}
void VariantAnnotation_ClinicalCondition::set_omim_id(const char* value,
    size_t size) {
  
  omim_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
}
::std::string* VariantAnnotation_ClinicalCondition::mutable_omim_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
  return omim_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation_ClinicalCondition::release_omim_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
  
  return omim_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation_ClinicalCondition::unsafe_arena_release_omim_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return omim_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantAnnotation_ClinicalCondition::set_allocated_omim_id(::std::string* omim_id) {
  if (omim_id != NULL) {
    
  } else {
    
  }
  omim_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), omim_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
}
void VariantAnnotation_ClinicalCondition::unsafe_arena_set_allocated_omim_id(
    ::std::string* omim_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (omim_id != NULL) {
    
  } else {
    
  }
  omim_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      omim_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantAnnotation.ClinicalCondition.omim_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantAnnotation::kTypeFieldNumber;
const int VariantAnnotation::kEffectFieldNumber;
const int VariantAnnotation::kAlternateBasesFieldNumber;
const int VariantAnnotation::kGeneIdFieldNumber;
const int VariantAnnotation::kTranscriptIdsFieldNumber;
const int VariantAnnotation::kConditionsFieldNumber;
const int VariantAnnotation::kClinicalSignificanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantAnnotation::VariantAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantAnnotation)
}
VariantAnnotation::VariantAnnotation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  transcript_ids_(arena),
  conditions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantAnnotation)
}
VariantAnnotation::VariantAnnotation(const VariantAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transcript_ids_(from.transcript_ids_),
      conditions_(from.conditions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alternate_bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alternate_bases().size() > 0) {
    alternate_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alternate_bases(),
      GetArenaNoVirtual());
  }
  gene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gene_id().size() > 0) {
    gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gene_id(),
      GetArenaNoVirtual());
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&clinical_significance_) -
    reinterpret_cast<char*>(&type_) + sizeof(clinical_significance_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantAnnotation)
}

void VariantAnnotation::SharedCtor() {
  alternate_bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&clinical_significance_) -
    reinterpret_cast<char*>(&type_) + sizeof(clinical_significance_));
  _cached_size_ = 0;
}

VariantAnnotation::~VariantAnnotation() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantAnnotation)
  SharedDtor();
}

void VariantAnnotation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  alternate_bases_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  gene_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VariantAnnotation::ArenaDtor(void* object) {
  VariantAnnotation* _this = reinterpret_cast< VariantAnnotation* >(object);
  (void)_this;
}
void VariantAnnotation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantAnnotation::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariantAnnotation& VariantAnnotation::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

VariantAnnotation* VariantAnnotation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantAnnotation>(arena);
}

void VariantAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantAnnotation)
  transcript_ids_.Clear();
  conditions_.Clear();
  alternate_bases_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  gene_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&type_, 0, reinterpret_cast<char*>(&clinical_significance_) -
    reinterpret_cast<char*>(&type_) + sizeof(clinical_significance_));
}

bool VariantAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.VariantAnnotation.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::genomics::v1::VariantAnnotation_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.VariantAnnotation.Effect effect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_effect(static_cast< ::google::genomics::v1::VariantAnnotation_Effect >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alternate_bases = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alternate_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alternate_bases().data(), this->alternate_bases().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantAnnotation.alternate_bases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gene_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gene_id().data(), this->gene_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantAnnotation.gene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string transcript_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transcript_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript_ids(this->transcript_ids_size() - 1).data(),
            this->transcript_ids(this->transcript_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantAnnotation.transcript_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.VariantAnnotation.ClinicalCondition conditions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.VariantAnnotation.ClinicalSignificance clinical_significance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_clinical_significance(static_cast< ::google::genomics::v1::VariantAnnotation_ClinicalSignificance >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantAnnotation)
  return false;
#undef DO_
}

void VariantAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.VariantAnnotation.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .google.genomics.v1.VariantAnnotation.Effect effect = 2;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->effect(), output);
  }

  // string alternate_bases = 3;
  if (this->alternate_bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternate_bases().data(), this->alternate_bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.alternate_bases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alternate_bases(), output);
  }

  // string gene_id = 4;
  if (this->gene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gene_id().data(), this->gene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.gene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gene_id(), output);
  }

  // repeated string transcript_ids = 5;
  for (int i = 0, n = this->transcript_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript_ids(i).data(), this->transcript_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.transcript_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->transcript_ids(i), output);
  }

  // repeated .google.genomics.v1.VariantAnnotation.ClinicalCondition conditions = 6;
  for (unsigned int i = 0, n = this->conditions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->conditions(i), output);
  }

  // .google.genomics.v1.VariantAnnotation.ClinicalSignificance clinical_significance = 7;
  if (this->clinical_significance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->clinical_significance(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantAnnotation)
}

::google::protobuf::uint8* VariantAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.VariantAnnotation.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .google.genomics.v1.VariantAnnotation.Effect effect = 2;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->effect(), target);
  }

  // string alternate_bases = 3;
  if (this->alternate_bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternate_bases().data(), this->alternate_bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.alternate_bases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alternate_bases(), target);
  }

  // string gene_id = 4;
  if (this->gene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gene_id().data(), this->gene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.gene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gene_id(), target);
  }

  // repeated string transcript_ids = 5;
  for (int i = 0, n = this->transcript_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript_ids(i).data(), this->transcript_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantAnnotation.transcript_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->transcript_ids(i), target);
  }

  // repeated .google.genomics.v1.VariantAnnotation.ClinicalCondition conditions = 6;
  for (unsigned int i = 0, n = this->conditions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->conditions(i), deterministic, target);
  }

  // .google.genomics.v1.VariantAnnotation.ClinicalSignificance clinical_significance = 7;
  if (this->clinical_significance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->clinical_significance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantAnnotation)
  return target;
}

size_t VariantAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantAnnotation)
  size_t total_size = 0;

  // repeated string transcript_ids = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->transcript_ids_size());
  for (int i = 0, n = this->transcript_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transcript_ids(i));
  }

  // repeated .google.genomics.v1.VariantAnnotation.ClinicalCondition conditions = 6;
  {
    unsigned int count = this->conditions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditions(i));
    }
  }

  // string alternate_bases = 3;
  if (this->alternate_bases().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alternate_bases());
  }

  // string gene_id = 4;
  if (this->gene_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gene_id());
  }

  // .google.genomics.v1.VariantAnnotation.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .google.genomics.v1.VariantAnnotation.Effect effect = 2;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
  }

  // .google.genomics.v1.VariantAnnotation.ClinicalSignificance clinical_significance = 7;
  if (this->clinical_significance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->clinical_significance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantAnnotation)
    MergeFrom(*source);
  }
}

void VariantAnnotation::MergeFrom(const VariantAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transcript_ids_.MergeFrom(from.transcript_ids_);
  conditions_.MergeFrom(from.conditions_);
  if (from.alternate_bases().size() > 0) {
    set_alternate_bases(from.alternate_bases());
  }
  if (from.gene_id().size() > 0) {
    set_gene_id(from.gene_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
  if (from.clinical_significance() != 0) {
    set_clinical_significance(from.clinical_significance());
  }
}

void VariantAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantAnnotation::CopyFrom(const VariantAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantAnnotation::IsInitialized() const {
  return true;
}

void VariantAnnotation::Swap(VariantAnnotation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantAnnotation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VariantAnnotation::UnsafeArenaSwap(VariantAnnotation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantAnnotation::InternalSwap(VariantAnnotation* other) {
  transcript_ids_.InternalSwap(&other->transcript_ids_);
  conditions_.InternalSwap(&other->conditions_);
  alternate_bases_.Swap(&other->alternate_bases_);
  gene_id_.Swap(&other->gene_id_);
  std::swap(type_, other->type_);
  std::swap(effect_, other->effect_);
  std::swap(clinical_significance_, other->clinical_significance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantAnnotation::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariantAnnotation

// .google.genomics.v1.VariantAnnotation.Type type = 1;
void VariantAnnotation::clear_type() {
  type_ = 0;
}
::google::genomics::v1::VariantAnnotation_Type VariantAnnotation::type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.type)
  return static_cast< ::google::genomics::v1::VariantAnnotation_Type >(type_);
}
void VariantAnnotation::set_type(::google::genomics::v1::VariantAnnotation_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.type)
}

// .google.genomics.v1.VariantAnnotation.Effect effect = 2;
void VariantAnnotation::clear_effect() {
  effect_ = 0;
}
::google::genomics::v1::VariantAnnotation_Effect VariantAnnotation::effect() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.effect)
  return static_cast< ::google::genomics::v1::VariantAnnotation_Effect >(effect_);
}
void VariantAnnotation::set_effect(::google::genomics::v1::VariantAnnotation_Effect value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.effect)
}

// string alternate_bases = 3;
void VariantAnnotation::clear_alternate_bases() {
  alternate_bases_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantAnnotation::alternate_bases() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.alternate_bases)
  return alternate_bases_.Get();
}
void VariantAnnotation::set_alternate_bases(const ::std::string& value) {
  
  alternate_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.alternate_bases)
}
void VariantAnnotation::set_alternate_bases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alternate_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantAnnotation.alternate_bases)
}
void VariantAnnotation::set_alternate_bases(const char* value,
    size_t size) {
  
  alternate_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantAnnotation.alternate_bases)
}
::std::string* VariantAnnotation::mutable_alternate_bases() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.alternate_bases)
  return alternate_bases_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation::release_alternate_bases() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantAnnotation.alternate_bases)
  
  return alternate_bases_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation::unsafe_arena_release_alternate_bases() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantAnnotation.alternate_bases)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return alternate_bases_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantAnnotation::set_allocated_alternate_bases(::std::string* alternate_bases) {
  if (alternate_bases != NULL) {
    
  } else {
    
  }
  alternate_bases_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alternate_bases,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantAnnotation.alternate_bases)
}
void VariantAnnotation::unsafe_arena_set_allocated_alternate_bases(
    ::std::string* alternate_bases) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (alternate_bases != NULL) {
    
  } else {
    
  }
  alternate_bases_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      alternate_bases, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantAnnotation.alternate_bases)
}

// string gene_id = 4;
void VariantAnnotation::clear_gene_id() {
  gene_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantAnnotation::gene_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.gene_id)
  return gene_id_.Get();
}
void VariantAnnotation::set_gene_id(const ::std::string& value) {
  
  gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.gene_id)
}
void VariantAnnotation::set_gene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantAnnotation.gene_id)
}
void VariantAnnotation::set_gene_id(const char* value,
    size_t size) {
  
  gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantAnnotation.gene_id)
}
::std::string* VariantAnnotation::mutable_gene_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.gene_id)
  return gene_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation::release_gene_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantAnnotation.gene_id)
  
  return gene_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantAnnotation::unsafe_arena_release_gene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantAnnotation.gene_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gene_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantAnnotation::set_allocated_gene_id(::std::string* gene_id) {
  if (gene_id != NULL) {
    
  } else {
    
  }
  gene_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gene_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantAnnotation.gene_id)
}
void VariantAnnotation::unsafe_arena_set_allocated_gene_id(
    ::std::string* gene_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gene_id != NULL) {
    
  } else {
    
  }
  gene_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gene_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantAnnotation.gene_id)
}

// repeated string transcript_ids = 5;
int VariantAnnotation::transcript_ids_size() const {
  return transcript_ids_.size();
}
void VariantAnnotation::clear_transcript_ids() {
  transcript_ids_.Clear();
}
const ::std::string& VariantAnnotation::transcript_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.transcript_ids)
  return transcript_ids_.Get(index);
}
::std::string* VariantAnnotation::mutable_transcript_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.transcript_ids)
  return transcript_ids_.Mutable(index);
}
void VariantAnnotation::set_transcript_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.transcript_ids)
  transcript_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VariantAnnotation::set_transcript_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.transcript_ids)
  transcript_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void VariantAnnotation::set_transcript_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  transcript_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantAnnotation.transcript_ids)
}
void VariantAnnotation::set_transcript_ids(int index, const char* value, size_t size) {
  transcript_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantAnnotation.transcript_ids)
}
::std::string* VariantAnnotation::add_transcript_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.VariantAnnotation.transcript_ids)
  return transcript_ids_.Add();
}
void VariantAnnotation::add_transcript_ids(const ::std::string& value) {
  transcript_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantAnnotation.transcript_ids)
}
#if LANG_CXX11
void VariantAnnotation::add_transcript_ids(::std::string&& value) {
  transcript_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantAnnotation.transcript_ids)
}
#endif
void VariantAnnotation::add_transcript_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  transcript_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.VariantAnnotation.transcript_ids)
}
void VariantAnnotation::add_transcript_ids(const char* value, size_t size) {
  transcript_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.VariantAnnotation.transcript_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VariantAnnotation::transcript_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantAnnotation.transcript_ids)
  return transcript_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VariantAnnotation::mutable_transcript_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantAnnotation.transcript_ids)
  return &transcript_ids_;
}

// repeated .google.genomics.v1.VariantAnnotation.ClinicalCondition conditions = 6;
int VariantAnnotation::conditions_size() const {
  return conditions_.size();
}
void VariantAnnotation::clear_conditions() {
  conditions_.Clear();
}
const ::google::genomics::v1::VariantAnnotation_ClinicalCondition& VariantAnnotation::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.conditions)
  return conditions_.Get(index);
}
::google::genomics::v1::VariantAnnotation_ClinicalCondition* VariantAnnotation::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantAnnotation.conditions)
  return conditions_.Mutable(index);
}
::google::genomics::v1::VariantAnnotation_ClinicalCondition* VariantAnnotation::add_conditions() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantAnnotation.conditions)
  return conditions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantAnnotation_ClinicalCondition >*
VariantAnnotation::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantAnnotation.conditions)
  return &conditions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantAnnotation_ClinicalCondition >&
VariantAnnotation::conditions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantAnnotation.conditions)
  return conditions_;
}

// .google.genomics.v1.VariantAnnotation.ClinicalSignificance clinical_significance = 7;
void VariantAnnotation::clear_clinical_significance() {
  clinical_significance_ = 0;
}
::google::genomics::v1::VariantAnnotation_ClinicalSignificance VariantAnnotation::clinical_significance() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantAnnotation.clinical_significance)
  return static_cast< ::google::genomics::v1::VariantAnnotation_ClinicalSignificance >(clinical_significance_);
}
void VariantAnnotation::set_clinical_significance(::google::genomics::v1::VariantAnnotation_ClinicalSignificance value) {
  
  clinical_significance_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantAnnotation.clinical_significance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Transcript_Exon::_slow_mutable_frame() {
  frame_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Int32Value >(
      GetArenaNoVirtual());
}
::google::protobuf::Int32Value* Transcript_Exon::_slow_release_frame() {
  if (frame_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Int32Value* temp = new ::google::protobuf::Int32Value(*frame_);
    frame_ = NULL;
    return temp;
  }
}
::google::protobuf::Int32Value* Transcript_Exon::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Transcript.Exon.frame)
  
  ::google::protobuf::Int32Value* temp = frame_;
  frame_ = NULL;
  return temp;
}
void Transcript_Exon::_slow_set_allocated_frame(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Int32Value** frame) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*frame) == NULL) {
      message_arena->Own(*frame);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*frame)) {
      ::google::protobuf::Int32Value* new_frame = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Int32Value >(
            message_arena);
      new_frame->CopyFrom(**frame);
      *frame = new_frame;
    }
}
void Transcript_Exon::unsafe_arena_set_allocated_frame(
    ::google::protobuf::Int32Value* frame) {
  if (GetArenaNoVirtual() == NULL) {
    delete frame_;
  }
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Transcript.Exon.frame)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transcript_Exon::kStartFieldNumber;
const int Transcript_Exon::kEndFieldNumber;
const int Transcript_Exon::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transcript_Exon::Transcript_Exon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Transcript.Exon)
}
Transcript_Exon::Transcript_Exon(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Transcript.Exon)
}
Transcript_Exon::Transcript_Exon(const Transcript_Exon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame()) {
    frame_ = new ::google::protobuf::Int32Value(*from.frame_);
  } else {
    frame_ = NULL;
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Transcript.Exon)
}

void Transcript_Exon::SharedCtor() {
  ::memset(&frame_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&frame_) + sizeof(end_));
  _cached_size_ = 0;
}

Transcript_Exon::~Transcript_Exon() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Transcript.Exon)
  SharedDtor();
}

void Transcript_Exon::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete frame_;
  }
}

void Transcript_Exon::ArenaDtor(void* object) {
  Transcript_Exon* _this = reinterpret_cast< Transcript_Exon* >(object);
  (void)_this;
}
void Transcript_Exon::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Transcript_Exon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transcript_Exon::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transcript_Exon& Transcript_Exon::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transcript_Exon* Transcript_Exon::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Transcript_Exon>(arena);
}

void Transcript_Exon::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Transcript.Exon)
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) {
    delete frame_;
  }
  frame_ = NULL;
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool Transcript_Exon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Transcript.Exon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Transcript.Exon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Transcript.Exon)
  return false;
#undef DO_
}

void Transcript_Exon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Transcript.Exon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // .google.protobuf.Int32Value frame = 3;
  if (this->has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->frame_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Transcript.Exon)
}

::google::protobuf::uint8* Transcript_Exon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Transcript.Exon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // .google.protobuf.Int32Value frame = 3;
  if (this->has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->frame_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Transcript.Exon)
  return target;
}

size_t Transcript_Exon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Transcript.Exon)
  size_t total_size = 0;

  // .google.protobuf.Int32Value frame = 3;
  if (this->has_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frame_);
  }

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transcript_Exon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Transcript.Exon)
  GOOGLE_DCHECK_NE(&from, this);
  const Transcript_Exon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transcript_Exon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Transcript.Exon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Transcript.Exon)
    MergeFrom(*source);
  }
}

void Transcript_Exon::MergeFrom(const Transcript_Exon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Transcript.Exon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frame()) {
    mutable_frame()->::google::protobuf::Int32Value::MergeFrom(from.frame());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Transcript_Exon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Transcript.Exon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transcript_Exon::CopyFrom(const Transcript_Exon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Transcript.Exon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transcript_Exon::IsInitialized() const {
  return true;
}

void Transcript_Exon::Swap(Transcript_Exon* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Transcript_Exon* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Transcript_Exon::UnsafeArenaSwap(Transcript_Exon* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Transcript_Exon::InternalSwap(Transcript_Exon* other) {
  std::swap(frame_, other->frame_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transcript_Exon::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transcript_Exon

// int64 start = 1;
void Transcript_Exon::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Transcript_Exon::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.Exon.start)
  return start_;
}
void Transcript_Exon::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Transcript.Exon.start)
}

// int64 end = 2;
void Transcript_Exon::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Transcript_Exon::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.Exon.end)
  return end_;
}
void Transcript_Exon::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Transcript.Exon.end)
}

// .google.protobuf.Int32Value frame = 3;
bool Transcript_Exon::has_frame() const {
  return this != internal_default_instance() && frame_ != NULL;
}
void Transcript_Exon::clear_frame() {
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) delete frame_;
  frame_ = NULL;
}
const ::google::protobuf::Int32Value& Transcript_Exon::frame() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.Exon.frame)
  return frame_ != NULL ? *frame_
                         : *::google::protobuf::Int32Value::internal_default_instance();
}
::google::protobuf::Int32Value* Transcript_Exon::mutable_frame() {
  
  if (frame_ == NULL) {
    _slow_mutable_frame();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Transcript.Exon.frame)
  return frame_;
}
::google::protobuf::Int32Value* Transcript_Exon::release_frame() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Transcript.Exon.frame)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_frame();
  } else {
    ::google::protobuf::Int32Value* temp = frame_;
    frame_ = NULL;
    return temp;
  }
}
 void Transcript_Exon::set_allocated_frame(::google::protobuf::Int32Value* frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_;
  }
  if (frame != NULL) {
    _slow_set_allocated_frame(message_arena, &frame);
  }
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Transcript.Exon.frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transcript_CodingSequence::kStartFieldNumber;
const int Transcript_CodingSequence::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transcript_CodingSequence::Transcript_CodingSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Transcript.CodingSequence)
}
Transcript_CodingSequence::Transcript_CodingSequence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Transcript.CodingSequence)
}
Transcript_CodingSequence::Transcript_CodingSequence(const Transcript_CodingSequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Transcript.CodingSequence)
}

void Transcript_CodingSequence::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

Transcript_CodingSequence::~Transcript_CodingSequence() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Transcript.CodingSequence)
  SharedDtor();
}

void Transcript_CodingSequence::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Transcript_CodingSequence::ArenaDtor(void* object) {
  Transcript_CodingSequence* _this = reinterpret_cast< Transcript_CodingSequence* >(object);
  (void)_this;
}
void Transcript_CodingSequence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Transcript_CodingSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transcript_CodingSequence::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transcript_CodingSequence& Transcript_CodingSequence::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transcript_CodingSequence* Transcript_CodingSequence::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Transcript_CodingSequence>(arena);
}

void Transcript_CodingSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Transcript.CodingSequence)
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool Transcript_CodingSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Transcript.CodingSequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Transcript.CodingSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Transcript.CodingSequence)
  return false;
#undef DO_
}

void Transcript_CodingSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Transcript.CodingSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Transcript.CodingSequence)
}

::google::protobuf::uint8* Transcript_CodingSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Transcript.CodingSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Transcript.CodingSequence)
  return target;
}

size_t Transcript_CodingSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Transcript.CodingSequence)
  size_t total_size = 0;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transcript_CodingSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Transcript.CodingSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const Transcript_CodingSequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transcript_CodingSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Transcript.CodingSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Transcript.CodingSequence)
    MergeFrom(*source);
  }
}

void Transcript_CodingSequence::MergeFrom(const Transcript_CodingSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Transcript.CodingSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Transcript_CodingSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Transcript.CodingSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transcript_CodingSequence::CopyFrom(const Transcript_CodingSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Transcript.CodingSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transcript_CodingSequence::IsInitialized() const {
  return true;
}

void Transcript_CodingSequence::Swap(Transcript_CodingSequence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Transcript_CodingSequence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Transcript_CodingSequence::UnsafeArenaSwap(Transcript_CodingSequence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Transcript_CodingSequence::InternalSwap(Transcript_CodingSequence* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transcript_CodingSequence::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transcript_CodingSequence

// int64 start = 1;
void Transcript_CodingSequence::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Transcript_CodingSequence::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.CodingSequence.start)
  return start_;
}
void Transcript_CodingSequence::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Transcript.CodingSequence.start)
}

// int64 end = 2;
void Transcript_CodingSequence::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Transcript_CodingSequence::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.CodingSequence.end)
  return end_;
}
void Transcript_CodingSequence::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Transcript.CodingSequence.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Transcript::_slow_mutable_coding_sequence() {
  coding_sequence_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Transcript_CodingSequence >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Transcript_CodingSequence* Transcript::_slow_release_coding_sequence() {
  if (coding_sequence_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Transcript_CodingSequence* temp = new ::google::genomics::v1::Transcript_CodingSequence(*coding_sequence_);
    coding_sequence_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Transcript_CodingSequence* Transcript::unsafe_arena_release_coding_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Transcript.coding_sequence)
  
  ::google::genomics::v1::Transcript_CodingSequence* temp = coding_sequence_;
  coding_sequence_ = NULL;
  return temp;
}
void Transcript::_slow_set_allocated_coding_sequence(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Transcript_CodingSequence** coding_sequence) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*coding_sequence) == NULL) {
      message_arena->Own(*coding_sequence);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*coding_sequence)) {
      ::google::genomics::v1::Transcript_CodingSequence* new_coding_sequence = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Transcript_CodingSequence >(
            message_arena);
      new_coding_sequence->CopyFrom(**coding_sequence);
      *coding_sequence = new_coding_sequence;
    }
}
void Transcript::unsafe_arena_set_allocated_coding_sequence(
    ::google::genomics::v1::Transcript_CodingSequence* coding_sequence) {
  if (GetArenaNoVirtual() == NULL) {
    delete coding_sequence_;
  }
  coding_sequence_ = coding_sequence;
  if (coding_sequence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Transcript.coding_sequence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transcript::kGeneIdFieldNumber;
const int Transcript::kExonsFieldNumber;
const int Transcript::kCodingSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transcript::Transcript()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Transcript)
}
Transcript::Transcript(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  exons_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Transcript)
}
Transcript::Transcript(const Transcript& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exons_(from.exons_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gene_id().size() > 0) {
    gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gene_id(),
      GetArenaNoVirtual());
  }
  if (from.has_coding_sequence()) {
    coding_sequence_ = new ::google::genomics::v1::Transcript_CodingSequence(*from.coding_sequence_);
  } else {
    coding_sequence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Transcript)
}

void Transcript::SharedCtor() {
  gene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coding_sequence_ = NULL;
  _cached_size_ = 0;
}

Transcript::~Transcript() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Transcript)
  SharedDtor();
}

void Transcript::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  gene_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete coding_sequence_;
  }
}

void Transcript::ArenaDtor(void* object) {
  Transcript* _this = reinterpret_cast< Transcript* >(object);
  (void)_this;
}
void Transcript::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Transcript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transcript::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transcript& Transcript::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transcript* Transcript::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Transcript>(arena);
}

void Transcript::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Transcript)
  exons_.Clear();
  gene_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && coding_sequence_ != NULL) {
    delete coding_sequence_;
  }
  coding_sequence_ = NULL;
}

bool Transcript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Transcript)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gene_id().data(), this->gene_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Transcript.gene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.Transcript.Exon exons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coding_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Transcript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Transcript)
  return false;
#undef DO_
}

void Transcript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Transcript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gene_id = 1;
  if (this->gene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gene_id().data(), this->gene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Transcript.gene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gene_id(), output);
  }

  // repeated .google.genomics.v1.Transcript.Exon exons = 2;
  for (unsigned int i = 0, n = this->exons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exons(i), output);
  }

  // .google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;
  if (this->has_coding_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->coding_sequence_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Transcript)
}

::google::protobuf::uint8* Transcript::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Transcript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gene_id = 1;
  if (this->gene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gene_id().data(), this->gene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Transcript.gene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gene_id(), target);
  }

  // repeated .google.genomics.v1.Transcript.Exon exons = 2;
  for (unsigned int i = 0, n = this->exons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->exons(i), deterministic, target);
  }

  // .google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;
  if (this->has_coding_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->coding_sequence_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Transcript)
  return target;
}

size_t Transcript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Transcript)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Transcript.Exon exons = 2;
  {
    unsigned int count = this->exons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exons(i));
    }
  }

  // string gene_id = 1;
  if (this->gene_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gene_id());
  }

  // .google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;
  if (this->has_coding_sequence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coding_sequence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transcript::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Transcript)
  GOOGLE_DCHECK_NE(&from, this);
  const Transcript* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transcript>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Transcript)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Transcript)
    MergeFrom(*source);
  }
}

void Transcript::MergeFrom(const Transcript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Transcript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exons_.MergeFrom(from.exons_);
  if (from.gene_id().size() > 0) {
    set_gene_id(from.gene_id());
  }
  if (from.has_coding_sequence()) {
    mutable_coding_sequence()->::google::genomics::v1::Transcript_CodingSequence::MergeFrom(from.coding_sequence());
  }
}

void Transcript::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Transcript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transcript::CopyFrom(const Transcript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Transcript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transcript::IsInitialized() const {
  return true;
}

void Transcript::Swap(Transcript* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Transcript* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Transcript::UnsafeArenaSwap(Transcript* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Transcript::InternalSwap(Transcript* other) {
  exons_.InternalSwap(&other->exons_);
  gene_id_.Swap(&other->gene_id_);
  std::swap(coding_sequence_, other->coding_sequence_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transcript::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transcript

// string gene_id = 1;
void Transcript::clear_gene_id() {
  gene_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Transcript::gene_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.gene_id)
  return gene_id_.Get();
}
void Transcript::set_gene_id(const ::std::string& value) {
  
  gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Transcript.gene_id)
}
void Transcript::set_gene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Transcript.gene_id)
}
void Transcript::set_gene_id(const char* value,
    size_t size) {
  
  gene_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Transcript.gene_id)
}
::std::string* Transcript::mutable_gene_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Transcript.gene_id)
  return gene_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Transcript::release_gene_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Transcript.gene_id)
  
  return gene_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Transcript::unsafe_arena_release_gene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Transcript.gene_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gene_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Transcript::set_allocated_gene_id(::std::string* gene_id) {
  if (gene_id != NULL) {
    
  } else {
    
  }
  gene_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gene_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Transcript.gene_id)
}
void Transcript::unsafe_arena_set_allocated_gene_id(
    ::std::string* gene_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gene_id != NULL) {
    
  } else {
    
  }
  gene_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gene_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Transcript.gene_id)
}

// repeated .google.genomics.v1.Transcript.Exon exons = 2;
int Transcript::exons_size() const {
  return exons_.size();
}
void Transcript::clear_exons() {
  exons_.Clear();
}
const ::google::genomics::v1::Transcript_Exon& Transcript::exons(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.exons)
  return exons_.Get(index);
}
::google::genomics::v1::Transcript_Exon* Transcript::mutable_exons(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Transcript.exons)
  return exons_.Mutable(index);
}
::google::genomics::v1::Transcript_Exon* Transcript::add_exons() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.Transcript.exons)
  return exons_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Transcript_Exon >*
Transcript::mutable_exons() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Transcript.exons)
  return &exons_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Transcript_Exon >&
Transcript::exons() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Transcript.exons)
  return exons_;
}

// .google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;
bool Transcript::has_coding_sequence() const {
  return this != internal_default_instance() && coding_sequence_ != NULL;
}
void Transcript::clear_coding_sequence() {
  if (GetArenaNoVirtual() == NULL && coding_sequence_ != NULL) delete coding_sequence_;
  coding_sequence_ = NULL;
}
const ::google::genomics::v1::Transcript_CodingSequence& Transcript::coding_sequence() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Transcript.coding_sequence)
  return coding_sequence_ != NULL ? *coding_sequence_
                         : *::google::genomics::v1::Transcript_CodingSequence::internal_default_instance();
}
::google::genomics::v1::Transcript_CodingSequence* Transcript::mutable_coding_sequence() {
  
  if (coding_sequence_ == NULL) {
    _slow_mutable_coding_sequence();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Transcript.coding_sequence)
  return coding_sequence_;
}
::google::genomics::v1::Transcript_CodingSequence* Transcript::release_coding_sequence() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Transcript.coding_sequence)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_coding_sequence();
  } else {
    ::google::genomics::v1::Transcript_CodingSequence* temp = coding_sequence_;
    coding_sequence_ = NULL;
    return temp;
  }
}
 void Transcript::set_allocated_coding_sequence(::google::genomics::v1::Transcript_CodingSequence* coding_sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coding_sequence_;
  }
  if (coding_sequence != NULL) {
    _slow_set_allocated_coding_sequence(message_arena, &coding_sequence);
  }
  coding_sequence_ = coding_sequence;
  if (coding_sequence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Transcript.coding_sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalId::kSourceNameFieldNumber;
const int ExternalId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalId::ExternalId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ExternalId)
}
ExternalId::ExternalId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ExternalId)
}
ExternalId::ExternalId(const ExternalId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_name().size() > 0) {
    source_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name(),
      GetArenaNoVirtual());
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ExternalId)
}

void ExternalId::SharedCtor() {
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ExternalId::~ExternalId() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ExternalId)
  SharedDtor();
}

void ExternalId::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  source_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ExternalId::ArenaDtor(void* object) {
  ExternalId* _this = reinterpret_cast< ExternalId* >(object);
  (void)_this;
}
void ExternalId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExternalId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalId::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExternalId& ExternalId::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExternalId* ExternalId::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExternalId>(arena);
}

void ExternalId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ExternalId)
  source_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ExternalId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ExternalId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string source_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExternalId.source_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExternalId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ExternalId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ExternalId)
  return false;
#undef DO_
}

void ExternalId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ExternalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExternalId.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_name(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExternalId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ExternalId)
}

::google::protobuf::uint8* ExternalId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ExternalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExternalId.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_name(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExternalId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ExternalId)
  return target;
}

size_t ExternalId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ExternalId)
  size_t total_size = 0;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_name());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ExternalId)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternalId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ExternalId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ExternalId)
    MergeFrom(*source);
  }
}

void ExternalId::MergeFrom(const ExternalId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ExternalId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {
    set_source_name(from.source_name());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
}

void ExternalId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ExternalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalId::CopyFrom(const ExternalId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ExternalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalId::IsInitialized() const {
  return true;
}

void ExternalId::Swap(ExternalId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExternalId* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExternalId::UnsafeArenaSwap(ExternalId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExternalId::InternalSwap(ExternalId* other) {
  source_name_.Swap(&other->source_name_);
  id_.Swap(&other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternalId::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalId

// string source_name = 1;
void ExternalId::clear_source_name() {
  source_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExternalId::source_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExternalId.source_name)
  return source_name_.Get();
}
void ExternalId::set_source_name(const ::std::string& value) {
  
  source_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExternalId.source_name)
}
void ExternalId::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExternalId.source_name)
}
void ExternalId::set_source_name(const char* value,
    size_t size) {
  
  source_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExternalId.source_name)
}
::std::string* ExternalId::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExternalId.source_name)
  return source_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExternalId::release_source_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExternalId.source_name)
  
  return source_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExternalId::unsafe_arena_release_source_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExternalId.source_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExternalId::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExternalId.source_name)
}
void ExternalId::unsafe_arena_set_allocated_source_name(
    ::std::string* source_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExternalId.source_name)
}

// string id = 2;
void ExternalId::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExternalId::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExternalId.id)
  return id_.Get();
}
void ExternalId::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExternalId.id)
}
void ExternalId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExternalId.id)
}
void ExternalId::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExternalId.id)
}
::std::string* ExternalId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExternalId.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExternalId::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExternalId.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExternalId::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExternalId.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExternalId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExternalId.id)
}
void ExternalId::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExternalId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateAnnotationSetRequest::_slow_mutable_annotation_set() {
  annotation_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::AnnotationSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::AnnotationSet* CreateAnnotationSetRequest::_slow_release_annotation_set() {
  if (annotation_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::AnnotationSet* temp = new ::google::genomics::v1::AnnotationSet(*annotation_set_);
    annotation_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::AnnotationSet* CreateAnnotationSetRequest::unsafe_arena_release_annotation_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CreateAnnotationSetRequest.annotation_set)
  
  ::google::genomics::v1::AnnotationSet* temp = annotation_set_;
  annotation_set_ = NULL;
  return temp;
}
void CreateAnnotationSetRequest::_slow_set_allocated_annotation_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::AnnotationSet** annotation_set) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*annotation_set) == NULL) {
      message_arena->Own(*annotation_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*annotation_set)) {
      ::google::genomics::v1::AnnotationSet* new_annotation_set = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::AnnotationSet >(
            message_arena);
      new_annotation_set->CopyFrom(**annotation_set);
      *annotation_set = new_annotation_set;
    }
}
void CreateAnnotationSetRequest::unsafe_arena_set_allocated_annotation_set(
    ::google::genomics::v1::AnnotationSet* annotation_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete annotation_set_;
  }
  annotation_set_ = annotation_set;
  if (annotation_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateAnnotationSetRequest.annotation_set)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAnnotationSetRequest::kAnnotationSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAnnotationSetRequest::CreateAnnotationSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateAnnotationSetRequest)
}
CreateAnnotationSetRequest::CreateAnnotationSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateAnnotationSetRequest)
}
CreateAnnotationSetRequest::CreateAnnotationSetRequest(const CreateAnnotationSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_annotation_set()) {
    annotation_set_ = new ::google::genomics::v1::AnnotationSet(*from.annotation_set_);
  } else {
    annotation_set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateAnnotationSetRequest)
}

void CreateAnnotationSetRequest::SharedCtor() {
  annotation_set_ = NULL;
  _cached_size_ = 0;
}

CreateAnnotationSetRequest::~CreateAnnotationSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateAnnotationSetRequest)
  SharedDtor();
}

void CreateAnnotationSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete annotation_set_;
  }
}

void CreateAnnotationSetRequest::ArenaDtor(void* object) {
  CreateAnnotationSetRequest* _this = reinterpret_cast< CreateAnnotationSetRequest* >(object);
  (void)_this;
}
void CreateAnnotationSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateAnnotationSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAnnotationSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateAnnotationSetRequest& CreateAnnotationSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateAnnotationSetRequest* CreateAnnotationSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateAnnotationSetRequest>(arena);
}

void CreateAnnotationSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateAnnotationSetRequest)
  if (GetArenaNoVirtual() == NULL && annotation_set_ != NULL) {
    delete annotation_set_;
  }
  annotation_set_ = NULL;
}

bool CreateAnnotationSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateAnnotationSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.AnnotationSet annotation_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateAnnotationSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateAnnotationSetRequest)
  return false;
#undef DO_
}

void CreateAnnotationSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.AnnotationSet annotation_set = 1;
  if (this->has_annotation_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->annotation_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateAnnotationSetRequest)
}

::google::protobuf::uint8* CreateAnnotationSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.AnnotationSet annotation_set = 1;
  if (this->has_annotation_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->annotation_set_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateAnnotationSetRequest)
  return target;
}

size_t CreateAnnotationSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateAnnotationSetRequest)
  size_t total_size = 0;

  // .google.genomics.v1.AnnotationSet annotation_set = 1;
  if (this->has_annotation_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->annotation_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAnnotationSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAnnotationSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAnnotationSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateAnnotationSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateAnnotationSetRequest)
    MergeFrom(*source);
  }
}

void CreateAnnotationSetRequest::MergeFrom(const CreateAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_annotation_set()) {
    mutable_annotation_set()->::google::genomics::v1::AnnotationSet::MergeFrom(from.annotation_set());
  }
}

void CreateAnnotationSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAnnotationSetRequest::CopyFrom(const CreateAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAnnotationSetRequest::IsInitialized() const {
  return true;
}

void CreateAnnotationSetRequest::Swap(CreateAnnotationSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateAnnotationSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateAnnotationSetRequest::UnsafeArenaSwap(CreateAnnotationSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateAnnotationSetRequest::InternalSwap(CreateAnnotationSetRequest* other) {
  std::swap(annotation_set_, other->annotation_set_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAnnotationSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAnnotationSetRequest

// .google.genomics.v1.AnnotationSet annotation_set = 1;
bool CreateAnnotationSetRequest::has_annotation_set() const {
  return this != internal_default_instance() && annotation_set_ != NULL;
}
void CreateAnnotationSetRequest::clear_annotation_set() {
  if (GetArenaNoVirtual() == NULL && annotation_set_ != NULL) delete annotation_set_;
  annotation_set_ = NULL;
}
const ::google::genomics::v1::AnnotationSet& CreateAnnotationSetRequest::annotation_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateAnnotationSetRequest.annotation_set)
  return annotation_set_ != NULL ? *annotation_set_
                         : *::google::genomics::v1::AnnotationSet::internal_default_instance();
}
::google::genomics::v1::AnnotationSet* CreateAnnotationSetRequest::mutable_annotation_set() {
  
  if (annotation_set_ == NULL) {
    _slow_mutable_annotation_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateAnnotationSetRequest.annotation_set)
  return annotation_set_;
}
::google::genomics::v1::AnnotationSet* CreateAnnotationSetRequest::release_annotation_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateAnnotationSetRequest.annotation_set)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annotation_set();
  } else {
    ::google::genomics::v1::AnnotationSet* temp = annotation_set_;
    annotation_set_ = NULL;
    return temp;
  }
}
 void CreateAnnotationSetRequest::set_allocated_annotation_set(::google::genomics::v1::AnnotationSet* annotation_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annotation_set_;
  }
  if (annotation_set != NULL) {
    _slow_set_allocated_annotation_set(message_arena, &annotation_set);
  }
  annotation_set_ = annotation_set;
  if (annotation_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateAnnotationSetRequest.annotation_set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAnnotationSetRequest::kAnnotationSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAnnotationSetRequest::GetAnnotationSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetAnnotationSetRequest)
}
GetAnnotationSetRequest::GetAnnotationSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetAnnotationSetRequest)
}
GetAnnotationSetRequest::GetAnnotationSetRequest(const GetAnnotationSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_set_id().size() > 0) {
    annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetAnnotationSetRequest)
}

void GetAnnotationSetRequest::SharedCtor() {
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetAnnotationSetRequest::~GetAnnotationSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetAnnotationSetRequest)
  SharedDtor();
}

void GetAnnotationSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  annotation_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetAnnotationSetRequest::ArenaDtor(void* object) {
  GetAnnotationSetRequest* _this = reinterpret_cast< GetAnnotationSetRequest* >(object);
  (void)_this;
}
void GetAnnotationSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetAnnotationSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAnnotationSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAnnotationSetRequest& GetAnnotationSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAnnotationSetRequest* GetAnnotationSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetAnnotationSetRequest>(arena);
}

void GetAnnotationSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetAnnotationSetRequest)
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetAnnotationSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetAnnotationSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string annotation_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_set_id().data(), this->annotation_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetAnnotationSetRequest.annotation_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetAnnotationSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetAnnotationSetRequest)
  return false;
#undef DO_
}

void GetAnnotationSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetAnnotationSetRequest.annotation_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->annotation_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetAnnotationSetRequest)
}

::google::protobuf::uint8* GetAnnotationSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetAnnotationSetRequest.annotation_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->annotation_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetAnnotationSetRequest)
  return target;
}

size_t GetAnnotationSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetAnnotationSetRequest)
  size_t total_size = 0;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAnnotationSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAnnotationSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAnnotationSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetAnnotationSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetAnnotationSetRequest)
    MergeFrom(*source);
  }
}

void GetAnnotationSetRequest::MergeFrom(const GetAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_set_id().size() > 0) {
    set_annotation_set_id(from.annotation_set_id());
  }
}

void GetAnnotationSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAnnotationSetRequest::CopyFrom(const GetAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationSetRequest::IsInitialized() const {
  return true;
}

void GetAnnotationSetRequest::Swap(GetAnnotationSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetAnnotationSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetAnnotationSetRequest::UnsafeArenaSwap(GetAnnotationSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetAnnotationSetRequest::InternalSwap(GetAnnotationSetRequest* other) {
  annotation_set_id_.Swap(&other->annotation_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAnnotationSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAnnotationSetRequest

// string annotation_set_id = 1;
void GetAnnotationSetRequest::clear_annotation_set_id() {
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetAnnotationSetRequest::annotation_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
  return annotation_set_id_.Get();
}
void GetAnnotationSetRequest::set_annotation_set_id(const ::std::string& value) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
}
void GetAnnotationSetRequest::set_annotation_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
}
void GetAnnotationSetRequest::set_annotation_set_id(const char* value,
    size_t size) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
}
::std::string* GetAnnotationSetRequest::mutable_annotation_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
  return annotation_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetAnnotationSetRequest::release_annotation_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
  
  return annotation_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetAnnotationSetRequest::unsafe_arena_release_annotation_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetAnnotationSetRequest::set_allocated_annotation_set_id(::std::string* annotation_set_id) {
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
}
void GetAnnotationSetRequest::unsafe_arena_set_allocated_annotation_set_id(
    ::std::string* annotation_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetAnnotationSetRequest.annotation_set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateAnnotationSetRequest::_slow_mutable_annotation_set() {
  annotation_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::AnnotationSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::AnnotationSet* UpdateAnnotationSetRequest::_slow_release_annotation_set() {
  if (annotation_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::AnnotationSet* temp = new ::google::genomics::v1::AnnotationSet(*annotation_set_);
    annotation_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::AnnotationSet* UpdateAnnotationSetRequest::unsafe_arena_release_annotation_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set)
  
  ::google::genomics::v1::AnnotationSet* temp = annotation_set_;
  annotation_set_ = NULL;
  return temp;
}
void UpdateAnnotationSetRequest::_slow_set_allocated_annotation_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::AnnotationSet** annotation_set) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*annotation_set) == NULL) {
      message_arena->Own(*annotation_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*annotation_set)) {
      ::google::genomics::v1::AnnotationSet* new_annotation_set = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::AnnotationSet >(
            message_arena);
      new_annotation_set->CopyFrom(**annotation_set);
      *annotation_set = new_annotation_set;
    }
}
void UpdateAnnotationSetRequest::unsafe_arena_set_allocated_annotation_set(
    ::google::genomics::v1::AnnotationSet* annotation_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete annotation_set_;
  }
  annotation_set_ = annotation_set;
  if (annotation_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set)
}
void UpdateAnnotationSetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateAnnotationSetRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateAnnotationSetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateAnnotationSetRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateAnnotationSetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateAnnotationSetRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAnnotationSetRequest::kAnnotationSetIdFieldNumber;
const int UpdateAnnotationSetRequest::kAnnotationSetFieldNumber;
const int UpdateAnnotationSetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAnnotationSetRequest::UpdateAnnotationSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateAnnotationSetRequest)
}
UpdateAnnotationSetRequest::UpdateAnnotationSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateAnnotationSetRequest)
}
UpdateAnnotationSetRequest::UpdateAnnotationSetRequest(const UpdateAnnotationSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_set_id().size() > 0) {
    annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_set_id(),
      GetArenaNoVirtual());
  }
  if (from.has_annotation_set()) {
    annotation_set_ = new ::google::genomics::v1::AnnotationSet(*from.annotation_set_);
  } else {
    annotation_set_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateAnnotationSetRequest)
}

void UpdateAnnotationSetRequest::SharedCtor() {
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_set_, 0, reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&annotation_set_) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateAnnotationSetRequest::~UpdateAnnotationSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateAnnotationSetRequest)
  SharedDtor();
}

void UpdateAnnotationSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  annotation_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete annotation_set_;
  }
  if (this != internal_default_instance()) {
    delete update_mask_;
  }
}

void UpdateAnnotationSetRequest::ArenaDtor(void* object) {
  UpdateAnnotationSetRequest* _this = reinterpret_cast< UpdateAnnotationSetRequest* >(object);
  (void)_this;
}
void UpdateAnnotationSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateAnnotationSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAnnotationSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateAnnotationSetRequest& UpdateAnnotationSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateAnnotationSetRequest* UpdateAnnotationSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateAnnotationSetRequest>(arena);
}

void UpdateAnnotationSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateAnnotationSetRequest)
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && annotation_set_ != NULL) {
    delete annotation_set_;
  }
  annotation_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}

bool UpdateAnnotationSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateAnnotationSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string annotation_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_set_id().data(), this->annotation_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.AnnotationSet annotation_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateAnnotationSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateAnnotationSetRequest)
  return false;
#undef DO_
}

void UpdateAnnotationSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->annotation_set_id(), output);
  }

  // .google.genomics.v1.AnnotationSet annotation_set = 2;
  if (this->has_annotation_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->annotation_set_, output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateAnnotationSetRequest)
}

::google::protobuf::uint8* UpdateAnnotationSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->annotation_set_id(), target);
  }

  // .google.genomics.v1.AnnotationSet annotation_set = 2;
  if (this->has_annotation_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->annotation_set_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_mask_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateAnnotationSetRequest)
  return target;
}

size_t UpdateAnnotationSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateAnnotationSetRequest)
  size_t total_size = 0;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_set_id());
  }

  // .google.genomics.v1.AnnotationSet annotation_set = 2;
  if (this->has_annotation_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->annotation_set_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAnnotationSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAnnotationSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateAnnotationSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateAnnotationSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateAnnotationSetRequest)
    MergeFrom(*source);
  }
}

void UpdateAnnotationSetRequest::MergeFrom(const UpdateAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_set_id().size() > 0) {
    set_annotation_set_id(from.annotation_set_id());
  }
  if (from.has_annotation_set()) {
    mutable_annotation_set()->::google::genomics::v1::AnnotationSet::MergeFrom(from.annotation_set());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateAnnotationSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAnnotationSetRequest::CopyFrom(const UpdateAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAnnotationSetRequest::IsInitialized() const {
  return true;
}

void UpdateAnnotationSetRequest::Swap(UpdateAnnotationSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateAnnotationSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateAnnotationSetRequest::UnsafeArenaSwap(UpdateAnnotationSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateAnnotationSetRequest::InternalSwap(UpdateAnnotationSetRequest* other) {
  annotation_set_id_.Swap(&other->annotation_set_id_);
  std::swap(annotation_set_, other->annotation_set_);
  std::swap(update_mask_, other->update_mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateAnnotationSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateAnnotationSetRequest

// string annotation_set_id = 1;
void UpdateAnnotationSetRequest::clear_annotation_set_id() {
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateAnnotationSetRequest::annotation_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
  return annotation_set_id_.Get();
}
void UpdateAnnotationSetRequest::set_annotation_set_id(const ::std::string& value) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
}
void UpdateAnnotationSetRequest::set_annotation_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
}
void UpdateAnnotationSetRequest::set_annotation_set_id(const char* value,
    size_t size) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
}
::std::string* UpdateAnnotationSetRequest::mutable_annotation_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
  return annotation_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateAnnotationSetRequest::release_annotation_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
  
  return annotation_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateAnnotationSetRequest::unsafe_arena_release_annotation_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateAnnotationSetRequest::set_allocated_annotation_set_id(::std::string* annotation_set_id) {
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
}
void UpdateAnnotationSetRequest::unsafe_arena_set_allocated_annotation_set_id(
    ::std::string* annotation_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set_id)
}

// .google.genomics.v1.AnnotationSet annotation_set = 2;
bool UpdateAnnotationSetRequest::has_annotation_set() const {
  return this != internal_default_instance() && annotation_set_ != NULL;
}
void UpdateAnnotationSetRequest::clear_annotation_set() {
  if (GetArenaNoVirtual() == NULL && annotation_set_ != NULL) delete annotation_set_;
  annotation_set_ = NULL;
}
const ::google::genomics::v1::AnnotationSet& UpdateAnnotationSetRequest::annotation_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set)
  return annotation_set_ != NULL ? *annotation_set_
                         : *::google::genomics::v1::AnnotationSet::internal_default_instance();
}
::google::genomics::v1::AnnotationSet* UpdateAnnotationSetRequest::mutable_annotation_set() {
  
  if (annotation_set_ == NULL) {
    _slow_mutable_annotation_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set)
  return annotation_set_;
}
::google::genomics::v1::AnnotationSet* UpdateAnnotationSetRequest::release_annotation_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annotation_set();
  } else {
    ::google::genomics::v1::AnnotationSet* temp = annotation_set_;
    annotation_set_ = NULL;
    return temp;
  }
}
 void UpdateAnnotationSetRequest::set_allocated_annotation_set(::google::genomics::v1::AnnotationSet* annotation_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annotation_set_;
  }
  if (annotation_set != NULL) {
    _slow_set_allocated_annotation_set(message_arena, &annotation_set);
  }
  annotation_set_ = annotation_set;
  if (annotation_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateAnnotationSetRequest.annotation_set)
}

// .google.protobuf.FieldMask update_mask = 3;
bool UpdateAnnotationSetRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateAnnotationSetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateAnnotationSetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateAnnotationSetRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateAnnotationSetRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateAnnotationSetRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateAnnotationSetRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateAnnotationSetRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateAnnotationSetRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateAnnotationSetRequest.update_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteAnnotationSetRequest::kAnnotationSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteAnnotationSetRequest::DeleteAnnotationSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteAnnotationSetRequest)
}
DeleteAnnotationSetRequest::DeleteAnnotationSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteAnnotationSetRequest)
}
DeleteAnnotationSetRequest::DeleteAnnotationSetRequest(const DeleteAnnotationSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_set_id().size() > 0) {
    annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteAnnotationSetRequest)
}

void DeleteAnnotationSetRequest::SharedCtor() {
  annotation_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteAnnotationSetRequest::~DeleteAnnotationSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteAnnotationSetRequest)
  SharedDtor();
}

void DeleteAnnotationSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  annotation_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteAnnotationSetRequest::ArenaDtor(void* object) {
  DeleteAnnotationSetRequest* _this = reinterpret_cast< DeleteAnnotationSetRequest* >(object);
  (void)_this;
}
void DeleteAnnotationSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteAnnotationSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAnnotationSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteAnnotationSetRequest& DeleteAnnotationSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteAnnotationSetRequest* DeleteAnnotationSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteAnnotationSetRequest>(arena);
}

void DeleteAnnotationSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteAnnotationSetRequest)
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteAnnotationSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteAnnotationSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string annotation_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_set_id().data(), this->annotation_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteAnnotationSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteAnnotationSetRequest)
  return false;
#undef DO_
}

void DeleteAnnotationSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->annotation_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteAnnotationSetRequest)
}

::google::protobuf::uint8* DeleteAnnotationSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteAnnotationSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_id().data(), this->annotation_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->annotation_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteAnnotationSetRequest)
  return target;
}

size_t DeleteAnnotationSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteAnnotationSetRequest)
  size_t total_size = 0;

  // string annotation_set_id = 1;
  if (this->annotation_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAnnotationSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteAnnotationSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteAnnotationSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteAnnotationSetRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationSetRequest::MergeFrom(const DeleteAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteAnnotationSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_set_id().size() > 0) {
    set_annotation_set_id(from.annotation_set_id());
  }
}

void DeleteAnnotationSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationSetRequest::CopyFrom(const DeleteAnnotationSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteAnnotationSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationSetRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationSetRequest::Swap(DeleteAnnotationSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteAnnotationSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteAnnotationSetRequest::UnsafeArenaSwap(DeleteAnnotationSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteAnnotationSetRequest::InternalSwap(DeleteAnnotationSetRequest* other) {
  annotation_set_id_.Swap(&other->annotation_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteAnnotationSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteAnnotationSetRequest

// string annotation_set_id = 1;
void DeleteAnnotationSetRequest::clear_annotation_set_id() {
  annotation_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteAnnotationSetRequest::annotation_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
  return annotation_set_id_.Get();
}
void DeleteAnnotationSetRequest::set_annotation_set_id(const ::std::string& value) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
}
void DeleteAnnotationSetRequest::set_annotation_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
}
void DeleteAnnotationSetRequest::set_annotation_set_id(const char* value,
    size_t size) {
  
  annotation_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
}
::std::string* DeleteAnnotationSetRequest::mutable_annotation_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
  return annotation_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteAnnotationSetRequest::release_annotation_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
  
  return annotation_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteAnnotationSetRequest::unsafe_arena_release_annotation_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteAnnotationSetRequest::set_allocated_annotation_set_id(::std::string* annotation_set_id) {
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
}
void DeleteAnnotationSetRequest::unsafe_arena_set_allocated_annotation_set_id(
    ::std::string* annotation_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_set_id != NULL) {
    
  } else {
    
  }
  annotation_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteAnnotationSetRequest.annotation_set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchAnnotationSetsRequest::kDatasetIdsFieldNumber;
const int SearchAnnotationSetsRequest::kReferenceSetIdFieldNumber;
const int SearchAnnotationSetsRequest::kNameFieldNumber;
const int SearchAnnotationSetsRequest::kTypesFieldNumber;
const int SearchAnnotationSetsRequest::kPageTokenFieldNumber;
const int SearchAnnotationSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchAnnotationSetsRequest::SearchAnnotationSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchAnnotationSetsRequest)
}
SearchAnnotationSetsRequest::SearchAnnotationSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dataset_ids_(arena),
  types_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchAnnotationSetsRequest)
}
SearchAnnotationSetsRequest::SearchAnnotationSetsRequest(const SearchAnnotationSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dataset_ids_(from.dataset_ids_),
      types_(from.types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchAnnotationSetsRequest)
}

void SearchAnnotationSetsRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchAnnotationSetsRequest::~SearchAnnotationSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchAnnotationSetsRequest)
  SharedDtor();
}

void SearchAnnotationSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchAnnotationSetsRequest::ArenaDtor(void* object) {
  SearchAnnotationSetsRequest* _this = reinterpret_cast< SearchAnnotationSetsRequest* >(object);
  (void)_this;
}
void SearchAnnotationSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchAnnotationSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchAnnotationSetsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchAnnotationSetsRequest& SearchAnnotationSetsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchAnnotationSetsRequest* SearchAnnotationSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchAnnotationSetsRequest>(arena);
}

void SearchAnnotationSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchAnnotationSetsRequest)
  dataset_ids_.Clear();
  types_.Clear();
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
}

bool SearchAnnotationSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchAnnotationSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dataset_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dataset_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_ids(this->dataset_ids_size() - 1).data(),
            this->dataset_ids(this->dataset_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_set_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationSetsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.AnnotationType types = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_types(static_cast< ::google::genomics::v1::AnnotationType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_types(static_cast< ::google::genomics::v1::AnnotationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchAnnotationSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchAnnotationSetsRequest)
  return false;
#undef DO_
}

void SearchAnnotationSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchAnnotationSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataset_ids = 1;
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), this->dataset_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataset_ids(i), output);
  }

  // string reference_set_id = 2;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference_set_id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .google.genomics.v1.AnnotationType types = 4;
  if (this->types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_types_cached_byte_size_);
  }
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->types(i), output);
  }

  // string page_token = 5;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->page_token(), output);
  }

  // int32 page_size = 6;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchAnnotationSetsRequest)
}

::google::protobuf::uint8* SearchAnnotationSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchAnnotationSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataset_ids = 1;
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), this->dataset_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dataset_ids(i), target);
  }

  // string reference_set_id = 2;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference_set_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .google.genomics.v1.AnnotationType types = 4;
  if (this->types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _types_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->types_, target);
  }

  // string page_token = 5;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->page_token(), target);
  }

  // int32 page_size = 6;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchAnnotationSetsRequest)
  return target;
}

size_t SearchAnnotationSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchAnnotationSetsRequest)
  size_t total_size = 0;

  // repeated string dataset_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dataset_ids_size());
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dataset_ids(i));
  }

  // repeated .google.genomics.v1.AnnotationType types = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->types_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string reference_set_id = 2;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string page_token = 5;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 6;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchAnnotationSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchAnnotationSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchAnnotationSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchAnnotationSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchAnnotationSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchAnnotationSetsRequest)
    MergeFrom(*source);
  }
}

void SearchAnnotationSetsRequest::MergeFrom(const SearchAnnotationSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchAnnotationSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_ids_.MergeFrom(from.dataset_ids_);
  types_.MergeFrom(from.types_);
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchAnnotationSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchAnnotationSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchAnnotationSetsRequest::CopyFrom(const SearchAnnotationSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchAnnotationSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchAnnotationSetsRequest::IsInitialized() const {
  return true;
}

void SearchAnnotationSetsRequest::Swap(SearchAnnotationSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchAnnotationSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchAnnotationSetsRequest::UnsafeArenaSwap(SearchAnnotationSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchAnnotationSetsRequest::InternalSwap(SearchAnnotationSetsRequest* other) {
  dataset_ids_.InternalSwap(&other->dataset_ids_);
  types_.InternalSwap(&other->types_);
  reference_set_id_.Swap(&other->reference_set_id_);
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchAnnotationSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchAnnotationSetsRequest

// repeated string dataset_ids = 1;
int SearchAnnotationSetsRequest::dataset_ids_size() const {
  return dataset_ids_.size();
}
void SearchAnnotationSetsRequest::clear_dataset_ids() {
  dataset_ids_.Clear();
}
const ::std::string& SearchAnnotationSetsRequest::dataset_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  return dataset_ids_.Get(index);
}
::std::string* SearchAnnotationSetsRequest::mutable_dataset_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  return dataset_ids_.Mutable(index);
}
void SearchAnnotationSetsRequest::set_dataset_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  dataset_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchAnnotationSetsRequest::set_dataset_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  dataset_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchAnnotationSetsRequest::set_dataset_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dataset_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
}
void SearchAnnotationSetsRequest::set_dataset_ids(int index, const char* value, size_t size) {
  dataset_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
}
::std::string* SearchAnnotationSetsRequest::add_dataset_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  return dataset_ids_.Add();
}
void SearchAnnotationSetsRequest::add_dataset_ids(const ::std::string& value) {
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
}
#if LANG_CXX11
void SearchAnnotationSetsRequest::add_dataset_ids(::std::string&& value) {
  dataset_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
}
#endif
void SearchAnnotationSetsRequest::add_dataset_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
}
void SearchAnnotationSetsRequest::add_dataset_ids(const char* value, size_t size) {
  dataset_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchAnnotationSetsRequest::dataset_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  return dataset_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchAnnotationSetsRequest::mutable_dataset_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchAnnotationSetsRequest.dataset_ids)
  return &dataset_ids_;
}

// string reference_set_id = 2;
void SearchAnnotationSetsRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchAnnotationSetsRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
  return reference_set_id_.Get();
}
void SearchAnnotationSetsRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
}
void SearchAnnotationSetsRequest::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
}
void SearchAnnotationSetsRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
}
::std::string* SearchAnnotationSetsRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchAnnotationSetsRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
}
void SearchAnnotationSetsRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationSetsRequest.reference_set_id)
}

// string name = 3;
void SearchAnnotationSetsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchAnnotationSetsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsRequest.name)
  return name_.Get();
}
void SearchAnnotationSetsRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.name)
}
void SearchAnnotationSetsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationSetsRequest.name)
}
void SearchAnnotationSetsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationSetsRequest.name)
}
::std::string* SearchAnnotationSetsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationSetsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationSetsRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationSetsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchAnnotationSetsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationSetsRequest.name)
}
void SearchAnnotationSetsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationSetsRequest.name)
}

// repeated .google.genomics.v1.AnnotationType types = 4;
int SearchAnnotationSetsRequest::types_size() const {
  return types_.size();
}
void SearchAnnotationSetsRequest::clear_types() {
  types_.Clear();
}
::google::genomics::v1::AnnotationType SearchAnnotationSetsRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsRequest.types)
  return static_cast< ::google::genomics::v1::AnnotationType >(types_.Get(index));
}
void SearchAnnotationSetsRequest::set_types(int index, ::google::genomics::v1::AnnotationType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.types)
}
void SearchAnnotationSetsRequest::add_types(::google::genomics::v1::AnnotationType value) {
  types_.Add(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationSetsRequest.types)
}
const ::google::protobuf::RepeatedField<int>&
SearchAnnotationSetsRequest::types() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchAnnotationSetsRequest.types)
  return types_;
}
::google::protobuf::RepeatedField<int>*
SearchAnnotationSetsRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchAnnotationSetsRequest.types)
  return &types_;
}

// string page_token = 5;
void SearchAnnotationSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchAnnotationSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
  return page_token_.Get();
}
void SearchAnnotationSetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
}
void SearchAnnotationSetsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
}
void SearchAnnotationSetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
}
::std::string* SearchAnnotationSetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchAnnotationSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
}
void SearchAnnotationSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationSetsRequest.page_token)
}

// int32 page_size = 6;
void SearchAnnotationSetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchAnnotationSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsRequest.page_size)
  return page_size_;
}
void SearchAnnotationSetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchAnnotationSetsResponse::kAnnotationSetsFieldNumber;
const int SearchAnnotationSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchAnnotationSetsResponse::SearchAnnotationSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchAnnotationSetsResponse)
}
SearchAnnotationSetsResponse::SearchAnnotationSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  annotation_sets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchAnnotationSetsResponse)
}
SearchAnnotationSetsResponse::SearchAnnotationSetsResponse(const SearchAnnotationSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotation_sets_(from.annotation_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchAnnotationSetsResponse)
}

void SearchAnnotationSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchAnnotationSetsResponse::~SearchAnnotationSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchAnnotationSetsResponse)
  SharedDtor();
}

void SearchAnnotationSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchAnnotationSetsResponse::ArenaDtor(void* object) {
  SearchAnnotationSetsResponse* _this = reinterpret_cast< SearchAnnotationSetsResponse* >(object);
  (void)_this;
}
void SearchAnnotationSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchAnnotationSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchAnnotationSetsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchAnnotationSetsResponse& SearchAnnotationSetsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchAnnotationSetsResponse* SearchAnnotationSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchAnnotationSetsResponse>(arena);
}

void SearchAnnotationSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchAnnotationSetsResponse)
  annotation_sets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SearchAnnotationSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchAnnotationSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.AnnotationSet annotation_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotation_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchAnnotationSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchAnnotationSetsResponse)
  return false;
#undef DO_
}

void SearchAnnotationSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchAnnotationSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.AnnotationSet annotation_sets = 1;
  for (unsigned int i = 0, n = this->annotation_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->annotation_sets(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchAnnotationSetsResponse)
}

::google::protobuf::uint8* SearchAnnotationSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchAnnotationSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.AnnotationSet annotation_sets = 1;
  for (unsigned int i = 0, n = this->annotation_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->annotation_sets(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchAnnotationSetsResponse)
  return target;
}

size_t SearchAnnotationSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchAnnotationSetsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.AnnotationSet annotation_sets = 1;
  {
    unsigned int count = this->annotation_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation_sets(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchAnnotationSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchAnnotationSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchAnnotationSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchAnnotationSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchAnnotationSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchAnnotationSetsResponse)
    MergeFrom(*source);
  }
}

void SearchAnnotationSetsResponse::MergeFrom(const SearchAnnotationSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchAnnotationSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_sets_.MergeFrom(from.annotation_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchAnnotationSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchAnnotationSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchAnnotationSetsResponse::CopyFrom(const SearchAnnotationSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchAnnotationSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchAnnotationSetsResponse::IsInitialized() const {
  return true;
}

void SearchAnnotationSetsResponse::Swap(SearchAnnotationSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchAnnotationSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchAnnotationSetsResponse::UnsafeArenaSwap(SearchAnnotationSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchAnnotationSetsResponse::InternalSwap(SearchAnnotationSetsResponse* other) {
  annotation_sets_.InternalSwap(&other->annotation_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchAnnotationSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchAnnotationSetsResponse

// repeated .google.genomics.v1.AnnotationSet annotation_sets = 1;
int SearchAnnotationSetsResponse::annotation_sets_size() const {
  return annotation_sets_.size();
}
void SearchAnnotationSetsResponse::clear_annotation_sets() {
  annotation_sets_.Clear();
}
const ::google::genomics::v1::AnnotationSet& SearchAnnotationSetsResponse::annotation_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsResponse.annotation_sets)
  return annotation_sets_.Get(index);
}
::google::genomics::v1::AnnotationSet* SearchAnnotationSetsResponse::mutable_annotation_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationSetsResponse.annotation_sets)
  return annotation_sets_.Mutable(index);
}
::google::genomics::v1::AnnotationSet* SearchAnnotationSetsResponse::add_annotation_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationSetsResponse.annotation_sets)
  return annotation_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::AnnotationSet >*
SearchAnnotationSetsResponse::mutable_annotation_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchAnnotationSetsResponse.annotation_sets)
  return &annotation_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::AnnotationSet >&
SearchAnnotationSetsResponse::annotation_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchAnnotationSetsResponse.annotation_sets)
  return annotation_sets_;
}

// string next_page_token = 2;
void SearchAnnotationSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchAnnotationSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
  return next_page_token_.Get();
}
void SearchAnnotationSetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
}
void SearchAnnotationSetsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
}
void SearchAnnotationSetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
}
::std::string* SearchAnnotationSetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchAnnotationSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
}
void SearchAnnotationSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationSetsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateAnnotationRequest::_slow_mutable_annotation() {
  annotation_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Annotation >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Annotation* CreateAnnotationRequest::_slow_release_annotation() {
  if (annotation_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Annotation* temp = new ::google::genomics::v1::Annotation(*annotation_);
    annotation_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Annotation* CreateAnnotationRequest::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CreateAnnotationRequest.annotation)
  
  ::google::genomics::v1::Annotation* temp = annotation_;
  annotation_ = NULL;
  return temp;
}
void CreateAnnotationRequest::_slow_set_allocated_annotation(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Annotation** annotation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*annotation) == NULL) {
      message_arena->Own(*annotation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*annotation)) {
      ::google::genomics::v1::Annotation* new_annotation = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Annotation >(
            message_arena);
      new_annotation->CopyFrom(**annotation);
      *annotation = new_annotation;
    }
}
void CreateAnnotationRequest::unsafe_arena_set_allocated_annotation(
    ::google::genomics::v1::Annotation* annotation) {
  if (GetArenaNoVirtual() == NULL) {
    delete annotation_;
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateAnnotationRequest.annotation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAnnotationRequest::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAnnotationRequest::CreateAnnotationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateAnnotationRequest)
}
CreateAnnotationRequest::CreateAnnotationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateAnnotationRequest)
}
CreateAnnotationRequest::CreateAnnotationRequest(const CreateAnnotationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_annotation()) {
    annotation_ = new ::google::genomics::v1::Annotation(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateAnnotationRequest)
}

void CreateAnnotationRequest::SharedCtor() {
  annotation_ = NULL;
  _cached_size_ = 0;
}

CreateAnnotationRequest::~CreateAnnotationRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateAnnotationRequest)
  SharedDtor();
}

void CreateAnnotationRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete annotation_;
  }
}

void CreateAnnotationRequest::ArenaDtor(void* object) {
  CreateAnnotationRequest* _this = reinterpret_cast< CreateAnnotationRequest* >(object);
  (void)_this;
}
void CreateAnnotationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateAnnotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAnnotationRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateAnnotationRequest& CreateAnnotationRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateAnnotationRequest* CreateAnnotationRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateAnnotationRequest>(arena);
}

void CreateAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateAnnotationRequest)
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
}

bool CreateAnnotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateAnnotationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.Annotation annotation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateAnnotationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateAnnotationRequest)
  return false;
#undef DO_
}

void CreateAnnotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Annotation annotation = 1;
  if (this->has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->annotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateAnnotationRequest)
}

::google::protobuf::uint8* CreateAnnotationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Annotation annotation = 1;
  if (this->has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->annotation_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateAnnotationRequest)
  return target;
}

size_t CreateAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateAnnotationRequest)
  size_t total_size = 0;

  // .google.genomics.v1.Annotation annotation = 1;
  if (this->has_annotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->annotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAnnotationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAnnotationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAnnotationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateAnnotationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateAnnotationRequest)
    MergeFrom(*source);
  }
}

void CreateAnnotationRequest::MergeFrom(const CreateAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_annotation()) {
    mutable_annotation()->::google::genomics::v1::Annotation::MergeFrom(from.annotation());
  }
}

void CreateAnnotationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAnnotationRequest::CopyFrom(const CreateAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAnnotationRequest::IsInitialized() const {
  return true;
}

void CreateAnnotationRequest::Swap(CreateAnnotationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateAnnotationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateAnnotationRequest::UnsafeArenaSwap(CreateAnnotationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateAnnotationRequest::InternalSwap(CreateAnnotationRequest* other) {
  std::swap(annotation_, other->annotation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAnnotationRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAnnotationRequest

// .google.genomics.v1.Annotation annotation = 1;
bool CreateAnnotationRequest::has_annotation() const {
  return this != internal_default_instance() && annotation_ != NULL;
}
void CreateAnnotationRequest::clear_annotation() {
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) delete annotation_;
  annotation_ = NULL;
}
const ::google::genomics::v1::Annotation& CreateAnnotationRequest::annotation() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateAnnotationRequest.annotation)
  return annotation_ != NULL ? *annotation_
                         : *::google::genomics::v1::Annotation::internal_default_instance();
}
::google::genomics::v1::Annotation* CreateAnnotationRequest::mutable_annotation() {
  
  if (annotation_ == NULL) {
    _slow_mutable_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateAnnotationRequest.annotation)
  return annotation_;
}
::google::genomics::v1::Annotation* CreateAnnotationRequest::release_annotation() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateAnnotationRequest.annotation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annotation();
  } else {
    ::google::genomics::v1::Annotation* temp = annotation_;
    annotation_ = NULL;
    return temp;
  }
}
 void CreateAnnotationRequest::set_allocated_annotation(::google::genomics::v1::Annotation* annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annotation_;
  }
  if (annotation != NULL) {
    _slow_set_allocated_annotation(message_arena, &annotation);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateAnnotationRequest.annotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchCreateAnnotationsRequest::kAnnotationsFieldNumber;
const int BatchCreateAnnotationsRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchCreateAnnotationsRequest::BatchCreateAnnotationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.BatchCreateAnnotationsRequest)
}
BatchCreateAnnotationsRequest::BatchCreateAnnotationsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  annotations_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.BatchCreateAnnotationsRequest)
}
BatchCreateAnnotationsRequest::BatchCreateAnnotationsRequest(const BatchCreateAnnotationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotations_(from.annotations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.BatchCreateAnnotationsRequest)
}

void BatchCreateAnnotationsRequest::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BatchCreateAnnotationsRequest::~BatchCreateAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.BatchCreateAnnotationsRequest)
  SharedDtor();
}

void BatchCreateAnnotationsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  request_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void BatchCreateAnnotationsRequest::ArenaDtor(void* object) {
  BatchCreateAnnotationsRequest* _this = reinterpret_cast< BatchCreateAnnotationsRequest* >(object);
  (void)_this;
}
void BatchCreateAnnotationsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BatchCreateAnnotationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCreateAnnotationsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchCreateAnnotationsRequest& BatchCreateAnnotationsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchCreateAnnotationsRequest* BatchCreateAnnotationsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BatchCreateAnnotationsRequest>(arena);
}

void BatchCreateAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  annotations_.Clear();
  request_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BatchCreateAnnotationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Annotation annotations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.BatchCreateAnnotationsRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.BatchCreateAnnotationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.BatchCreateAnnotationsRequest)
  return false;
#undef DO_
}

void BatchCreateAnnotationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Annotation annotations = 1;
  for (unsigned int i = 0, n = this->annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->annotations(i), output);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.BatchCreateAnnotationsRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.BatchCreateAnnotationsRequest)
}

::google::protobuf::uint8* BatchCreateAnnotationsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Annotation annotations = 1;
  for (unsigned int i = 0, n = this->annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->annotations(i), deterministic, target);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.BatchCreateAnnotationsRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.BatchCreateAnnotationsRequest)
  return target;
}

size_t BatchCreateAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Annotation annotations = 1;
  {
    unsigned int count = this->annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotations(i));
    }
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCreateAnnotationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchCreateAnnotationsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchCreateAnnotationsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.BatchCreateAnnotationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.BatchCreateAnnotationsRequest)
    MergeFrom(*source);
  }
}

void BatchCreateAnnotationsRequest::MergeFrom(const BatchCreateAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.request_id().size() > 0) {
    set_request_id(from.request_id());
  }
}

void BatchCreateAnnotationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCreateAnnotationsRequest::CopyFrom(const BatchCreateAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.BatchCreateAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCreateAnnotationsRequest::IsInitialized() const {
  return true;
}

void BatchCreateAnnotationsRequest::Swap(BatchCreateAnnotationsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BatchCreateAnnotationsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BatchCreateAnnotationsRequest::UnsafeArenaSwap(BatchCreateAnnotationsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BatchCreateAnnotationsRequest::InternalSwap(BatchCreateAnnotationsRequest* other) {
  annotations_.InternalSwap(&other->annotations_);
  request_id_.Swap(&other->request_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchCreateAnnotationsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchCreateAnnotationsRequest

// repeated .google.genomics.v1.Annotation annotations = 1;
int BatchCreateAnnotationsRequest::annotations_size() const {
  return annotations_.size();
}
void BatchCreateAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
const ::google::genomics::v1::Annotation& BatchCreateAnnotationsRequest::annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.BatchCreateAnnotationsRequest.annotations)
  return annotations_.Get(index);
}
::google::genomics::v1::Annotation* BatchCreateAnnotationsRequest::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.BatchCreateAnnotationsRequest.annotations)
  return annotations_.Mutable(index);
}
::google::genomics::v1::Annotation* BatchCreateAnnotationsRequest::add_annotations() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.BatchCreateAnnotationsRequest.annotations)
  return annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Annotation >*
BatchCreateAnnotationsRequest::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.BatchCreateAnnotationsRequest.annotations)
  return &annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Annotation >&
BatchCreateAnnotationsRequest::annotations() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.BatchCreateAnnotationsRequest.annotations)
  return annotations_;
}

// string request_id = 2;
void BatchCreateAnnotationsRequest::clear_request_id() {
  request_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BatchCreateAnnotationsRequest::request_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
  return request_id_.Get();
}
void BatchCreateAnnotationsRequest::set_request_id(const ::std::string& value) {
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
}
void BatchCreateAnnotationsRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
}
void BatchCreateAnnotationsRequest::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
}
::std::string* BatchCreateAnnotationsRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
  return request_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BatchCreateAnnotationsRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
  
  return request_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BatchCreateAnnotationsRequest::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return request_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BatchCreateAnnotationsRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
}
void BatchCreateAnnotationsRequest::unsafe_arena_set_allocated_request_id(
    ::std::string* request_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.BatchCreateAnnotationsRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BatchCreateAnnotationsResponse_Entry::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::Create< ::google::rpc::Status >(
      GetArenaNoVirtual());
}
::google::rpc::Status* BatchCreateAnnotationsResponse_Entry::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::google::rpc::Status* temp = new ::google::rpc::Status(*status_);
    status_ = NULL;
    return temp;
  }
}
::google::rpc::Status* BatchCreateAnnotationsResponse_Entry::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void BatchCreateAnnotationsResponse_Entry::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.status)
}
void BatchCreateAnnotationsResponse_Entry::_slow_mutable_annotation() {
  annotation_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Annotation >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Annotation* BatchCreateAnnotationsResponse_Entry::_slow_release_annotation() {
  if (annotation_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Annotation* temp = new ::google::genomics::v1::Annotation(*annotation_);
    annotation_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Annotation* BatchCreateAnnotationsResponse_Entry::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.annotation)
  
  ::google::genomics::v1::Annotation* temp = annotation_;
  annotation_ = NULL;
  return temp;
}
void BatchCreateAnnotationsResponse_Entry::_slow_set_allocated_annotation(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Annotation** annotation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*annotation) == NULL) {
      message_arena->Own(*annotation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*annotation)) {
      ::google::genomics::v1::Annotation* new_annotation = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Annotation >(
            message_arena);
      new_annotation->CopyFrom(**annotation);
      *annotation = new_annotation;
    }
}
void BatchCreateAnnotationsResponse_Entry::unsafe_arena_set_allocated_annotation(
    ::google::genomics::v1::Annotation* annotation) {
  if (GetArenaNoVirtual() == NULL) {
    delete annotation_;
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.annotation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchCreateAnnotationsResponse_Entry::kStatusFieldNumber;
const int BatchCreateAnnotationsResponse_Entry::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchCreateAnnotationsResponse_Entry::BatchCreateAnnotationsResponse_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
}
BatchCreateAnnotationsResponse_Entry::BatchCreateAnnotationsResponse_Entry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
}
BatchCreateAnnotationsResponse_Entry::BatchCreateAnnotationsResponse_Entry(const BatchCreateAnnotationsResponse_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_annotation()) {
    annotation_ = new ::google::genomics::v1::Annotation(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
}

void BatchCreateAnnotationsResponse_Entry::SharedCtor() {
  ::memset(&status_, 0, reinterpret_cast<char*>(&annotation_) -
    reinterpret_cast<char*>(&status_) + sizeof(annotation_));
  _cached_size_ = 0;
}

BatchCreateAnnotationsResponse_Entry::~BatchCreateAnnotationsResponse_Entry() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  SharedDtor();
}

void BatchCreateAnnotationsResponse_Entry::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete status_;
  }
  if (this != internal_default_instance()) {
    delete annotation_;
  }
}

void BatchCreateAnnotationsResponse_Entry::ArenaDtor(void* object) {
  BatchCreateAnnotationsResponse_Entry* _this = reinterpret_cast< BatchCreateAnnotationsResponse_Entry* >(object);
  (void)_this;
}
void BatchCreateAnnotationsResponse_Entry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BatchCreateAnnotationsResponse_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCreateAnnotationsResponse_Entry::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchCreateAnnotationsResponse_Entry& BatchCreateAnnotationsResponse_Entry::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchCreateAnnotationsResponse_Entry* BatchCreateAnnotationsResponse_Entry::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BatchCreateAnnotationsResponse_Entry>(arena);
}

void BatchCreateAnnotationsResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
}

bool BatchCreateAnnotationsResponse_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.Annotation annotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  return false;
#undef DO_
}

void BatchCreateAnnotationsResponse_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // .google.genomics.v1.Annotation annotation = 2;
  if (this->has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->annotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
}

::google::protobuf::uint8* BatchCreateAnnotationsResponse_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, deterministic, target);
  }

  // .google.genomics.v1.Annotation annotation = 2;
  if (this->has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->annotation_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  return target;
}

size_t BatchCreateAnnotationsResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  size_t total_size = 0;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // .google.genomics.v1.Annotation annotation = 2;
  if (this->has_annotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->annotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCreateAnnotationsResponse_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchCreateAnnotationsResponse_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchCreateAnnotationsResponse_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
    MergeFrom(*source);
  }
}

void BatchCreateAnnotationsResponse_Entry::MergeFrom(const BatchCreateAnnotationsResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.has_annotation()) {
    mutable_annotation()->::google::genomics::v1::Annotation::MergeFrom(from.annotation());
  }
}

void BatchCreateAnnotationsResponse_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCreateAnnotationsResponse_Entry::CopyFrom(const BatchCreateAnnotationsResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.BatchCreateAnnotationsResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCreateAnnotationsResponse_Entry::IsInitialized() const {
  return true;
}

void BatchCreateAnnotationsResponse_Entry::Swap(BatchCreateAnnotationsResponse_Entry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BatchCreateAnnotationsResponse_Entry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BatchCreateAnnotationsResponse_Entry::UnsafeArenaSwap(BatchCreateAnnotationsResponse_Entry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BatchCreateAnnotationsResponse_Entry::InternalSwap(BatchCreateAnnotationsResponse_Entry* other) {
  std::swap(status_, other->status_);
  std::swap(annotation_, other->annotation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchCreateAnnotationsResponse_Entry::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchCreateAnnotationsResponse_Entry

// .google.rpc.Status status = 1;
bool BatchCreateAnnotationsResponse_Entry::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void BatchCreateAnnotationsResponse_Entry::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::rpc::Status& BatchCreateAnnotationsResponse_Entry::status() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* BatchCreateAnnotationsResponse_Entry::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.status)
  return status_;
}
::google::rpc::Status* BatchCreateAnnotationsResponse_Entry::release_status() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.status)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::google::rpc::Status* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void BatchCreateAnnotationsResponse_Entry::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(status);
    }
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.status)
}

// .google.genomics.v1.Annotation annotation = 2;
bool BatchCreateAnnotationsResponse_Entry::has_annotation() const {
  return this != internal_default_instance() && annotation_ != NULL;
}
void BatchCreateAnnotationsResponse_Entry::clear_annotation() {
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) delete annotation_;
  annotation_ = NULL;
}
const ::google::genomics::v1::Annotation& BatchCreateAnnotationsResponse_Entry::annotation() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.annotation)
  return annotation_ != NULL ? *annotation_
                         : *::google::genomics::v1::Annotation::internal_default_instance();
}
::google::genomics::v1::Annotation* BatchCreateAnnotationsResponse_Entry::mutable_annotation() {
  
  if (annotation_ == NULL) {
    _slow_mutable_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.annotation)
  return annotation_;
}
::google::genomics::v1::Annotation* BatchCreateAnnotationsResponse_Entry::release_annotation() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.annotation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annotation();
  } else {
    ::google::genomics::v1::Annotation* temp = annotation_;
    annotation_ = NULL;
    return temp;
  }
}
 void BatchCreateAnnotationsResponse_Entry::set_allocated_annotation(::google::genomics::v1::Annotation* annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annotation_;
  }
  if (annotation != NULL) {
    _slow_set_allocated_annotation(message_arena, &annotation);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.BatchCreateAnnotationsResponse.Entry.annotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchCreateAnnotationsResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchCreateAnnotationsResponse::BatchCreateAnnotationsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.BatchCreateAnnotationsResponse)
}
BatchCreateAnnotationsResponse::BatchCreateAnnotationsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  entries_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.BatchCreateAnnotationsResponse)
}
BatchCreateAnnotationsResponse::BatchCreateAnnotationsResponse(const BatchCreateAnnotationsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.BatchCreateAnnotationsResponse)
}

void BatchCreateAnnotationsResponse::SharedCtor() {
  _cached_size_ = 0;
}

BatchCreateAnnotationsResponse::~BatchCreateAnnotationsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.BatchCreateAnnotationsResponse)
  SharedDtor();
}

void BatchCreateAnnotationsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void BatchCreateAnnotationsResponse::ArenaDtor(void* object) {
  BatchCreateAnnotationsResponse* _this = reinterpret_cast< BatchCreateAnnotationsResponse* >(object);
  (void)_this;
}
void BatchCreateAnnotationsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BatchCreateAnnotationsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCreateAnnotationsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchCreateAnnotationsResponse& BatchCreateAnnotationsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchCreateAnnotationsResponse* BatchCreateAnnotationsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BatchCreateAnnotationsResponse>(arena);
}

void BatchCreateAnnotationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  entries_.Clear();
}

bool BatchCreateAnnotationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.BatchCreateAnnotationsResponse.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.BatchCreateAnnotationsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.BatchCreateAnnotationsResponse)
  return false;
#undef DO_
}

void BatchCreateAnnotationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.BatchCreateAnnotationsResponse.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.BatchCreateAnnotationsResponse)
}

::google::protobuf::uint8* BatchCreateAnnotationsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.BatchCreateAnnotationsResponse.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.BatchCreateAnnotationsResponse)
  return target;
}

size_t BatchCreateAnnotationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.BatchCreateAnnotationsResponse.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCreateAnnotationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchCreateAnnotationsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchCreateAnnotationsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.BatchCreateAnnotationsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.BatchCreateAnnotationsResponse)
    MergeFrom(*source);
  }
}

void BatchCreateAnnotationsResponse::MergeFrom(const BatchCreateAnnotationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void BatchCreateAnnotationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCreateAnnotationsResponse::CopyFrom(const BatchCreateAnnotationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.BatchCreateAnnotationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCreateAnnotationsResponse::IsInitialized() const {
  return true;
}

void BatchCreateAnnotationsResponse::Swap(BatchCreateAnnotationsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BatchCreateAnnotationsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BatchCreateAnnotationsResponse::UnsafeArenaSwap(BatchCreateAnnotationsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BatchCreateAnnotationsResponse::InternalSwap(BatchCreateAnnotationsResponse* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchCreateAnnotationsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchCreateAnnotationsResponse

// repeated .google.genomics.v1.BatchCreateAnnotationsResponse.Entry entries = 1;
int BatchCreateAnnotationsResponse::entries_size() const {
  return entries_.size();
}
void BatchCreateAnnotationsResponse::clear_entries() {
  entries_.Clear();
}
const ::google::genomics::v1::BatchCreateAnnotationsResponse_Entry& BatchCreateAnnotationsResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.BatchCreateAnnotationsResponse.entries)
  return entries_.Get(index);
}
::google::genomics::v1::BatchCreateAnnotationsResponse_Entry* BatchCreateAnnotationsResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.BatchCreateAnnotationsResponse.entries)
  return entries_.Mutable(index);
}
::google::genomics::v1::BatchCreateAnnotationsResponse_Entry* BatchCreateAnnotationsResponse::add_entries() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.BatchCreateAnnotationsResponse.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::BatchCreateAnnotationsResponse_Entry >*
BatchCreateAnnotationsResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.BatchCreateAnnotationsResponse.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::BatchCreateAnnotationsResponse_Entry >&
BatchCreateAnnotationsResponse::entries() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.BatchCreateAnnotationsResponse.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAnnotationRequest::kAnnotationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAnnotationRequest::GetAnnotationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetAnnotationRequest)
}
GetAnnotationRequest::GetAnnotationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetAnnotationRequest)
}
GetAnnotationRequest::GetAnnotationRequest(const GetAnnotationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_id().size() > 0) {
    annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetAnnotationRequest)
}

void GetAnnotationRequest::SharedCtor() {
  annotation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetAnnotationRequest::~GetAnnotationRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetAnnotationRequest)
  SharedDtor();
}

void GetAnnotationRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  annotation_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetAnnotationRequest::ArenaDtor(void* object) {
  GetAnnotationRequest* _this = reinterpret_cast< GetAnnotationRequest* >(object);
  (void)_this;
}
void GetAnnotationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetAnnotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAnnotationRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAnnotationRequest& GetAnnotationRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAnnotationRequest* GetAnnotationRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetAnnotationRequest>(arena);
}

void GetAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetAnnotationRequest)
  annotation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetAnnotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetAnnotationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string annotation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_id().data(), this->annotation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetAnnotationRequest.annotation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetAnnotationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetAnnotationRequest)
  return false;
#undef DO_
}

void GetAnnotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_id().data(), this->annotation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetAnnotationRequest.annotation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->annotation_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetAnnotationRequest)
}

::google::protobuf::uint8* GetAnnotationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_id().data(), this->annotation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetAnnotationRequest.annotation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->annotation_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetAnnotationRequest)
  return target;
}

size_t GetAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetAnnotationRequest)
  size_t total_size = 0;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAnnotationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAnnotationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAnnotationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetAnnotationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetAnnotationRequest)
    MergeFrom(*source);
  }
}

void GetAnnotationRequest::MergeFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_id().size() > 0) {
    set_annotation_id(from.annotation_id());
  }
}

void GetAnnotationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAnnotationRequest::CopyFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationRequest::IsInitialized() const {
  return true;
}

void GetAnnotationRequest::Swap(GetAnnotationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetAnnotationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetAnnotationRequest::UnsafeArenaSwap(GetAnnotationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetAnnotationRequest::InternalSwap(GetAnnotationRequest* other) {
  annotation_id_.Swap(&other->annotation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAnnotationRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAnnotationRequest

// string annotation_id = 1;
void GetAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetAnnotationRequest.annotation_id)
  return annotation_id_.Get();
}
void GetAnnotationRequest::set_annotation_id(const ::std::string& value) {
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetAnnotationRequest.annotation_id)
}
void GetAnnotationRequest::set_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetAnnotationRequest.annotation_id)
}
void GetAnnotationRequest::set_annotation_id(const char* value,
    size_t size) {
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetAnnotationRequest.annotation_id)
}
::std::string* GetAnnotationRequest::mutable_annotation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetAnnotationRequest.annotation_id)
  return annotation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetAnnotationRequest.annotation_id)
  
  return annotation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetAnnotationRequest::unsafe_arena_release_annotation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetAnnotationRequest.annotation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetAnnotationRequest::set_allocated_annotation_id(::std::string* annotation_id) {
  if (annotation_id != NULL) {
    
  } else {
    
  }
  annotation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetAnnotationRequest.annotation_id)
}
void GetAnnotationRequest::unsafe_arena_set_allocated_annotation_id(
    ::std::string* annotation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_id != NULL) {
    
  } else {
    
  }
  annotation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetAnnotationRequest.annotation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateAnnotationRequest::_slow_mutable_annotation() {
  annotation_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Annotation >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Annotation* UpdateAnnotationRequest::_slow_release_annotation() {
  if (annotation_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Annotation* temp = new ::google::genomics::v1::Annotation(*annotation_);
    annotation_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Annotation* UpdateAnnotationRequest::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateAnnotationRequest.annotation)
  
  ::google::genomics::v1::Annotation* temp = annotation_;
  annotation_ = NULL;
  return temp;
}
void UpdateAnnotationRequest::_slow_set_allocated_annotation(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Annotation** annotation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*annotation) == NULL) {
      message_arena->Own(*annotation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*annotation)) {
      ::google::genomics::v1::Annotation* new_annotation = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Annotation >(
            message_arena);
      new_annotation->CopyFrom(**annotation);
      *annotation = new_annotation;
    }
}
void UpdateAnnotationRequest::unsafe_arena_set_allocated_annotation(
    ::google::genomics::v1::Annotation* annotation) {
  if (GetArenaNoVirtual() == NULL) {
    delete annotation_;
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateAnnotationRequest.annotation)
}
void UpdateAnnotationRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateAnnotationRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateAnnotationRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateAnnotationRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateAnnotationRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateAnnotationRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAnnotationRequest::kAnnotationIdFieldNumber;
const int UpdateAnnotationRequest::kAnnotationFieldNumber;
const int UpdateAnnotationRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAnnotationRequest::UpdateAnnotationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateAnnotationRequest)
}
UpdateAnnotationRequest::UpdateAnnotationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateAnnotationRequest)
}
UpdateAnnotationRequest::UpdateAnnotationRequest(const UpdateAnnotationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_id().size() > 0) {
    annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_id(),
      GetArenaNoVirtual());
  }
  if (from.has_annotation()) {
    annotation_ = new ::google::genomics::v1::Annotation(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateAnnotationRequest)
}

void UpdateAnnotationRequest::SharedCtor() {
  annotation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&annotation_) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateAnnotationRequest::~UpdateAnnotationRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateAnnotationRequest)
  SharedDtor();
}

void UpdateAnnotationRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  annotation_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete annotation_;
  }
  if (this != internal_default_instance()) {
    delete update_mask_;
  }
}

void UpdateAnnotationRequest::ArenaDtor(void* object) {
  UpdateAnnotationRequest* _this = reinterpret_cast< UpdateAnnotationRequest* >(object);
  (void)_this;
}
void UpdateAnnotationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateAnnotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAnnotationRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateAnnotationRequest& UpdateAnnotationRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateAnnotationRequest* UpdateAnnotationRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateAnnotationRequest>(arena);
}

void UpdateAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateAnnotationRequest)
  annotation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}

bool UpdateAnnotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateAnnotationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string annotation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_id().data(), this->annotation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateAnnotationRequest.annotation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.Annotation annotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateAnnotationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateAnnotationRequest)
  return false;
#undef DO_
}

void UpdateAnnotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_id().data(), this->annotation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateAnnotationRequest.annotation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->annotation_id(), output);
  }

  // .google.genomics.v1.Annotation annotation = 2;
  if (this->has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->annotation_, output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateAnnotationRequest)
}

::google::protobuf::uint8* UpdateAnnotationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_id().data(), this->annotation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateAnnotationRequest.annotation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->annotation_id(), target);
  }

  // .google.genomics.v1.Annotation annotation = 2;
  if (this->has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->annotation_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_mask_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateAnnotationRequest)
  return target;
}

size_t UpdateAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateAnnotationRequest)
  size_t total_size = 0;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_id());
  }

  // .google.genomics.v1.Annotation annotation = 2;
  if (this->has_annotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->annotation_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAnnotationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAnnotationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateAnnotationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateAnnotationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateAnnotationRequest)
    MergeFrom(*source);
  }
}

void UpdateAnnotationRequest::MergeFrom(const UpdateAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_id().size() > 0) {
    set_annotation_id(from.annotation_id());
  }
  if (from.has_annotation()) {
    mutable_annotation()->::google::genomics::v1::Annotation::MergeFrom(from.annotation());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateAnnotationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAnnotationRequest::CopyFrom(const UpdateAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAnnotationRequest::IsInitialized() const {
  return true;
}

void UpdateAnnotationRequest::Swap(UpdateAnnotationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateAnnotationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateAnnotationRequest::UnsafeArenaSwap(UpdateAnnotationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateAnnotationRequest::InternalSwap(UpdateAnnotationRequest* other) {
  annotation_id_.Swap(&other->annotation_id_);
  std::swap(annotation_, other->annotation_);
  std::swap(update_mask_, other->update_mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateAnnotationRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateAnnotationRequest

// string annotation_id = 1;
void UpdateAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
  return annotation_id_.Get();
}
void UpdateAnnotationRequest::set_annotation_id(const ::std::string& value) {
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
}
void UpdateAnnotationRequest::set_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
}
void UpdateAnnotationRequest::set_annotation_id(const char* value,
    size_t size) {
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
}
::std::string* UpdateAnnotationRequest::mutable_annotation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
  return annotation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
  
  return annotation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateAnnotationRequest::unsafe_arena_release_annotation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateAnnotationRequest::set_allocated_annotation_id(::std::string* annotation_id) {
  if (annotation_id != NULL) {
    
  } else {
    
  }
  annotation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
}
void UpdateAnnotationRequest::unsafe_arena_set_allocated_annotation_id(
    ::std::string* annotation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_id != NULL) {
    
  } else {
    
  }
  annotation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateAnnotationRequest.annotation_id)
}

// .google.genomics.v1.Annotation annotation = 2;
bool UpdateAnnotationRequest::has_annotation() const {
  return this != internal_default_instance() && annotation_ != NULL;
}
void UpdateAnnotationRequest::clear_annotation() {
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) delete annotation_;
  annotation_ = NULL;
}
const ::google::genomics::v1::Annotation& UpdateAnnotationRequest::annotation() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateAnnotationRequest.annotation)
  return annotation_ != NULL ? *annotation_
                         : *::google::genomics::v1::Annotation::internal_default_instance();
}
::google::genomics::v1::Annotation* UpdateAnnotationRequest::mutable_annotation() {
  
  if (annotation_ == NULL) {
    _slow_mutable_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateAnnotationRequest.annotation)
  return annotation_;
}
::google::genomics::v1::Annotation* UpdateAnnotationRequest::release_annotation() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateAnnotationRequest.annotation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annotation();
  } else {
    ::google::genomics::v1::Annotation* temp = annotation_;
    annotation_ = NULL;
    return temp;
  }
}
 void UpdateAnnotationRequest::set_allocated_annotation(::google::genomics::v1::Annotation* annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annotation_;
  }
  if (annotation != NULL) {
    _slow_set_allocated_annotation(message_arena, &annotation);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateAnnotationRequest.annotation)
}

// .google.protobuf.FieldMask update_mask = 3;
bool UpdateAnnotationRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateAnnotationRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateAnnotationRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateAnnotationRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateAnnotationRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateAnnotationRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateAnnotationRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateAnnotationRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateAnnotationRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateAnnotationRequest.update_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteAnnotationRequest::kAnnotationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteAnnotationRequest::DeleteAnnotationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteAnnotationRequest)
}
DeleteAnnotationRequest::DeleteAnnotationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteAnnotationRequest)
}
DeleteAnnotationRequest::DeleteAnnotationRequest(const DeleteAnnotationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.annotation_id().size() > 0) {
    annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteAnnotationRequest)
}

void DeleteAnnotationRequest::SharedCtor() {
  annotation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteAnnotationRequest::~DeleteAnnotationRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteAnnotationRequest)
  SharedDtor();
}

void DeleteAnnotationRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  annotation_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteAnnotationRequest::ArenaDtor(void* object) {
  DeleteAnnotationRequest* _this = reinterpret_cast< DeleteAnnotationRequest* >(object);
  (void)_this;
}
void DeleteAnnotationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteAnnotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAnnotationRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteAnnotationRequest& DeleteAnnotationRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteAnnotationRequest* DeleteAnnotationRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteAnnotationRequest>(arena);
}

void DeleteAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteAnnotationRequest)
  annotation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteAnnotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteAnnotationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string annotation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_id().data(), this->annotation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteAnnotationRequest.annotation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteAnnotationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteAnnotationRequest)
  return false;
#undef DO_
}

void DeleteAnnotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_id().data(), this->annotation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteAnnotationRequest.annotation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->annotation_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteAnnotationRequest)
}

::google::protobuf::uint8* DeleteAnnotationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteAnnotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_id().data(), this->annotation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteAnnotationRequest.annotation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->annotation_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteAnnotationRequest)
  return target;
}

size_t DeleteAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteAnnotationRequest)
  size_t total_size = 0;

  // string annotation_id = 1;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAnnotationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteAnnotationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteAnnotationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteAnnotationRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationRequest::MergeFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_id().size() > 0) {
    set_annotation_id(from.annotation_id());
  }
}

void DeleteAnnotationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationRequest::CopyFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationRequest::Swap(DeleteAnnotationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteAnnotationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteAnnotationRequest::UnsafeArenaSwap(DeleteAnnotationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteAnnotationRequest::InternalSwap(DeleteAnnotationRequest* other) {
  annotation_id_.Swap(&other->annotation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteAnnotationRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteAnnotationRequest

// string annotation_id = 1;
void DeleteAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
  return annotation_id_.Get();
}
void DeleteAnnotationRequest::set_annotation_id(const ::std::string& value) {
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
}
void DeleteAnnotationRequest::set_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
}
void DeleteAnnotationRequest::set_annotation_id(const char* value,
    size_t size) {
  
  annotation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
}
::std::string* DeleteAnnotationRequest::mutable_annotation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
  return annotation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
  
  return annotation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteAnnotationRequest::unsafe_arena_release_annotation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return annotation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteAnnotationRequest::set_allocated_annotation_id(::std::string* annotation_id) {
  if (annotation_id != NULL) {
    
  } else {
    
  }
  annotation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
}
void DeleteAnnotationRequest::unsafe_arena_set_allocated_annotation_id(
    ::std::string* annotation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (annotation_id != NULL) {
    
  } else {
    
  }
  annotation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      annotation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteAnnotationRequest.annotation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchAnnotationsRequest::kAnnotationSetIdsFieldNumber;
const int SearchAnnotationsRequest::kReferenceIdFieldNumber;
const int SearchAnnotationsRequest::kReferenceNameFieldNumber;
const int SearchAnnotationsRequest::kStartFieldNumber;
const int SearchAnnotationsRequest::kEndFieldNumber;
const int SearchAnnotationsRequest::kPageTokenFieldNumber;
const int SearchAnnotationsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchAnnotationsRequest::SearchAnnotationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchAnnotationsRequest)
}
SearchAnnotationsRequest::SearchAnnotationsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  annotation_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchAnnotationsRequest)
}
SearchAnnotationsRequest::SearchAnnotationsRequest(const SearchAnnotationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotation_set_ids_(from.annotation_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  clear_has_reference();
  switch (from.reference_case()) {
    case kReferenceId: {
      set_reference_id(from.reference_id());
      break;
    }
    case kReferenceName: {
      set_reference_name(from.reference_name());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchAnnotationsRequest)
}

void SearchAnnotationsRequest::SharedCtor() {
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  clear_has_reference();
  _cached_size_ = 0;
}

SearchAnnotationsRequest::~SearchAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchAnnotationsRequest)
  SharedDtor();
}

void SearchAnnotationsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_reference()) {
    clear_reference();
  }
}

void SearchAnnotationsRequest::ArenaDtor(void* object) {
  SearchAnnotationsRequest* _this = reinterpret_cast< SearchAnnotationsRequest* >(object);
  (void)_this;
}
void SearchAnnotationsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchAnnotationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchAnnotationsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchAnnotationsRequest& SearchAnnotationsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchAnnotationsRequest* SearchAnnotationsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchAnnotationsRequest>(arena);
}

void SearchAnnotationsRequest::clear_reference() {
// @@protoc_insertion_point(one_of_clear_start:google.genomics.v1.SearchAnnotationsRequest)
  switch (reference_case()) {
    case kReferenceId: {
      reference_.reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kReferenceName: {
      reference_.reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_NOT_SET;
}


void SearchAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchAnnotationsRequest)
  annotation_set_ids_.Clear();
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  clear_reference();
}

bool SearchAnnotationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchAnnotationsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string annotation_set_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_annotation_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation_set_ids(this->annotation_set_ids_size() - 1).data(),
            this->annotation_set_ids(this->annotation_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), this->reference_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationsRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchAnnotationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchAnnotationsRequest)
  return false;
#undef DO_
}

void SearchAnnotationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchAnnotationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string annotation_set_ids = 1;
  for (int i = 0, n = this->annotation_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_ids(i).data(), this->annotation_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->annotation_set_ids(i), output);
  }

  // string reference_id = 2;
  if (has_reference_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference_id(), output);
  }

  // string reference_name = 3;
  if (has_reference_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_name(), output);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(), output);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(), output);
  }

  // string page_token = 6;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->page_token(), output);
  }

  // int32 page_size = 7;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchAnnotationsRequest)
}

::google::protobuf::uint8* SearchAnnotationsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchAnnotationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string annotation_set_ids = 1;
  for (int i = 0, n = this->annotation_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation_set_ids(i).data(), this->annotation_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->annotation_set_ids(i), target);
  }

  // string reference_id = 2;
  if (has_reference_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference_id(), target);
  }

  // string reference_name = 3;
  if (has_reference_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_name(), target);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start(), target);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end(), target);
  }

  // string page_token = 6;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->page_token(), target);
  }

  // int32 page_size = 7;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchAnnotationsRequest)
  return target;
}

size_t SearchAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchAnnotationsRequest)
  size_t total_size = 0;

  // repeated string annotation_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotation_set_ids_size());
  for (int i = 0, n = this->annotation_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->annotation_set_ids(i));
  }

  // string page_token = 6;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int64 start = 4;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 5;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int32 page_size = 7;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  switch (reference_case()) {
    // string reference_id = 2;
    case kReferenceId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reference_id());
      break;
    }
    // string reference_name = 3;
    case kReferenceName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reference_name());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchAnnotationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchAnnotationsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchAnnotationsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchAnnotationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchAnnotationsRequest)
    MergeFrom(*source);
  }
}

void SearchAnnotationsRequest::MergeFrom(const SearchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_set_ids_.MergeFrom(from.annotation_set_ids_);
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  switch (from.reference_case()) {
    case kReferenceId: {
      set_reference_id(from.reference_id());
      break;
    }
    case kReferenceName: {
      set_reference_name(from.reference_name());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
}

void SearchAnnotationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchAnnotationsRequest::CopyFrom(const SearchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchAnnotationsRequest::IsInitialized() const {
  return true;
}

void SearchAnnotationsRequest::Swap(SearchAnnotationsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchAnnotationsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchAnnotationsRequest::UnsafeArenaSwap(SearchAnnotationsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchAnnotationsRequest::InternalSwap(SearchAnnotationsRequest* other) {
  annotation_set_ids_.InternalSwap(&other->annotation_set_ids_);
  page_token_.Swap(&other->page_token_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(page_size_, other->page_size_);
  std::swap(reference_, other->reference_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchAnnotationsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchAnnotationsRequest

// repeated string annotation_set_ids = 1;
int SearchAnnotationsRequest::annotation_set_ids_size() const {
  return annotation_set_ids_.size();
}
void SearchAnnotationsRequest::clear_annotation_set_ids() {
  annotation_set_ids_.Clear();
}
const ::std::string& SearchAnnotationsRequest::annotation_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  return annotation_set_ids_.Get(index);
}
::std::string* SearchAnnotationsRequest::mutable_annotation_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  return annotation_set_ids_.Mutable(index);
}
void SearchAnnotationsRequest::set_annotation_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  annotation_set_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchAnnotationsRequest::set_annotation_set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  annotation_set_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchAnnotationsRequest::set_annotation_set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  annotation_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
}
void SearchAnnotationsRequest::set_annotation_set_ids(int index, const char* value, size_t size) {
  annotation_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
}
::std::string* SearchAnnotationsRequest::add_annotation_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  return annotation_set_ids_.Add();
}
void SearchAnnotationsRequest::add_annotation_set_ids(const ::std::string& value) {
  annotation_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
}
#if LANG_CXX11
void SearchAnnotationsRequest::add_annotation_set_ids(::std::string&& value) {
  annotation_set_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
}
#endif
void SearchAnnotationsRequest::add_annotation_set_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  annotation_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
}
void SearchAnnotationsRequest::add_annotation_set_ids(const char* value, size_t size) {
  annotation_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchAnnotationsRequest::annotation_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  return annotation_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchAnnotationsRequest::mutable_annotation_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchAnnotationsRequest.annotation_set_ids)
  return &annotation_set_ids_;
}

// string reference_id = 2;
bool SearchAnnotationsRequest::has_reference_id() const {
  return reference_case() == kReferenceId;
}
void SearchAnnotationsRequest::set_has_reference_id() {
  _oneof_case_[0] = kReferenceId;
}
void SearchAnnotationsRequest::clear_reference_id() {
  if (has_reference_id()) {
    reference_.reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_reference();
  }
}
const ::std::string& SearchAnnotationsRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.reference_id)
  if (has_reference_id()) {
    return reference_.reference_id_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void SearchAnnotationsRequest::set_reference_id(const ::std::string& value) {
  if (!has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  reference_.reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.reference_id)
}
void SearchAnnotationsRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  reference_.reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationsRequest.reference_id)
}
void SearchAnnotationsRequest::set_reference_id(const char* value,
                             size_t size) {
  if (!has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  reference_.reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationsRequest.reference_id)
}
::std::string* SearchAnnotationsRequest::mutable_reference_id() {
  if (!has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return reference_.reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationsRequest.reference_id)
}
::std::string* SearchAnnotationsRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationsRequest.reference_id)
  if (has_reference_id()) {
    clear_has_reference();
    return reference_.reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* SearchAnnotationsRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationsRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_reference_id()) {
    clear_has_reference();
    return reference_.reference_id_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void SearchAnnotationsRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (!has_reference_id()) {
    reference_.reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_reference();
  if (reference_id != NULL) {
    set_has_reference_id();
    reference_.reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationsRequest.reference_id)
}
void SearchAnnotationsRequest::unsafe_arena_set_allocated_reference_id(::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_reference_id()) {
    reference_.reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_reference();
  if (reference_id) {
    set_has_reference_id();
    reference_.reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationsRequest.reference_id)
}

// string reference_name = 3;
bool SearchAnnotationsRequest::has_reference_name() const {
  return reference_case() == kReferenceName;
}
void SearchAnnotationsRequest::set_has_reference_name() {
  _oneof_case_[0] = kReferenceName;
}
void SearchAnnotationsRequest::clear_reference_name() {
  if (has_reference_name()) {
    reference_.reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_reference();
  }
}
const ::std::string& SearchAnnotationsRequest::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.reference_name)
  if (has_reference_name()) {
    return reference_.reference_name_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void SearchAnnotationsRequest::set_reference_name(const ::std::string& value) {
  if (!has_reference_name()) {
    clear_reference();
    set_has_reference_name();
    reference_.reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  reference_.reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.reference_name)
}
void SearchAnnotationsRequest::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_reference_name()) {
    clear_reference();
    set_has_reference_name();
    reference_.reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  reference_.reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationsRequest.reference_name)
}
void SearchAnnotationsRequest::set_reference_name(const char* value,
                             size_t size) {
  if (!has_reference_name()) {
    clear_reference();
    set_has_reference_name();
    reference_.reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  reference_.reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationsRequest.reference_name)
}
::std::string* SearchAnnotationsRequest::mutable_reference_name() {
  if (!has_reference_name()) {
    clear_reference();
    set_has_reference_name();
    reference_.reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return reference_.reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationsRequest.reference_name)
}
::std::string* SearchAnnotationsRequest::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationsRequest.reference_name)
  if (has_reference_name()) {
    clear_has_reference();
    return reference_.reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* SearchAnnotationsRequest::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationsRequest.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_reference_name()) {
    clear_has_reference();
    return reference_.reference_name_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void SearchAnnotationsRequest::set_allocated_reference_name(::std::string* reference_name) {
  if (!has_reference_name()) {
    reference_.reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_reference();
  if (reference_name != NULL) {
    set_has_reference_name();
    reference_.reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationsRequest.reference_name)
}
void SearchAnnotationsRequest::unsafe_arena_set_allocated_reference_name(::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_reference_name()) {
    reference_.reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_reference();
  if (reference_name) {
    set_has_reference_name();
    reference_.reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationsRequest.reference_name)
}

// int64 start = 4;
void SearchAnnotationsRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SearchAnnotationsRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.start)
  return start_;
}
void SearchAnnotationsRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.start)
}

// int64 end = 5;
void SearchAnnotationsRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SearchAnnotationsRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.end)
  return end_;
}
void SearchAnnotationsRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.end)
}

// string page_token = 6;
void SearchAnnotationsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchAnnotationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.page_token)
  return page_token_.Get();
}
void SearchAnnotationsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.page_token)
}
void SearchAnnotationsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationsRequest.page_token)
}
void SearchAnnotationsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationsRequest.page_token)
}
::std::string* SearchAnnotationsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchAnnotationsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationsRequest.page_token)
}
void SearchAnnotationsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationsRequest.page_token)
}

// int32 page_size = 7;
void SearchAnnotationsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchAnnotationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsRequest.page_size)
  return page_size_;
}
void SearchAnnotationsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsRequest.page_size)
}

bool SearchAnnotationsRequest::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
void SearchAnnotationsRequest::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
SearchAnnotationsRequest::ReferenceCase SearchAnnotationsRequest::reference_case() const {
  return SearchAnnotationsRequest::ReferenceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchAnnotationsResponse::kAnnotationsFieldNumber;
const int SearchAnnotationsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchAnnotationsResponse::SearchAnnotationsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchAnnotationsResponse)
}
SearchAnnotationsResponse::SearchAnnotationsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  annotations_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchAnnotationsResponse)
}
SearchAnnotationsResponse::SearchAnnotationsResponse(const SearchAnnotationsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotations_(from.annotations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchAnnotationsResponse)
}

void SearchAnnotationsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchAnnotationsResponse::~SearchAnnotationsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchAnnotationsResponse)
  SharedDtor();
}

void SearchAnnotationsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchAnnotationsResponse::ArenaDtor(void* object) {
  SearchAnnotationsResponse* _this = reinterpret_cast< SearchAnnotationsResponse* >(object);
  (void)_this;
}
void SearchAnnotationsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchAnnotationsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchAnnotationsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchAnnotationsResponse& SearchAnnotationsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchAnnotationsResponse* SearchAnnotationsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchAnnotationsResponse>(arena);
}

void SearchAnnotationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchAnnotationsResponse)
  annotations_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SearchAnnotationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchAnnotationsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Annotation annotations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchAnnotationsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchAnnotationsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchAnnotationsResponse)
  return false;
#undef DO_
}

void SearchAnnotationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchAnnotationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Annotation annotations = 1;
  for (unsigned int i = 0, n = this->annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->annotations(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchAnnotationsResponse)
}

::google::protobuf::uint8* SearchAnnotationsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchAnnotationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Annotation annotations = 1;
  for (unsigned int i = 0, n = this->annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->annotations(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchAnnotationsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchAnnotationsResponse)
  return target;
}

size_t SearchAnnotationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchAnnotationsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Annotation annotations = 1;
  {
    unsigned int count = this->annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotations(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchAnnotationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchAnnotationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchAnnotationsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchAnnotationsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchAnnotationsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchAnnotationsResponse)
    MergeFrom(*source);
  }
}

void SearchAnnotationsResponse::MergeFrom(const SearchAnnotationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchAnnotationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchAnnotationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchAnnotationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchAnnotationsResponse::CopyFrom(const SearchAnnotationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchAnnotationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchAnnotationsResponse::IsInitialized() const {
  return true;
}

void SearchAnnotationsResponse::Swap(SearchAnnotationsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchAnnotationsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchAnnotationsResponse::UnsafeArenaSwap(SearchAnnotationsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchAnnotationsResponse::InternalSwap(SearchAnnotationsResponse* other) {
  annotations_.InternalSwap(&other->annotations_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchAnnotationsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fannotations_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchAnnotationsResponse

// repeated .google.genomics.v1.Annotation annotations = 1;
int SearchAnnotationsResponse::annotations_size() const {
  return annotations_.size();
}
void SearchAnnotationsResponse::clear_annotations() {
  annotations_.Clear();
}
const ::google::genomics::v1::Annotation& SearchAnnotationsResponse::annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsResponse.annotations)
  return annotations_.Get(index);
}
::google::genomics::v1::Annotation* SearchAnnotationsResponse::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationsResponse.annotations)
  return annotations_.Mutable(index);
}
::google::genomics::v1::Annotation* SearchAnnotationsResponse::add_annotations() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchAnnotationsResponse.annotations)
  return annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Annotation >*
SearchAnnotationsResponse::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchAnnotationsResponse.annotations)
  return &annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Annotation >&
SearchAnnotationsResponse::annotations() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchAnnotationsResponse.annotations)
  return annotations_;
}

// string next_page_token = 2;
void SearchAnnotationsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchAnnotationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
  return next_page_token_.Get();
}
void SearchAnnotationsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
}
void SearchAnnotationsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
}
void SearchAnnotationsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
}
::std::string* SearchAnnotationsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchAnnotationsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchAnnotationsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
}
void SearchAnnotationsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchAnnotationsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
