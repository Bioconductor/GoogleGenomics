// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/datasets.proto

#ifndef PROTOBUF_google_2fgenomics_2fv1_2fdatasets_2eproto__INCLUDED
#define PROTOBUF_google_2fgenomics_2fv1_2fdatasets_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace genomics {
namespace v1 {
class CreateDatasetRequest;
class CreateDatasetRequestDefaultTypeInternal;
extern CreateDatasetRequestDefaultTypeInternal _CreateDatasetRequest_default_instance_;
class Dataset;
class DatasetDefaultTypeInternal;
extern DatasetDefaultTypeInternal _Dataset_default_instance_;
class DeleteDatasetRequest;
class DeleteDatasetRequestDefaultTypeInternal;
extern DeleteDatasetRequestDefaultTypeInternal _DeleteDatasetRequest_default_instance_;
class GetDatasetRequest;
class GetDatasetRequestDefaultTypeInternal;
extern GetDatasetRequestDefaultTypeInternal _GetDatasetRequest_default_instance_;
class ListDatasetsRequest;
class ListDatasetsRequestDefaultTypeInternal;
extern ListDatasetsRequestDefaultTypeInternal _ListDatasetsRequest_default_instance_;
class ListDatasetsResponse;
class ListDatasetsResponseDefaultTypeInternal;
extern ListDatasetsResponseDefaultTypeInternal _ListDatasetsResponse_default_instance_;
class UndeleteDatasetRequest;
class UndeleteDatasetRequestDefaultTypeInternal;
extern UndeleteDatasetRequestDefaultTypeInternal _UndeleteDatasetRequest_default_instance_;
class UpdateDatasetRequest;
class UpdateDatasetRequestDefaultTypeInternal;
extern UpdateDatasetRequestDefaultTypeInternal _UpdateDatasetRequest_default_instance_;
}  // namespace v1
}  // namespace genomics
namespace iam {
namespace v1 {
class Binding;
class BindingDefaultTypeInternal;
extern BindingDefaultTypeInternal _Binding_default_instance_;
class BindingDelta;
class BindingDeltaDefaultTypeInternal;
extern BindingDeltaDefaultTypeInternal _BindingDelta_default_instance_;
class GetIamPolicyRequest;
class GetIamPolicyRequestDefaultTypeInternal;
extern GetIamPolicyRequestDefaultTypeInternal _GetIamPolicyRequest_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyDelta;
class PolicyDeltaDefaultTypeInternal;
extern PolicyDeltaDefaultTypeInternal _PolicyDelta_default_instance_;
class SetIamPolicyRequest;
class SetIamPolicyRequestDefaultTypeInternal;
extern SetIamPolicyRequestDefaultTypeInternal _SetIamPolicyRequest_default_instance_;
class TestIamPermissionsRequest;
class TestIamPermissionsRequestDefaultTypeInternal;
extern TestIamPermissionsRequestDefaultTypeInternal _TestIamPermissionsRequest_default_instance_;
class TestIamPermissionsResponse;
class TestIamPermissionsResponseDefaultTypeInternal;
extern TestIamPermissionsResponseDefaultTypeInternal _TestIamPermissionsResponse_default_instance_;
}  // namespace v1
}  // namespace iam
namespace protobuf {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FieldMask;
class FieldMaskDefaultTypeInternal;
extern FieldMaskDefaultTypeInternal _FieldMask_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace google {
namespace genomics {
namespace v1 {

namespace protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto

// ===================================================================

class Dataset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.Dataset) */ {
 public:
  Dataset();
  virtual ~Dataset();

  Dataset(const Dataset& from);

  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dataset& default_instance();

  static inline const Dataset* internal_default_instance() {
    return reinterpret_cast<const Dataset*>(
               &_Dataset_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Dataset* other);
  void Swap(Dataset* other);

  // implements Message ----------------------------------------------

  inline Dataset* New() const PROTOBUF_FINAL { return New(NULL); }

  Dataset* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Dataset& from);
  void MergeFrom(const Dataset& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dataset* other);
  protected:
  explicit Dataset(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  ::std::string* unsafe_arena_release_project_id();
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  private:
  void _slow_mutable_create_time();
  void _slow_set_allocated_create_time(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** create_time);
  ::google::protobuf::Timestamp* _slow_release_create_time();
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* mutable_create_time();
  ::google::protobuf::Timestamp* release_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_create_time();
  void unsafe_arena_set_allocated_create_time(
      ::google::protobuf::Timestamp* create_time);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.Dataset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* create_time_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDatasetsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.ListDatasetsRequest) */ {
 public:
  ListDatasetsRequest();
  virtual ~ListDatasetsRequest();

  ListDatasetsRequest(const ListDatasetsRequest& from);

  inline ListDatasetsRequest& operator=(const ListDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDatasetsRequest& default_instance();

  static inline const ListDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatasetsRequest*>(
               &_ListDatasetsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ListDatasetsRequest* other);
  void Swap(ListDatasetsRequest* other);

  // implements Message ----------------------------------------------

  inline ListDatasetsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDatasetsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDatasetsRequest& from);
  void MergeFrom(const ListDatasetsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDatasetsRequest* other);
  protected:
  explicit ListDatasetsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  ::std::string* unsafe_arena_release_project_id();
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.ListDatasetsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDatasetsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.ListDatasetsResponse) */ {
 public:
  ListDatasetsResponse();
  virtual ~ListDatasetsResponse();

  ListDatasetsResponse(const ListDatasetsResponse& from);

  inline ListDatasetsResponse& operator=(const ListDatasetsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDatasetsResponse& default_instance();

  static inline const ListDatasetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatasetsResponse*>(
               &_ListDatasetsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ListDatasetsResponse* other);
  void Swap(ListDatasetsResponse* other);

  // implements Message ----------------------------------------------

  inline ListDatasetsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDatasetsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDatasetsResponse& from);
  void MergeFrom(const ListDatasetsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDatasetsResponse* other);
  protected:
  explicit ListDatasetsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1.Dataset datasets = 1;
  int datasets_size() const;
  void clear_datasets();
  static const int kDatasetsFieldNumber = 1;
  const ::google::genomics::v1::Dataset& datasets(int index) const;
  ::google::genomics::v1::Dataset* mutable_datasets(int index);
  ::google::genomics::v1::Dataset* add_datasets();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset >*
      mutable_datasets();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset >&
      datasets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.ListDatasetsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset > datasets_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateDatasetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.CreateDatasetRequest) */ {
 public:
  CreateDatasetRequest();
  virtual ~CreateDatasetRequest();

  CreateDatasetRequest(const CreateDatasetRequest& from);

  inline CreateDatasetRequest& operator=(const CreateDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDatasetRequest& default_instance();

  static inline const CreateDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatasetRequest*>(
               &_CreateDatasetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(CreateDatasetRequest* other);
  void Swap(CreateDatasetRequest* other);

  // implements Message ----------------------------------------------

  inline CreateDatasetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDatasetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateDatasetRequest& from);
  void MergeFrom(const CreateDatasetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateDatasetRequest* other);
  protected:
  explicit CreateDatasetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.genomics.v1.Dataset dataset = 1;
  bool has_dataset() const;
  void clear_dataset();
  static const int kDatasetFieldNumber = 1;
  private:
  void _slow_mutable_dataset();
  void _slow_set_allocated_dataset(
      ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Dataset** dataset);
  ::google::genomics::v1::Dataset* _slow_release_dataset();
  public:
  const ::google::genomics::v1::Dataset& dataset() const;
  ::google::genomics::v1::Dataset* mutable_dataset();
  ::google::genomics::v1::Dataset* release_dataset();
  void set_allocated_dataset(::google::genomics::v1::Dataset* dataset);
  ::google::genomics::v1::Dataset* unsafe_arena_release_dataset();
  void unsafe_arena_set_allocated_dataset(
      ::google::genomics::v1::Dataset* dataset);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.CreateDatasetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::genomics::v1::Dataset* dataset_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDatasetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.UpdateDatasetRequest) */ {
 public:
  UpdateDatasetRequest();
  virtual ~UpdateDatasetRequest();

  UpdateDatasetRequest(const UpdateDatasetRequest& from);

  inline UpdateDatasetRequest& operator=(const UpdateDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDatasetRequest& default_instance();

  static inline const UpdateDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDatasetRequest*>(
               &_UpdateDatasetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(UpdateDatasetRequest* other);
  void Swap(UpdateDatasetRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateDatasetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDatasetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDatasetRequest& from);
  void MergeFrom(const UpdateDatasetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDatasetRequest* other);
  protected:
  explicit UpdateDatasetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dataset_id = 1;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);
  ::std::string* unsafe_arena_release_dataset_id();
  void unsafe_arena_set_allocated_dataset_id(
      ::std::string* dataset_id);

  // .google.genomics.v1.Dataset dataset = 2;
  bool has_dataset() const;
  void clear_dataset();
  static const int kDatasetFieldNumber = 2;
  private:
  void _slow_mutable_dataset();
  void _slow_set_allocated_dataset(
      ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Dataset** dataset);
  ::google::genomics::v1::Dataset* _slow_release_dataset();
  public:
  const ::google::genomics::v1::Dataset& dataset() const;
  ::google::genomics::v1::Dataset* mutable_dataset();
  ::google::genomics::v1::Dataset* release_dataset();
  void set_allocated_dataset(::google::genomics::v1::Dataset* dataset);
  ::google::genomics::v1::Dataset* unsafe_arena_release_dataset();
  void unsafe_arena_set_allocated_dataset(
      ::google::genomics::v1::Dataset* dataset);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  void _slow_mutable_update_mask();
  ::google::protobuf::FieldMask* _slow_release_update_mask();
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* mutable_update_mask();
  ::google::protobuf::FieldMask* release_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.UpdateDatasetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  ::google::genomics::v1::Dataset* dataset_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteDatasetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.DeleteDatasetRequest) */ {
 public:
  DeleteDatasetRequest();
  virtual ~DeleteDatasetRequest();

  DeleteDatasetRequest(const DeleteDatasetRequest& from);

  inline DeleteDatasetRequest& operator=(const DeleteDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDatasetRequest& default_instance();

  static inline const DeleteDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDatasetRequest*>(
               &_DeleteDatasetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(DeleteDatasetRequest* other);
  void Swap(DeleteDatasetRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteDatasetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteDatasetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteDatasetRequest& from);
  void MergeFrom(const DeleteDatasetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteDatasetRequest* other);
  protected:
  explicit DeleteDatasetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dataset_id = 1;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);
  ::std::string* unsafe_arena_release_dataset_id();
  void unsafe_arena_set_allocated_dataset_id(
      ::std::string* dataset_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.DeleteDatasetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UndeleteDatasetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.UndeleteDatasetRequest) */ {
 public:
  UndeleteDatasetRequest();
  virtual ~UndeleteDatasetRequest();

  UndeleteDatasetRequest(const UndeleteDatasetRequest& from);

  inline UndeleteDatasetRequest& operator=(const UndeleteDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UndeleteDatasetRequest& default_instance();

  static inline const UndeleteDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const UndeleteDatasetRequest*>(
               &_UndeleteDatasetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(UndeleteDatasetRequest* other);
  void Swap(UndeleteDatasetRequest* other);

  // implements Message ----------------------------------------------

  inline UndeleteDatasetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UndeleteDatasetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UndeleteDatasetRequest& from);
  void MergeFrom(const UndeleteDatasetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UndeleteDatasetRequest* other);
  protected:
  explicit UndeleteDatasetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dataset_id = 1;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);
  ::std::string* unsafe_arena_release_dataset_id();
  void unsafe_arena_set_allocated_dataset_id(
      ::std::string* dataset_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.UndeleteDatasetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDatasetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.GetDatasetRequest) */ {
 public:
  GetDatasetRequest();
  virtual ~GetDatasetRequest();

  GetDatasetRequest(const GetDatasetRequest& from);

  inline GetDatasetRequest& operator=(const GetDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatasetRequest& default_instance();

  static inline const GetDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatasetRequest*>(
               &_GetDatasetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(GetDatasetRequest* other);
  void Swap(GetDatasetRequest* other);

  // implements Message ----------------------------------------------

  inline GetDatasetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDatasetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDatasetRequest& from);
  void MergeFrom(const GetDatasetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDatasetRequest* other);
  protected:
  explicit GetDatasetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dataset_id = 1;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);
  ::std::string* unsafe_arena_release_dataset_id();
  void unsafe_arena_set_allocated_dataset_id(
      ::std::string* dataset_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.GetDatasetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2fdatasets_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Dataset

// string id = 1;
inline void Dataset::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Dataset::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.id)
  return id_.Get();
}
inline void Dataset::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Dataset.id)
}
inline void Dataset::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Dataset.id)
}
inline void Dataset::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Dataset.id)
}
inline ::std::string* Dataset::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Dataset::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Dataset::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Dataset::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.id)
}
inline void Dataset::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.id)
}

// string project_id = 2;
inline void Dataset::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Dataset::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.project_id)
  return project_id_.Get();
}
inline void Dataset::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Dataset.project_id)
}
inline void Dataset::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Dataset.project_id)
}
inline void Dataset::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Dataset.project_id)
}
inline ::std::string* Dataset::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Dataset::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Dataset::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Dataset::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.project_id)
}
inline void Dataset::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.project_id)
}

// string name = 3;
inline void Dataset::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Dataset::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.name)
  return name_.Get();
}
inline void Dataset::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Dataset.name)
}
inline void Dataset::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Dataset.name)
}
inline void Dataset::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Dataset.name)
}
inline ::std::string* Dataset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Dataset::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Dataset::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Dataset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.name)
}
inline void Dataset::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.name)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool Dataset::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline void Dataset::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Dataset::create_time() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Dataset::mutable_create_time() {
  
  if (create_time_ == NULL) {
    _slow_mutable_create_time();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.create_time)
  return create_time_;
}
inline ::google::protobuf::Timestamp* Dataset::release_create_time() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.create_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_create_time();
  } else {
    ::google::protobuf::Timestamp* temp = create_time_;
    create_time_ = NULL;
    return temp;
  }
}
inline  void Dataset::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete create_time_;
  }
  if (create_time != NULL) {
    _slow_set_allocated_create_time(message_arena, &create_time);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.create_time)
}

// -------------------------------------------------------------------

// ListDatasetsRequest

// string project_id = 1;
inline void ListDatasetsRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListDatasetsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsRequest.project_id)
  return project_id_.Get();
}
inline void ListDatasetsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsRequest.project_id)
}
inline void ListDatasetsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListDatasetsRequest.project_id)
}
inline void ListDatasetsRequest::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListDatasetsRequest.project_id)
}
inline ::std::string* ListDatasetsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListDatasetsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListDatasetsRequest.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListDatasetsRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListDatasetsRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListDatasetsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListDatasetsRequest.project_id)
}
inline void ListDatasetsRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListDatasetsRequest.project_id)
}

// int32 page_size = 2;
inline void ListDatasetsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListDatasetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsRequest.page_size)
  return page_size_;
}
inline void ListDatasetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsRequest.page_size)
}

// string page_token = 3;
inline void ListDatasetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListDatasetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsRequest.page_token)
  return page_token_.Get();
}
inline void ListDatasetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsRequest.page_token)
}
inline void ListDatasetsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListDatasetsRequest.page_token)
}
inline void ListDatasetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListDatasetsRequest.page_token)
}
inline ::std::string* ListDatasetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListDatasetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListDatasetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListDatasetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListDatasetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListDatasetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListDatasetsRequest.page_token)
}
inline void ListDatasetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListDatasetsRequest.page_token)
}

// -------------------------------------------------------------------

// ListDatasetsResponse

// repeated .google.genomics.v1.Dataset datasets = 1;
inline int ListDatasetsResponse::datasets_size() const {
  return datasets_.size();
}
inline void ListDatasetsResponse::clear_datasets() {
  datasets_.Clear();
}
inline const ::google::genomics::v1::Dataset& ListDatasetsResponse::datasets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_.Get(index);
}
inline ::google::genomics::v1::Dataset* ListDatasetsResponse::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_.Mutable(index);
}
inline ::google::genomics::v1::Dataset* ListDatasetsResponse::add_datasets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset >*
ListDatasetsResponse::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ListDatasetsResponse.datasets)
  return &datasets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset >&
ListDatasetsResponse::datasets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_;
}

// string next_page_token = 2;
inline void ListDatasetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListDatasetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListDatasetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
inline void ListDatasetsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
inline void ListDatasetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
inline ::std::string* ListDatasetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListDatasetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListDatasetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListDatasetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListDatasetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListDatasetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
inline void ListDatasetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListDatasetsResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateDatasetRequest

// .google.genomics.v1.Dataset dataset = 1;
inline bool CreateDatasetRequest::has_dataset() const {
  return this != internal_default_instance() && dataset_ != NULL;
}
inline void CreateDatasetRequest::clear_dataset() {
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}
inline const ::google::genomics::v1::Dataset& CreateDatasetRequest::dataset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateDatasetRequest.dataset)
  return dataset_ != NULL ? *dataset_
                         : *::google::genomics::v1::Dataset::internal_default_instance();
}
inline ::google::genomics::v1::Dataset* CreateDatasetRequest::mutable_dataset() {
  
  if (dataset_ == NULL) {
    _slow_mutable_dataset();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateDatasetRequest.dataset)
  return dataset_;
}
inline ::google::genomics::v1::Dataset* CreateDatasetRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateDatasetRequest.dataset)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dataset();
  } else {
    ::google::genomics::v1::Dataset* temp = dataset_;
    dataset_ = NULL;
    return temp;
  }
}
inline  void CreateDatasetRequest::set_allocated_dataset(::google::genomics::v1::Dataset* dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dataset_;
  }
  if (dataset != NULL) {
    _slow_set_allocated_dataset(message_arena, &dataset);
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateDatasetRequest.dataset)
}

// -------------------------------------------------------------------

// UpdateDatasetRequest

// string dataset_id = 1;
inline void UpdateDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UpdateDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  return dataset_id_.Get();
}
inline void UpdateDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
inline void UpdateDatasetRequest::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
inline void UpdateDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
inline ::std::string* UpdateDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
inline void UpdateDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}

// .google.genomics.v1.Dataset dataset = 2;
inline bool UpdateDatasetRequest::has_dataset() const {
  return this != internal_default_instance() && dataset_ != NULL;
}
inline void UpdateDatasetRequest::clear_dataset() {
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}
inline const ::google::genomics::v1::Dataset& UpdateDatasetRequest::dataset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateDatasetRequest.dataset)
  return dataset_ != NULL ? *dataset_
                         : *::google::genomics::v1::Dataset::internal_default_instance();
}
inline ::google::genomics::v1::Dataset* UpdateDatasetRequest::mutable_dataset() {
  
  if (dataset_ == NULL) {
    _slow_mutable_dataset();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateDatasetRequest.dataset)
  return dataset_;
}
inline ::google::genomics::v1::Dataset* UpdateDatasetRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateDatasetRequest.dataset)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dataset();
  } else {
    ::google::genomics::v1::Dataset* temp = dataset_;
    dataset_ = NULL;
    return temp;
  }
}
inline  void UpdateDatasetRequest::set_allocated_dataset(::google::genomics::v1::Dataset* dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dataset_;
  }
  if (dataset != NULL) {
    _slow_set_allocated_dataset(message_arena, &dataset);
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateDatasetRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline void UpdateDatasetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
inline const ::google::protobuf::FieldMask& UpdateDatasetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateDatasetRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
inline ::google::protobuf::FieldMask* UpdateDatasetRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateDatasetRequest.update_mask)
  return update_mask_;
}
inline ::google::protobuf::FieldMask* UpdateDatasetRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateDatasetRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
inline  void UpdateDatasetRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateDatasetRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteDatasetRequest

// string dataset_id = 1;
inline void DeleteDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  return dataset_id_.Get();
}
inline void DeleteDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
inline void DeleteDatasetRequest::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
inline void DeleteDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
inline ::std::string* DeleteDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
inline void DeleteDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}

// -------------------------------------------------------------------

// UndeleteDatasetRequest

// string dataset_id = 1;
inline void UndeleteDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UndeleteDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  return dataset_id_.Get();
}
inline void UndeleteDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
inline void UndeleteDatasetRequest::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
inline void UndeleteDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
inline ::std::string* UndeleteDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UndeleteDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UndeleteDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UndeleteDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
inline void UndeleteDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}

// -------------------------------------------------------------------

// GetDatasetRequest

// string dataset_id = 1;
inline void GetDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetDatasetRequest.dataset_id)
  return dataset_id_.Get();
}
inline void GetDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetDatasetRequest.dataset_id)
}
inline void GetDatasetRequest::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetDatasetRequest.dataset_id)
}
inline void GetDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetDatasetRequest.dataset_id)
}
inline ::std::string* GetDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetDatasetRequest.dataset_id)
}
inline void GetDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetDatasetRequest.dataset_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fgenomics_2fv1_2fdatasets_2eproto__INCLUDED
