// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/reads.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/reads.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {
class SearchReadGroupSetsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReadGroupSetsRequest> {
} _SearchReadGroupSetsRequest_default_instance_;
class SearchReadGroupSetsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReadGroupSetsResponse> {
} _SearchReadGroupSetsResponse_default_instance_;
class ImportReadGroupSetsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImportReadGroupSetsRequest> {
} _ImportReadGroupSetsRequest_default_instance_;
class ImportReadGroupSetsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImportReadGroupSetsResponse> {
} _ImportReadGroupSetsResponse_default_instance_;
class ExportReadGroupSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExportReadGroupSetRequest> {
} _ExportReadGroupSetRequest_default_instance_;
class UpdateReadGroupSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateReadGroupSetRequest> {
} _UpdateReadGroupSetRequest_default_instance_;
class DeleteReadGroupSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteReadGroupSetRequest> {
} _DeleteReadGroupSetRequest_default_instance_;
class GetReadGroupSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetReadGroupSetRequest> {
} _GetReadGroupSetRequest_default_instance_;
class ListCoverageBucketsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListCoverageBucketsRequest> {
} _ListCoverageBucketsRequest_default_instance_;
class CoverageBucketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CoverageBucket> {
} _CoverageBucket_default_instance_;
class ListCoverageBucketsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListCoverageBucketsResponse> {
} _ListCoverageBucketsResponse_default_instance_;
class SearchReadsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReadsRequest> {
} _SearchReadsRequest_default_instance_;
class SearchReadsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReadsResponse> {
} _SearchReadsResponse_default_instance_;
class StreamReadsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamReadsRequest> {
} _StreamReadsRequest_default_instance_;
class StreamReadsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamReadsResponse> {
} _StreamReadsResponse_default_instance_;

namespace protobuf_google_2fgenomics_2fv1_2freads_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsRequest, dataset_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsResponse, read_group_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadGroupSetsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsRequest, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsRequest, reference_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsRequest, source_uris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsRequest, partition_strategy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportReadGroupSetsResponse, read_group_set_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportReadGroupSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportReadGroupSetRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportReadGroupSetRequest, export_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportReadGroupSetRequest, read_group_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportReadGroupSetRequest, reference_names_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReadGroupSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReadGroupSetRequest, read_group_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReadGroupSetRequest, read_group_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReadGroupSetRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteReadGroupSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteReadGroupSetRequest, read_group_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReadGroupSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReadGroupSetRequest, read_group_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, read_group_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, target_bucket_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageBucket, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageBucket, mean_coverage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsResponse, bucket_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsResponse, coverage_buckets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoverageBucketsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, read_group_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, read_group_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsResponse, alignments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReadsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, read_group_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsRequest, total_shards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamReadsResponse, alignments_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SearchReadGroupSetsRequest)},
  { 9, -1, sizeof(SearchReadGroupSetsResponse)},
  { 16, -1, sizeof(ImportReadGroupSetsRequest)},
  { 25, -1, sizeof(ImportReadGroupSetsResponse)},
  { 31, -1, sizeof(ExportReadGroupSetRequest)},
  { 40, -1, sizeof(UpdateReadGroupSetRequest)},
  { 48, -1, sizeof(DeleteReadGroupSetRequest)},
  { 54, -1, sizeof(GetReadGroupSetRequest)},
  { 60, -1, sizeof(ListCoverageBucketsRequest)},
  { 72, -1, sizeof(CoverageBucket)},
  { 79, -1, sizeof(ListCoverageBucketsResponse)},
  { 87, -1, sizeof(SearchReadsRequest)},
  { 99, -1, sizeof(SearchReadsResponse)},
  { 106, -1, sizeof(StreamReadsRequest)},
  { 118, -1, sizeof(StreamReadsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReadGroupSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReadGroupSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportReadGroupSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportReadGroupSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExportReadGroupSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateReadGroupSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteReadGroupSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetReadGroupSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListCoverageBucketsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoverageBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListCoverageBucketsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReadsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReadsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamReadsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamReadsResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/genomics/v1/reads.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _SearchReadGroupSetsRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SearchReadGroupSetsResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ImportReadGroupSetsRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ImportReadGroupSetsResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ExportReadGroupSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _UpdateReadGroupSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DeleteReadGroupSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetReadGroupSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ListCoverageBucketsRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CoverageBucket_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ListCoverageBucketsResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SearchReadsRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SearchReadsResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _StreamReadsRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _StreamReadsResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::genomics::v1::protobuf_google_2fgenomics_2fv1_2frange_2eproto::InitDefaults();
  ::google::genomics::v1::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaults();
  ::google::genomics::v1::protobuf_google_2fgenomics_2fv1_2freadgroupset_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaults();
  _SearchReadGroupSetsRequest_default_instance_.DefaultConstruct();
  _SearchReadGroupSetsResponse_default_instance_.DefaultConstruct();
  _ImportReadGroupSetsRequest_default_instance_.DefaultConstruct();
  _ImportReadGroupSetsResponse_default_instance_.DefaultConstruct();
  _ExportReadGroupSetRequest_default_instance_.DefaultConstruct();
  _UpdateReadGroupSetRequest_default_instance_.DefaultConstruct();
  _DeleteReadGroupSetRequest_default_instance_.DefaultConstruct();
  _GetReadGroupSetRequest_default_instance_.DefaultConstruct();
  _ListCoverageBucketsRequest_default_instance_.DefaultConstruct();
  _CoverageBucket_default_instance_.DefaultConstruct();
  _ListCoverageBucketsResponse_default_instance_.DefaultConstruct();
  _SearchReadsRequest_default_instance_.DefaultConstruct();
  _SearchReadsResponse_default_instance_.DefaultConstruct();
  _StreamReadsRequest_default_instance_.DefaultConstruct();
  _StreamReadsResponse_default_instance_.DefaultConstruct();
  _UpdateReadGroupSetRequest_default_instance_.get_mutable()->read_group_set_ = const_cast< ::google::genomics::v1::ReadGroupSet*>(
      ::google::genomics::v1::ReadGroupSet::internal_default_instance());
  _UpdateReadGroupSetRequest_default_instance_.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
  _CoverageBucket_default_instance_.get_mutable()->range_ = const_cast< ::google::genomics::v1::Range*>(
      ::google::genomics::v1::Range::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\036google/genomics/v1/reads.proto\022\022google"
      ".genomics.v1\032\034google/api/annotations.pro"
      "to\032\036google/genomics/v1/range.proto\032&goog"
      "le/genomics/v1/readalignment.proto\032%goog"
      "le/genomics/v1/readgroupset.proto\032#googl"
      "e/longrunning/operations.proto\032\033google/p"
      "rotobuf/empty.proto\032 google/protobuf/fie"
      "ld_mask.proto\"f\n\032SearchReadGroupSetsRequ"
      "est\022\023\n\013dataset_ids\030\001 \003(\t\022\014\n\004name\030\003 \001(\t\022\022"
      "\n\npage_token\030\002 \001(\t\022\021\n\tpage_size\030\004 \001(\005\"q\n"
      "\033SearchReadGroupSetsResponse\0229\n\017read_gro"
      "up_sets\030\001 \003(\0132 .google.genomics.v1.ReadG"
      "roupSet\022\027\n\017next_page_token\030\002 \001(\t\"\236\002\n\032Imp"
      "ortReadGroupSetsRequest\022\022\n\ndataset_id\030\001 "
      "\001(\t\022\030\n\020reference_set_id\030\004 \001(\t\022\023\n\013source_"
      "uris\030\002 \003(\t\022\\\n\022partition_strategy\030\005 \001(\0162@"
      ".google.genomics.v1.ImportReadGroupSetsR"
      "equest.PartitionStrategy\"_\n\021PartitionStr"
      "ategy\022\"\n\036PARTITION_STRATEGY_UNSPECIFIED\020"
      "\000\022\027\n\023PER_FILE_PER_SAMPLE\020\001\022\r\n\tMERGE_ALL\020"
      "\002\"9\n\033ImportReadGroupSetsResponse\022\032\n\022read"
      "_group_set_ids\030\001 \003(\t\"w\n\031ExportReadGroupS"
      "etRequest\022\022\n\nproject_id\030\001 \001(\t\022\022\n\nexport_"
      "uri\030\002 \001(\t\022\031\n\021read_group_set_id\030\003 \001(\t\022\027\n\017"
      "reference_names\030\004 \003(\t\"\241\001\n\031UpdateReadGrou"
      "pSetRequest\022\031\n\021read_group_set_id\030\001 \001(\t\0228"
      "\n\016read_group_set\030\002 \001(\0132 .google.genomics"
      ".v1.ReadGroupSet\022/\n\013update_mask\030\003 \001(\0132\032."
      "google.protobuf.FieldMask\"6\n\031DeleteReadG"
      "roupSetRequest\022\031\n\021read_group_set_id\030\001 \001("
      "\t\"3\n\026GetReadGroupSetRequest\022\031\n\021read_grou"
      "p_set_id\030\001 \001(\t\"\257\001\n\032ListCoverageBucketsRe"
      "quest\022\031\n\021read_group_set_id\030\001 \001(\t\022\026\n\016refe"
      "rence_name\030\003 \001(\t\022\r\n\005start\030\004 \001(\003\022\013\n\003end\030\005"
      " \001(\003\022\033\n\023target_bucket_width\030\006 \001(\003\022\022\n\npag"
      "e_token\030\007 \001(\t\022\021\n\tpage_size\030\010 \001(\005\"Q\n\016Cove"
      "rageBucket\022(\n\005range\030\001 \001(\0132\031.google.genom"
      "ics.v1.Range\022\025\n\rmean_coverage\030\002 \001(\002\"\212\001\n\033"
      "ListCoverageBucketsResponse\022\024\n\014bucket_wi"
      "dth\030\001 \001(\003\022<\n\020coverage_buckets\030\002 \003(\0132\".go"
      "ogle.genomics.v1.CoverageBucket\022\027\n\017next_"
      "page_token\030\003 \001(\t\"\243\001\n\022SearchReadsRequest\022"
      "\032\n\022read_group_set_ids\030\001 \003(\t\022\026\n\016read_grou"
      "p_ids\030\005 \003(\t\022\026\n\016reference_name\030\007 \001(\t\022\r\n\005s"
      "tart\030\010 \001(\003\022\013\n\003end\030\t \001(\003\022\022\n\npage_token\030\003 "
      "\001(\t\022\021\n\tpage_size\030\004 \001(\005\"\\\n\023SearchReadsRes"
      "ponse\022,\n\nalignments\030\001 \003(\0132\030.google.genom"
      "ics.v1.Read\022\027\n\017next_page_token\030\002 \001(\t\"\234\001\n"
      "\022StreamReadsRequest\022\022\n\nproject_id\030\001 \001(\t\022"
      "\031\n\021read_group_set_id\030\002 \001(\t\022\026\n\016reference_"
      "name\030\003 \001(\t\022\r\n\005start\030\004 \001(\003\022\013\n\003end\030\005 \001(\003\022\r"
      "\n\005shard\030\006 \001(\005\022\024\n\014total_shards\030\007 \001(\005\"C\n\023S"
      "treamReadsResponse\022,\n\nalignments\030\001 \003(\0132\030"
      ".google.genomics.v1.Read2\225\001\n\024StreamingRe"
      "adService\022}\n\013StreamReads\022&.google.genomi"
      "cs.v1.StreamReadsRequest\032\'.google.genomi"
      "cs.v1.StreamReadsResponse\"\033\202\323\344\223\002\025\"\020/v1/r"
      "eads:stream:\001*0\0012\321\t\n\rReadServiceV1\022\211\001\n\023I"
      "mportReadGroupSets\022..google.genomics.v1."
      "ImportReadGroupSetsRequest\032\035.google.long"
      "running.Operation\"#\202\323\344\223\002\035\"\030/v1/readgroup"
      "sets:import:\001*\022\233\001\n\022ExportReadGroupSet\022-."
      "google.genomics.v1.ExportReadGroupSetReq"
      "uest\032\035.google.longrunning.Operation\"7\202\323\344"
      "\223\0021\",/v1/readgroupsets/{read_group_set_i"
      "d}:export:\001*\022\233\001\n\023SearchReadGroupSets\022..g"
      "oogle.genomics.v1.SearchReadGroupSetsReq"
      "uest\032/.google.genomics.v1.SearchReadGrou"
      "pSetsResponse\"#\202\323\344\223\002\035\"\030/v1/readgroupsets"
      "/search:\001*\022\244\001\n\022UpdateReadGroupSet\022-.goog"
      "le.genomics.v1.UpdateReadGroupSetRequest"
      "\032 .google.genomics.v1.ReadGroupSet\"=\202\323\344\223"
      "\00272%/v1/readgroupsets/{read_group_set_id"
      "}:\016read_group_set\022\212\001\n\022DeleteReadGroupSet"
      "\022-.google.genomics.v1.DeleteReadGroupSet"
      "Request\032\026.google.protobuf.Empty\"-\202\323\344\223\002\'*"
      "%/v1/readgroupsets/{read_group_set_id}\022\216"
      "\001\n\017GetReadGroupSet\022*.google.genomics.v1."
      "GetReadGroupSetRequest\032 .google.genomics"
      ".v1.ReadGroupSet\"-\202\323\344\223\002\'\022%/v1/readgroups"
      "ets/{read_group_set_id}\022\265\001\n\023ListCoverage"
      "Buckets\022..google.genomics.v1.ListCoverag"
      "eBucketsRequest\032/.google.genomics.v1.Lis"
      "tCoverageBucketsResponse\"=\202\323\344\223\0027\0225/v1/re"
      "adgroupsets/{read_group_set_id}/coverage"
      "buckets\022{\n\013SearchReads\022&.google.genomics"
      ".v1.SearchReadsRequest\032\'.google.genomics"
      ".v1.SearchReadsResponse\"\033\202\323\344\223\002\025\"\020/v1/rea"
      "ds/search:\001*Be\n\026com.google.genomics.v1B\n"
      "ReadsProtoP\001Z:google.golang.org/genproto"
      "/googleapis/genomics/v1;genomics\370\001\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3643);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/reads.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::genomics::v1::protobuf_google_2fgenomics_2fv1_2frange_2eproto::AddDescriptors();
  ::google::genomics::v1::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::AddDescriptors();
  ::google::genomics::v1::protobuf_google_2fgenomics_2fv1_2freadgroupset_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fgenomics_2fv1_2freads_2eproto

const ::google::protobuf::EnumDescriptor* ImportReadGroupSetsRequest_PartitionStrategy_descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_enum_descriptors[0];
}
bool ImportReadGroupSetsRequest_PartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImportReadGroupSetsRequest_PartitionStrategy ImportReadGroupSetsRequest::PARTITION_STRATEGY_UNSPECIFIED;
const ImportReadGroupSetsRequest_PartitionStrategy ImportReadGroupSetsRequest::PER_FILE_PER_SAMPLE;
const ImportReadGroupSetsRequest_PartitionStrategy ImportReadGroupSetsRequest::MERGE_ALL;
const ImportReadGroupSetsRequest_PartitionStrategy ImportReadGroupSetsRequest::PartitionStrategy_MIN;
const ImportReadGroupSetsRequest_PartitionStrategy ImportReadGroupSetsRequest::PartitionStrategy_MAX;
const int ImportReadGroupSetsRequest::PartitionStrategy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReadGroupSetsRequest::kDatasetIdsFieldNumber;
const int SearchReadGroupSetsRequest::kNameFieldNumber;
const int SearchReadGroupSetsRequest::kPageTokenFieldNumber;
const int SearchReadGroupSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReadGroupSetsRequest::SearchReadGroupSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReadGroupSetsRequest)
}
SearchReadGroupSetsRequest::SearchReadGroupSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dataset_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReadGroupSetsRequest)
}
SearchReadGroupSetsRequest::SearchReadGroupSetsRequest(const SearchReadGroupSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dataset_ids_(from.dataset_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReadGroupSetsRequest)
}

void SearchReadGroupSetsRequest::SharedCtor() {
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReadGroupSetsRequest::~SearchReadGroupSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReadGroupSetsRequest)
  SharedDtor();
}

void SearchReadGroupSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReadGroupSetsRequest::ArenaDtor(void* object) {
  SearchReadGroupSetsRequest* _this = reinterpret_cast< SearchReadGroupSetsRequest* >(object);
  (void)_this;
}
void SearchReadGroupSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReadGroupSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReadGroupSetsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReadGroupSetsRequest& SearchReadGroupSetsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReadGroupSetsRequest* SearchReadGroupSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReadGroupSetsRequest>(arena);
}

void SearchReadGroupSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReadGroupSetsRequest)
  dataset_ids_.Clear();
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
}

bool SearchReadGroupSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReadGroupSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dataset_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dataset_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_ids(this->dataset_ids_size() - 1).data(),
            this->dataset_ids(this->dataset_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadGroupSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadGroupSetsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReadGroupSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReadGroupSetsRequest)
  return false;
#undef DO_
}

void SearchReadGroupSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReadGroupSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataset_ids = 1;
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), this->dataset_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataset_ids(i), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReadGroupSetsRequest)
}

::google::protobuf::uint8* SearchReadGroupSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReadGroupSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataset_ids = 1;
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), this->dataset_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dataset_ids(i), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReadGroupSetsRequest)
  return target;
}

size_t SearchReadGroupSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReadGroupSetsRequest)
  size_t total_size = 0;

  // repeated string dataset_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dataset_ids_size());
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dataset_ids(i));
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReadGroupSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReadGroupSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReadGroupSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReadGroupSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReadGroupSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReadGroupSetsRequest)
    MergeFrom(*source);
  }
}

void SearchReadGroupSetsRequest::MergeFrom(const SearchReadGroupSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReadGroupSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_ids_.MergeFrom(from.dataset_ids_);
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReadGroupSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReadGroupSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReadGroupSetsRequest::CopyFrom(const SearchReadGroupSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReadGroupSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReadGroupSetsRequest::IsInitialized() const {
  return true;
}

void SearchReadGroupSetsRequest::Swap(SearchReadGroupSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReadGroupSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReadGroupSetsRequest::UnsafeArenaSwap(SearchReadGroupSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReadGroupSetsRequest::InternalSwap(SearchReadGroupSetsRequest* other) {
  dataset_ids_.InternalSwap(&other->dataset_ids_);
  page_token_.Swap(&other->page_token_);
  name_.Swap(&other->name_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReadGroupSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReadGroupSetsRequest

// repeated string dataset_ids = 1;
int SearchReadGroupSetsRequest::dataset_ids_size() const {
  return dataset_ids_.size();
}
void SearchReadGroupSetsRequest::clear_dataset_ids() {
  dataset_ids_.Clear();
}
const ::std::string& SearchReadGroupSetsRequest::dataset_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  return dataset_ids_.Get(index);
}
::std::string* SearchReadGroupSetsRequest::mutable_dataset_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  return dataset_ids_.Mutable(index);
}
void SearchReadGroupSetsRequest::set_dataset_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  dataset_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReadGroupSetsRequest::set_dataset_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  dataset_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReadGroupSetsRequest::set_dataset_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dataset_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
}
void SearchReadGroupSetsRequest::set_dataset_ids(int index, const char* value, size_t size) {
  dataset_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
}
::std::string* SearchReadGroupSetsRequest::add_dataset_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  return dataset_ids_.Add();
}
void SearchReadGroupSetsRequest::add_dataset_ids(const ::std::string& value) {
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
}
#if LANG_CXX11
void SearchReadGroupSetsRequest::add_dataset_ids(::std::string&& value) {
  dataset_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
}
#endif
void SearchReadGroupSetsRequest::add_dataset_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
}
void SearchReadGroupSetsRequest::add_dataset_ids(const char* value, size_t size) {
  dataset_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReadGroupSetsRequest::dataset_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  return dataset_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReadGroupSetsRequest::mutable_dataset_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReadGroupSetsRequest.dataset_ids)
  return &dataset_ids_;
}

// string name = 3;
void SearchReadGroupSetsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReadGroupSetsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadGroupSetsRequest.name)
  return name_.Get();
}
void SearchReadGroupSetsRequest::set_name(const ::std::string& value) {

  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadGroupSetsRequest.name)
}
void SearchReadGroupSetsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadGroupSetsRequest.name)
}
void SearchReadGroupSetsRequest::set_name(const char* value,
    size_t size) {

  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadGroupSetsRequest.name)
}
::std::string* SearchReadGroupSetsRequest::mutable_name() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadGroupSetsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadGroupSetsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReadGroupSetsRequest.name)

  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadGroupSetsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReadGroupSetsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReadGroupSetsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {

  } else {

  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReadGroupSetsRequest.name)
}
void SearchReadGroupSetsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {

  } else {

  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReadGroupSetsRequest.name)
}

// string page_token = 2;
void SearchReadGroupSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReadGroupSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
  return page_token_.Get();
}
void SearchReadGroupSetsRequest::set_page_token(const ::std::string& value) {

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
}
void SearchReadGroupSetsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
}
void SearchReadGroupSetsRequest::set_page_token(const char* value,
    size_t size) {

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
}
::std::string* SearchReadGroupSetsRequest::mutable_page_token() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadGroupSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReadGroupSetsRequest.page_token)

  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadGroupSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReadGroupSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {

  } else {

  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
}
void SearchReadGroupSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {

  } else {

  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReadGroupSetsRequest.page_token)
}

// int32 page_size = 4;
void SearchReadGroupSetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchReadGroupSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadGroupSetsRequest.page_size)
  return page_size_;
}
void SearchReadGroupSetsRequest::set_page_size(::google::protobuf::int32 value) {

  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadGroupSetsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReadGroupSetsResponse::kReadGroupSetsFieldNumber;
const int SearchReadGroupSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReadGroupSetsResponse::SearchReadGroupSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReadGroupSetsResponse)
}
SearchReadGroupSetsResponse::SearchReadGroupSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  read_group_sets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReadGroupSetsResponse)
}
SearchReadGroupSetsResponse::SearchReadGroupSetsResponse(const SearchReadGroupSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      read_group_sets_(from.read_group_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReadGroupSetsResponse)
}

void SearchReadGroupSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReadGroupSetsResponse::~SearchReadGroupSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReadGroupSetsResponse)
  SharedDtor();
}

void SearchReadGroupSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReadGroupSetsResponse::ArenaDtor(void* object) {
  SearchReadGroupSetsResponse* _this = reinterpret_cast< SearchReadGroupSetsResponse* >(object);
  (void)_this;
}
void SearchReadGroupSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReadGroupSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReadGroupSetsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReadGroupSetsResponse& SearchReadGroupSetsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReadGroupSetsResponse* SearchReadGroupSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReadGroupSetsResponse>(arena);
}

void SearchReadGroupSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReadGroupSetsResponse)
  read_group_sets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SearchReadGroupSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReadGroupSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.ReadGroupSet read_group_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_read_group_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadGroupSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReadGroupSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReadGroupSetsResponse)
  return false;
#undef DO_
}

void SearchReadGroupSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReadGroupSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.ReadGroupSet read_group_sets = 1;
  for (unsigned int i = 0, n = this->read_group_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->read_group_sets(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReadGroupSetsResponse)
}

::google::protobuf::uint8* SearchReadGroupSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReadGroupSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.ReadGroupSet read_group_sets = 1;
  for (unsigned int i = 0, n = this->read_group_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->read_group_sets(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadGroupSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReadGroupSetsResponse)
  return target;
}

size_t SearchReadGroupSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReadGroupSetsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.ReadGroupSet read_group_sets = 1;
  {
    unsigned int count = this->read_group_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_group_sets(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReadGroupSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReadGroupSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReadGroupSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReadGroupSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReadGroupSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReadGroupSetsResponse)
    MergeFrom(*source);
  }
}

void SearchReadGroupSetsResponse::MergeFrom(const SearchReadGroupSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReadGroupSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_group_sets_.MergeFrom(from.read_group_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReadGroupSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReadGroupSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReadGroupSetsResponse::CopyFrom(const SearchReadGroupSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReadGroupSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReadGroupSetsResponse::IsInitialized() const {
  return true;
}

void SearchReadGroupSetsResponse::Swap(SearchReadGroupSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReadGroupSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReadGroupSetsResponse::UnsafeArenaSwap(SearchReadGroupSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReadGroupSetsResponse::InternalSwap(SearchReadGroupSetsResponse* other) {
  read_group_sets_.InternalSwap(&other->read_group_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReadGroupSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReadGroupSetsResponse

// repeated .google.genomics.v1.ReadGroupSet read_group_sets = 1;
int SearchReadGroupSetsResponse::read_group_sets_size() const {
  return read_group_sets_.size();
}
void SearchReadGroupSetsResponse::clear_read_group_sets() {
  read_group_sets_.Clear();
}
const ::google::genomics::v1::ReadGroupSet& SearchReadGroupSetsResponse::read_group_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadGroupSetsResponse.read_group_sets)
  return read_group_sets_.Get(index);
}
::google::genomics::v1::ReadGroupSet* SearchReadGroupSetsResponse::mutable_read_group_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadGroupSetsResponse.read_group_sets)
  return read_group_sets_.Mutable(index);
}
::google::genomics::v1::ReadGroupSet* SearchReadGroupSetsResponse::add_read_group_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadGroupSetsResponse.read_group_sets)
  return read_group_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReadGroupSet >*
SearchReadGroupSetsResponse::mutable_read_group_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReadGroupSetsResponse.read_group_sets)
  return &read_group_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReadGroupSet >&
SearchReadGroupSetsResponse::read_group_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReadGroupSetsResponse.read_group_sets)
  return read_group_sets_;
}

// string next_page_token = 2;
void SearchReadGroupSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReadGroupSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
  return next_page_token_.Get();
}
void SearchReadGroupSetsResponse::set_next_page_token(const ::std::string& value) {

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
}
void SearchReadGroupSetsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
}
void SearchReadGroupSetsResponse::set_next_page_token(const char* value,
    size_t size) {

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
}
::std::string* SearchReadGroupSetsResponse::mutable_next_page_token() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadGroupSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)

  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadGroupSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReadGroupSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {

  } else {

  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
}
void SearchReadGroupSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {

  } else {

  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReadGroupSetsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportReadGroupSetsRequest::kDatasetIdFieldNumber;
const int ImportReadGroupSetsRequest::kReferenceSetIdFieldNumber;
const int ImportReadGroupSetsRequest::kSourceUrisFieldNumber;
const int ImportReadGroupSetsRequest::kPartitionStrategyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportReadGroupSetsRequest::ImportReadGroupSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ImportReadGroupSetsRequest)
}
ImportReadGroupSetsRequest::ImportReadGroupSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_uris_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ImportReadGroupSetsRequest)
}
ImportReadGroupSetsRequest::ImportReadGroupSetsRequest(const ImportReadGroupSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_uris_(from.source_uris_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id(),
      GetArenaNoVirtual());
  }
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  partition_strategy_ = from.partition_strategy_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ImportReadGroupSetsRequest)
}

void ImportReadGroupSetsRequest::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_strategy_ = 0;
  _cached_size_ = 0;
}

ImportReadGroupSetsRequest::~ImportReadGroupSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ImportReadGroupSetsRequest)
  SharedDtor();
}

void ImportReadGroupSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ImportReadGroupSetsRequest::ArenaDtor(void* object) {
  ImportReadGroupSetsRequest* _this = reinterpret_cast< ImportReadGroupSetsRequest* >(object);
  (void)_this;
}
void ImportReadGroupSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImportReadGroupSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportReadGroupSetsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportReadGroupSetsRequest& ImportReadGroupSetsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImportReadGroupSetsRequest* ImportReadGroupSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ImportReadGroupSetsRequest>(arena);
}

void ImportReadGroupSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ImportReadGroupSetsRequest)
  source_uris_.Clear();
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  partition_strategy_ = 0;
}

bool ImportReadGroupSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ImportReadGroupSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dataset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportReadGroupSetsRequest.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_uris = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_uris()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uris(this->source_uris_size() - 1).data(),
            this->source_uris(this->source_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportReadGroupSetsRequest.source_uris"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_set_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.ImportReadGroupSetsRequest.PartitionStrategy partition_strategy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_partition_strategy(static_cast< ::google::genomics::v1::ImportReadGroupSetsRequest_PartitionStrategy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ImportReadGroupSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ImportReadGroupSetsRequest)
  return false;
#undef DO_
}

void ImportReadGroupSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ImportReadGroupSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsRequest.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // repeated string source_uris = 2;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsRequest.source_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source_uris(i), output);
  }

  // string reference_set_id = 4;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference_set_id(), output);
  }

  // .google.genomics.v1.ImportReadGroupSetsRequest.PartitionStrategy partition_strategy = 5;
  if (this->partition_strategy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->partition_strategy(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ImportReadGroupSetsRequest)
}

::google::protobuf::uint8* ImportReadGroupSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ImportReadGroupSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsRequest.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // repeated string source_uris = 2;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsRequest.source_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->source_uris(i), target);
  }

  // string reference_set_id = 4;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference_set_id(), target);
  }

  // .google.genomics.v1.ImportReadGroupSetsRequest.PartitionStrategy partition_strategy = 5;
  if (this->partition_strategy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->partition_strategy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ImportReadGroupSetsRequest)
  return target;
}

size_t ImportReadGroupSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ImportReadGroupSetsRequest)
  size_t total_size = 0;

  // repeated string source_uris = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_uris_size());
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_uris(i));
  }

  // string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // string reference_set_id = 4;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // .google.genomics.v1.ImportReadGroupSetsRequest.PartitionStrategy partition_strategy = 5;
  if (this->partition_strategy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->partition_strategy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportReadGroupSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ImportReadGroupSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportReadGroupSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportReadGroupSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ImportReadGroupSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ImportReadGroupSetsRequest)
    MergeFrom(*source);
  }
}

void ImportReadGroupSetsRequest::MergeFrom(const ImportReadGroupSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ImportReadGroupSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_uris_.MergeFrom(from.source_uris_);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.partition_strategy() != 0) {
    set_partition_strategy(from.partition_strategy());
  }
}

void ImportReadGroupSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ImportReadGroupSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportReadGroupSetsRequest::CopyFrom(const ImportReadGroupSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ImportReadGroupSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportReadGroupSetsRequest::IsInitialized() const {
  return true;
}

void ImportReadGroupSetsRequest::Swap(ImportReadGroupSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImportReadGroupSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ImportReadGroupSetsRequest::UnsafeArenaSwap(ImportReadGroupSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImportReadGroupSetsRequest::InternalSwap(ImportReadGroupSetsRequest* other) {
  source_uris_.InternalSwap(&other->source_uris_);
  dataset_id_.Swap(&other->dataset_id_);
  reference_set_id_.Swap(&other->reference_set_id_);
  std::swap(partition_strategy_, other->partition_strategy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportReadGroupSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportReadGroupSetsRequest

// string dataset_id = 1;
void ImportReadGroupSetsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ImportReadGroupSetsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
  return dataset_id_.Get();
}
void ImportReadGroupSetsRequest::set_dataset_id(const ::std::string& value) {

  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
}
void ImportReadGroupSetsRequest::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
}
void ImportReadGroupSetsRequest::set_dataset_id(const char* value,
    size_t size) {

  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
}
::std::string* ImportReadGroupSetsRequest::mutable_dataset_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ImportReadGroupSetsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)

  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ImportReadGroupSetsRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ImportReadGroupSetsRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {

  } else {

  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
}
void ImportReadGroupSetsRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {

  } else {

  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ImportReadGroupSetsRequest.dataset_id)
}

// string reference_set_id = 4;
void ImportReadGroupSetsRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ImportReadGroupSetsRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
  return reference_set_id_.Get();
}
void ImportReadGroupSetsRequest::set_reference_set_id(const ::std::string& value) {

  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
}
void ImportReadGroupSetsRequest::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
}
void ImportReadGroupSetsRequest::set_reference_set_id(const char* value,
    size_t size) {

  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
}
::std::string* ImportReadGroupSetsRequest::mutable_reference_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ImportReadGroupSetsRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)

  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ImportReadGroupSetsRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ImportReadGroupSetsRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {

  } else {

  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
}
void ImportReadGroupSetsRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {

  } else {

  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ImportReadGroupSetsRequest.reference_set_id)
}

// repeated string source_uris = 2;
int ImportReadGroupSetsRequest::source_uris_size() const {
  return source_uris_.size();
}
void ImportReadGroupSetsRequest::clear_source_uris() {
  source_uris_.Clear();
}
const ::std::string& ImportReadGroupSetsRequest::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  return source_uris_.Get(index);
}
::std::string* ImportReadGroupSetsRequest::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  return source_uris_.Mutable(index);
}
void ImportReadGroupSetsRequest::set_source_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  source_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ImportReadGroupSetsRequest::set_source_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  source_uris_.Mutable(index)->assign(std::move(value));
}
#endif
void ImportReadGroupSetsRequest::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
}
void ImportReadGroupSetsRequest::set_source_uris(int index, const char* value, size_t size) {
  source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
}
::std::string* ImportReadGroupSetsRequest::add_source_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  return source_uris_.Add();
}
void ImportReadGroupSetsRequest::add_source_uris(const ::std::string& value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
}
#if LANG_CXX11
void ImportReadGroupSetsRequest::add_source_uris(::std::string&& value) {
  source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
}
#endif
void ImportReadGroupSetsRequest::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
}
void ImportReadGroupSetsRequest::add_source_uris(const char* value, size_t size) {
  source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImportReadGroupSetsRequest::source_uris() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  return source_uris_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImportReadGroupSetsRequest::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ImportReadGroupSetsRequest.source_uris)
  return &source_uris_;
}

// .google.genomics.v1.ImportReadGroupSetsRequest.PartitionStrategy partition_strategy = 5;
void ImportReadGroupSetsRequest::clear_partition_strategy() {
  partition_strategy_ = 0;
}
::google::genomics::v1::ImportReadGroupSetsRequest_PartitionStrategy ImportReadGroupSetsRequest::partition_strategy() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportReadGroupSetsRequest.partition_strategy)
  return static_cast< ::google::genomics::v1::ImportReadGroupSetsRequest_PartitionStrategy >(partition_strategy_);
}
void ImportReadGroupSetsRequest::set_partition_strategy(::google::genomics::v1::ImportReadGroupSetsRequest_PartitionStrategy value) {

  partition_strategy_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsRequest.partition_strategy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportReadGroupSetsResponse::kReadGroupSetIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportReadGroupSetsResponse::ImportReadGroupSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ImportReadGroupSetsResponse)
}
ImportReadGroupSetsResponse::ImportReadGroupSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  read_group_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ImportReadGroupSetsResponse)
}
ImportReadGroupSetsResponse::ImportReadGroupSetsResponse(const ImportReadGroupSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      read_group_set_ids_(from.read_group_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ImportReadGroupSetsResponse)
}

void ImportReadGroupSetsResponse::SharedCtor() {
  _cached_size_ = 0;
}

ImportReadGroupSetsResponse::~ImportReadGroupSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ImportReadGroupSetsResponse)
  SharedDtor();
}

void ImportReadGroupSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ImportReadGroupSetsResponse::ArenaDtor(void* object) {
  ImportReadGroupSetsResponse* _this = reinterpret_cast< ImportReadGroupSetsResponse* >(object);
  (void)_this;
}
void ImportReadGroupSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImportReadGroupSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportReadGroupSetsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportReadGroupSetsResponse& ImportReadGroupSetsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImportReadGroupSetsResponse* ImportReadGroupSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ImportReadGroupSetsResponse>(arena);
}

void ImportReadGroupSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ImportReadGroupSetsResponse)
  read_group_set_ids_.Clear();
}

bool ImportReadGroupSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ImportReadGroupSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string read_group_set_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_read_group_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_ids(this->read_group_set_ids_size() - 1).data(),
            this->read_group_set_ids(this->read_group_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ImportReadGroupSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ImportReadGroupSetsResponse)
  return false;
#undef DO_
}

void ImportReadGroupSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ImportReadGroupSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_group_set_ids = 1;
  for (int i = 0, n = this->read_group_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_ids(i).data(), this->read_group_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->read_group_set_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ImportReadGroupSetsResponse)
}

::google::protobuf::uint8* ImportReadGroupSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ImportReadGroupSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_group_set_ids = 1;
  for (int i = 0, n = this->read_group_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_ids(i).data(), this->read_group_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->read_group_set_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ImportReadGroupSetsResponse)
  return target;
}

size_t ImportReadGroupSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ImportReadGroupSetsResponse)
  size_t total_size = 0;

  // repeated string read_group_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->read_group_set_ids_size());
  for (int i = 0, n = this->read_group_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->read_group_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportReadGroupSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ImportReadGroupSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportReadGroupSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportReadGroupSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ImportReadGroupSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ImportReadGroupSetsResponse)
    MergeFrom(*source);
  }
}

void ImportReadGroupSetsResponse::MergeFrom(const ImportReadGroupSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ImportReadGroupSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_group_set_ids_.MergeFrom(from.read_group_set_ids_);
}

void ImportReadGroupSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ImportReadGroupSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportReadGroupSetsResponse::CopyFrom(const ImportReadGroupSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ImportReadGroupSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportReadGroupSetsResponse::IsInitialized() const {
  return true;
}

void ImportReadGroupSetsResponse::Swap(ImportReadGroupSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImportReadGroupSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ImportReadGroupSetsResponse::UnsafeArenaSwap(ImportReadGroupSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImportReadGroupSetsResponse::InternalSwap(ImportReadGroupSetsResponse* other) {
  read_group_set_ids_.InternalSwap(&other->read_group_set_ids_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportReadGroupSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportReadGroupSetsResponse

// repeated string read_group_set_ids = 1;
int ImportReadGroupSetsResponse::read_group_set_ids_size() const {
  return read_group_set_ids_.size();
}
void ImportReadGroupSetsResponse::clear_read_group_set_ids() {
  read_group_set_ids_.Clear();
}
const ::std::string& ImportReadGroupSetsResponse::read_group_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  return read_group_set_ids_.Get(index);
}
::std::string* ImportReadGroupSetsResponse::mutable_read_group_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  return read_group_set_ids_.Mutable(index);
}
void ImportReadGroupSetsResponse::set_read_group_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  read_group_set_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ImportReadGroupSetsResponse::set_read_group_set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  read_group_set_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void ImportReadGroupSetsResponse::set_read_group_set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_group_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
}
void ImportReadGroupSetsResponse::set_read_group_set_ids(int index, const char* value, size_t size) {
  read_group_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
}
::std::string* ImportReadGroupSetsResponse::add_read_group_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  return read_group_set_ids_.Add();
}
void ImportReadGroupSetsResponse::add_read_group_set_ids(const ::std::string& value) {
  read_group_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
}
#if LANG_CXX11
void ImportReadGroupSetsResponse::add_read_group_set_ids(::std::string&& value) {
  read_group_set_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
}
#endif
void ImportReadGroupSetsResponse::add_read_group_set_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_group_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
}
void ImportReadGroupSetsResponse::add_read_group_set_ids(const char* value, size_t size) {
  read_group_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImportReadGroupSetsResponse::read_group_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  return read_group_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImportReadGroupSetsResponse::mutable_read_group_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ImportReadGroupSetsResponse.read_group_set_ids)
  return &read_group_set_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportReadGroupSetRequest::kProjectIdFieldNumber;
const int ExportReadGroupSetRequest::kExportUriFieldNumber;
const int ExportReadGroupSetRequest::kReadGroupSetIdFieldNumber;
const int ExportReadGroupSetRequest::kReferenceNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportReadGroupSetRequest::ExportReadGroupSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ExportReadGroupSetRequest)
}
ExportReadGroupSetRequest::ExportReadGroupSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_names_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ExportReadGroupSetRequest)
}
ExportReadGroupSetRequest::ExportReadGroupSetRequest(const ExportReadGroupSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_names_(from.reference_names_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id(),
      GetArenaNoVirtual());
  }
  export_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.export_uri().size() > 0) {
    export_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.export_uri(),
      GetArenaNoVirtual());
  }
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ExportReadGroupSetRequest)
}

void ExportReadGroupSetRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  export_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ExportReadGroupSetRequest::~ExportReadGroupSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ExportReadGroupSetRequest)
  SharedDtor();
}

void ExportReadGroupSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  export_uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  read_group_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ExportReadGroupSetRequest::ArenaDtor(void* object) {
  ExportReadGroupSetRequest* _this = reinterpret_cast< ExportReadGroupSetRequest* >(object);
  (void)_this;
}
void ExportReadGroupSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExportReadGroupSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportReadGroupSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExportReadGroupSetRequest& ExportReadGroupSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExportReadGroupSetRequest* ExportReadGroupSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExportReadGroupSetRequest>(arena);
}

void ExportReadGroupSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ExportReadGroupSetRequest)
  reference_names_.Clear();
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  export_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ExportReadGroupSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ExportReadGroupSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportReadGroupSetRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string export_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_export_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->export_uri().data(), this->export_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportReadGroupSetRequest.export_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group_set_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), this->read_group_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_names = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_names(this->reference_names_size() - 1).data(),
            this->reference_names(this->reference_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportReadGroupSetRequest.reference_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ExportReadGroupSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ExportReadGroupSetRequest)
  return false;
#undef DO_
}

void ExportReadGroupSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ExportReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string export_uri = 2;
  if (this->export_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_uri().data(), this->export_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.export_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->export_uri(), output);
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->read_group_set_id(), output);
  }

  // repeated string reference_names = 4;
  for (int i = 0, n = this->reference_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_names(i).data(), this->reference_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.reference_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reference_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ExportReadGroupSetRequest)
}

::google::protobuf::uint8* ExportReadGroupSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ExportReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string export_uri = 2;
  if (this->export_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_uri().data(), this->export_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.export_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->export_uri(), target);
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->read_group_set_id(), target);
  }

  // repeated string reference_names = 4;
  for (int i = 0, n = this->reference_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_names(i).data(), this->reference_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportReadGroupSetRequest.reference_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->reference_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ExportReadGroupSetRequest)
  return target;
}

size_t ExportReadGroupSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ExportReadGroupSetRequest)
  size_t total_size = 0;

  // repeated string reference_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_names_size());
  for (int i = 0, n = this->reference_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_names(i));
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string export_uri = 2;
  if (this->export_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->export_uri());
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportReadGroupSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ExportReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportReadGroupSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportReadGroupSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ExportReadGroupSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ExportReadGroupSetRequest)
    MergeFrom(*source);
  }
}

void ExportReadGroupSetRequest::MergeFrom(const ExportReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ExportReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_names_.MergeFrom(from.reference_names_);
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.export_uri().size() > 0) {
    set_export_uri(from.export_uri());
  }
  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
}

void ExportReadGroupSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ExportReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportReadGroupSetRequest::CopyFrom(const ExportReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ExportReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportReadGroupSetRequest::IsInitialized() const {
  return true;
}

void ExportReadGroupSetRequest::Swap(ExportReadGroupSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExportReadGroupSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExportReadGroupSetRequest::UnsafeArenaSwap(ExportReadGroupSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExportReadGroupSetRequest::InternalSwap(ExportReadGroupSetRequest* other) {
  reference_names_.InternalSwap(&other->reference_names_);
  project_id_.Swap(&other->project_id_);
  export_uri_.Swap(&other->export_uri_);
  read_group_set_id_.Swap(&other->read_group_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportReadGroupSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportReadGroupSetRequest

// string project_id = 1;
void ExportReadGroupSetRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportReadGroupSetRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportReadGroupSetRequest.project_id)
  return project_id_.Get();
}
void ExportReadGroupSetRequest::set_project_id(const ::std::string& value) {

  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportReadGroupSetRequest.project_id)
}
void ExportReadGroupSetRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportReadGroupSetRequest.project_id)
}
void ExportReadGroupSetRequest::set_project_id(const char* value,
    size_t size) {

  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportReadGroupSetRequest.project_id)
}
::std::string* ExportReadGroupSetRequest::mutable_project_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportReadGroupSetRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportReadGroupSetRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportReadGroupSetRequest.project_id)

  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportReadGroupSetRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportReadGroupSetRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportReadGroupSetRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {

  } else {

  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportReadGroupSetRequest.project_id)
}
void ExportReadGroupSetRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {

  } else {

  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportReadGroupSetRequest.project_id)
}

// string export_uri = 2;
void ExportReadGroupSetRequest::clear_export_uri() {
  export_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportReadGroupSetRequest::export_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
  return export_uri_.Get();
}
void ExportReadGroupSetRequest::set_export_uri(const ::std::string& value) {

  export_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
}
void ExportReadGroupSetRequest::set_export_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  export_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
}
void ExportReadGroupSetRequest::set_export_uri(const char* value,
    size_t size) {

  export_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
}
::std::string* ExportReadGroupSetRequest::mutable_export_uri() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
  return export_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportReadGroupSetRequest::release_export_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportReadGroupSetRequest.export_uri)

  return export_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportReadGroupSetRequest::unsafe_arena_release_export_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return export_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportReadGroupSetRequest::set_allocated_export_uri(::std::string* export_uri) {
  if (export_uri != NULL) {

  } else {

  }
  export_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), export_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
}
void ExportReadGroupSetRequest::unsafe_arena_set_allocated_export_uri(
    ::std::string* export_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (export_uri != NULL) {

  } else {

  }
  export_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      export_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportReadGroupSetRequest.export_uri)
}

// string read_group_set_id = 3;
void ExportReadGroupSetRequest::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportReadGroupSetRequest::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Get();
}
void ExportReadGroupSetRequest::set_read_group_set_id(const ::std::string& value) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
}
void ExportReadGroupSetRequest::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
}
void ExportReadGroupSetRequest::set_read_group_set_id(const char* value,
    size_t size) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
}
::std::string* ExportReadGroupSetRequest::mutable_read_group_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportReadGroupSetRequest::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)

  return read_group_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportReadGroupSetRequest::unsafe_arena_release_read_group_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return read_group_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportReadGroupSetRequest::set_allocated_read_group_set_id(::std::string* read_group_set_id) {
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
}
void ExportReadGroupSetRequest::unsafe_arena_set_allocated_read_group_set_id(
    ::std::string* read_group_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      read_group_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportReadGroupSetRequest.read_group_set_id)
}

// repeated string reference_names = 4;
int ExportReadGroupSetRequest::reference_names_size() const {
  return reference_names_.size();
}
void ExportReadGroupSetRequest::clear_reference_names() {
  reference_names_.Clear();
}
const ::std::string& ExportReadGroupSetRequest::reference_names(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  return reference_names_.Get(index);
}
::std::string* ExportReadGroupSetRequest::mutable_reference_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  return reference_names_.Mutable(index);
}
void ExportReadGroupSetRequest::set_reference_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  reference_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ExportReadGroupSetRequest::set_reference_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  reference_names_.Mutable(index)->assign(std::move(value));
}
#endif
void ExportReadGroupSetRequest::set_reference_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
}
void ExportReadGroupSetRequest::set_reference_names(int index, const char* value, size_t size) {
  reference_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
}
::std::string* ExportReadGroupSetRequest::add_reference_names() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  return reference_names_.Add();
}
void ExportReadGroupSetRequest::add_reference_names(const ::std::string& value) {
  reference_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
}
#if LANG_CXX11
void ExportReadGroupSetRequest::add_reference_names(::std::string&& value) {
  reference_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
}
#endif
void ExportReadGroupSetRequest::add_reference_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
}
void ExportReadGroupSetRequest::add_reference_names(const char* value, size_t size) {
  reference_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExportReadGroupSetRequest::reference_names() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  return reference_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExportReadGroupSetRequest::mutable_reference_names() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ExportReadGroupSetRequest.reference_names)
  return &reference_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateReadGroupSetRequest::_slow_mutable_read_group_set() {
  read_group_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::ReadGroupSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::ReadGroupSet* UpdateReadGroupSetRequest::_slow_release_read_group_set() {
  if (read_group_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::ReadGroupSet* temp = new ::google::genomics::v1::ReadGroupSet(*read_group_set_);
    read_group_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::ReadGroupSet* UpdateReadGroupSetRequest::unsafe_arena_release_read_group_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set)

  ::google::genomics::v1::ReadGroupSet* temp = read_group_set_;
  read_group_set_ = NULL;
  return temp;
}
void UpdateReadGroupSetRequest::_slow_set_allocated_read_group_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::ReadGroupSet** read_group_set) {
    if (message_arena != NULL &&
        ::google::protobuf::Arena::GetArena(*read_group_set) == NULL) {
      message_arena->Own(*read_group_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*read_group_set)) {
      ::google::genomics::v1::ReadGroupSet* new_read_group_set =
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::ReadGroupSet >(
            message_arena);
      new_read_group_set->CopyFrom(**read_group_set);
      *read_group_set = new_read_group_set;
    }
}
void UpdateReadGroupSetRequest::unsafe_arena_set_allocated_read_group_set(
    ::google::genomics::v1::ReadGroupSet* read_group_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete read_group_set_;
  }
  read_group_set_ = read_group_set;
  if (read_group_set) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set)
}
void UpdateReadGroupSetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateReadGroupSetRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateReadGroupSetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateReadGroupSetRequest.update_mask)

  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateReadGroupSetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateReadGroupSetRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateReadGroupSetRequest::kReadGroupSetIdFieldNumber;
const int UpdateReadGroupSetRequest::kReadGroupSetFieldNumber;
const int UpdateReadGroupSetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateReadGroupSetRequest::UpdateReadGroupSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateReadGroupSetRequest)
}
UpdateReadGroupSetRequest::UpdateReadGroupSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateReadGroupSetRequest)
}
UpdateReadGroupSetRequest::UpdateReadGroupSetRequest(const UpdateReadGroupSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  if (from.has_read_group_set()) {
    read_group_set_ = new ::google::genomics::v1::ReadGroupSet(*from.read_group_set_);
  } else {
    read_group_set_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateReadGroupSetRequest)
}

void UpdateReadGroupSetRequest::SharedCtor() {
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_group_set_, 0, reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&read_group_set_) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateReadGroupSetRequest::~UpdateReadGroupSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateReadGroupSetRequest)
  SharedDtor();
}

void UpdateReadGroupSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  read_group_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete read_group_set_;
  }
  if (this != internal_default_instance()) {
    delete update_mask_;
  }
}

void UpdateReadGroupSetRequest::ArenaDtor(void* object) {
  UpdateReadGroupSetRequest* _this = reinterpret_cast< UpdateReadGroupSetRequest* >(object);
  (void)_this;
}
void UpdateReadGroupSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateReadGroupSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateReadGroupSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateReadGroupSetRequest& UpdateReadGroupSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateReadGroupSetRequest* UpdateReadGroupSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateReadGroupSetRequest>(arena);
}

void UpdateReadGroupSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateReadGroupSetRequest)
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && read_group_set_ != NULL) {
    delete read_group_set_;
  }
  read_group_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}

bool UpdateReadGroupSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateReadGroupSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string read_group_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), this->read_group_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.ReadGroupSet read_group_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_group_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateReadGroupSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateReadGroupSetRequest)
  return false;
#undef DO_
}

void UpdateReadGroupSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->read_group_set_id(), output);
  }

  // .google.genomics.v1.ReadGroupSet read_group_set = 2;
  if (this->has_read_group_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->read_group_set_, output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateReadGroupSetRequest)
}

::google::protobuf::uint8* UpdateReadGroupSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->read_group_set_id(), target);
  }

  // .google.genomics.v1.ReadGroupSet read_group_set = 2;
  if (this->has_read_group_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->read_group_set_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_mask_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateReadGroupSetRequest)
  return target;
}

size_t UpdateReadGroupSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateReadGroupSetRequest)
  size_t total_size = 0;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  // .google.genomics.v1.ReadGroupSet read_group_set = 2;
  if (this->has_read_group_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->read_group_set_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateReadGroupSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReadGroupSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateReadGroupSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateReadGroupSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateReadGroupSetRequest)
    MergeFrom(*source);
  }
}

void UpdateReadGroupSetRequest::MergeFrom(const UpdateReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
  if (from.has_read_group_set()) {
    mutable_read_group_set()->::google::genomics::v1::ReadGroupSet::MergeFrom(from.read_group_set());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateReadGroupSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReadGroupSetRequest::CopyFrom(const UpdateReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReadGroupSetRequest::IsInitialized() const {
  return true;
}

void UpdateReadGroupSetRequest::Swap(UpdateReadGroupSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateReadGroupSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateReadGroupSetRequest::UnsafeArenaSwap(UpdateReadGroupSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateReadGroupSetRequest::InternalSwap(UpdateReadGroupSetRequest* other) {
  read_group_set_id_.Swap(&other->read_group_set_id_);
  std::swap(read_group_set_, other->read_group_set_);
  std::swap(update_mask_, other->update_mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateReadGroupSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateReadGroupSetRequest

// string read_group_set_id = 1;
void UpdateReadGroupSetRequest::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateReadGroupSetRequest::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Get();
}
void UpdateReadGroupSetRequest::set_read_group_set_id(const ::std::string& value) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
}
void UpdateReadGroupSetRequest::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
}
void UpdateReadGroupSetRequest::set_read_group_set_id(const char* value,
    size_t size) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
}
::std::string* UpdateReadGroupSetRequest::mutable_read_group_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateReadGroupSetRequest::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)

  return read_group_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateReadGroupSetRequest::unsafe_arena_release_read_group_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return read_group_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateReadGroupSetRequest::set_allocated_read_group_set_id(::std::string* read_group_set_id) {
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
}
void UpdateReadGroupSetRequest::unsafe_arena_set_allocated_read_group_set_id(
    ::std::string* read_group_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      read_group_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set_id)
}

// .google.genomics.v1.ReadGroupSet read_group_set = 2;
bool UpdateReadGroupSetRequest::has_read_group_set() const {
  return this != internal_default_instance() && read_group_set_ != NULL;
}
void UpdateReadGroupSetRequest::clear_read_group_set() {
  if (GetArenaNoVirtual() == NULL && read_group_set_ != NULL) delete read_group_set_;
  read_group_set_ = NULL;
}
const ::google::genomics::v1::ReadGroupSet& UpdateReadGroupSetRequest::read_group_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set)
  return read_group_set_ != NULL ? *read_group_set_
                         : *::google::genomics::v1::ReadGroupSet::internal_default_instance();
}
::google::genomics::v1::ReadGroupSet* UpdateReadGroupSetRequest::mutable_read_group_set() {

  if (read_group_set_ == NULL) {
    _slow_mutable_read_group_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set)
  return read_group_set_;
}
::google::genomics::v1::ReadGroupSet* UpdateReadGroupSetRequest::release_read_group_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set)

  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_read_group_set();
  } else {
    ::google::genomics::v1::ReadGroupSet* temp = read_group_set_;
    read_group_set_ = NULL;
    return temp;
  }
}
 void UpdateReadGroupSetRequest::set_allocated_read_group_set(::google::genomics::v1::ReadGroupSet* read_group_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete read_group_set_;
  }
  if (read_group_set != NULL) {
    _slow_set_allocated_read_group_set(message_arena, &read_group_set);
  }
  read_group_set_ = read_group_set;
  if (read_group_set) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateReadGroupSetRequest.read_group_set)
}

// .google.protobuf.FieldMask update_mask = 3;
bool UpdateReadGroupSetRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateReadGroupSetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateReadGroupSetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateReadGroupSetRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateReadGroupSetRequest::mutable_update_mask() {

  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateReadGroupSetRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateReadGroupSetRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateReadGroupSetRequest.update_mask)

  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateReadGroupSetRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateReadGroupSetRequest.update_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteReadGroupSetRequest::kReadGroupSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteReadGroupSetRequest::DeleteReadGroupSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteReadGroupSetRequest)
}
DeleteReadGroupSetRequest::DeleteReadGroupSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteReadGroupSetRequest)
}
DeleteReadGroupSetRequest::DeleteReadGroupSetRequest(const DeleteReadGroupSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteReadGroupSetRequest)
}

void DeleteReadGroupSetRequest::SharedCtor() {
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteReadGroupSetRequest::~DeleteReadGroupSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteReadGroupSetRequest)
  SharedDtor();
}

void DeleteReadGroupSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  read_group_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteReadGroupSetRequest::ArenaDtor(void* object) {
  DeleteReadGroupSetRequest* _this = reinterpret_cast< DeleteReadGroupSetRequest* >(object);
  (void)_this;
}
void DeleteReadGroupSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteReadGroupSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteReadGroupSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteReadGroupSetRequest& DeleteReadGroupSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteReadGroupSetRequest* DeleteReadGroupSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteReadGroupSetRequest>(arena);
}

void DeleteReadGroupSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteReadGroupSetRequest)
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteReadGroupSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteReadGroupSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string read_group_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), this->read_group_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteReadGroupSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteReadGroupSetRequest)
  return false;
#undef DO_
}

void DeleteReadGroupSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->read_group_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteReadGroupSetRequest)
}

::google::protobuf::uint8* DeleteReadGroupSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->read_group_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteReadGroupSetRequest)
  return target;
}

size_t DeleteReadGroupSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteReadGroupSetRequest)
  size_t total_size = 0;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteReadGroupSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReadGroupSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteReadGroupSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteReadGroupSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteReadGroupSetRequest)
    MergeFrom(*source);
  }
}

void DeleteReadGroupSetRequest::MergeFrom(const DeleteReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
}

void DeleteReadGroupSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReadGroupSetRequest::CopyFrom(const DeleteReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReadGroupSetRequest::IsInitialized() const {
  return true;
}

void DeleteReadGroupSetRequest::Swap(DeleteReadGroupSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteReadGroupSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteReadGroupSetRequest::UnsafeArenaSwap(DeleteReadGroupSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteReadGroupSetRequest::InternalSwap(DeleteReadGroupSetRequest* other) {
  read_group_set_id_.Swap(&other->read_group_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteReadGroupSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteReadGroupSetRequest

// string read_group_set_id = 1;
void DeleteReadGroupSetRequest::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteReadGroupSetRequest::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Get();
}
void DeleteReadGroupSetRequest::set_read_group_set_id(const ::std::string& value) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
}
void DeleteReadGroupSetRequest::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
}
void DeleteReadGroupSetRequest::set_read_group_set_id(const char* value,
    size_t size) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
}
::std::string* DeleteReadGroupSetRequest::mutable_read_group_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteReadGroupSetRequest::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)

  return read_group_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteReadGroupSetRequest::unsafe_arena_release_read_group_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return read_group_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteReadGroupSetRequest::set_allocated_read_group_set_id(::std::string* read_group_set_id) {
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
}
void DeleteReadGroupSetRequest::unsafe_arena_set_allocated_read_group_set_id(
    ::std::string* read_group_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      read_group_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteReadGroupSetRequest.read_group_set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReadGroupSetRequest::kReadGroupSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReadGroupSetRequest::GetReadGroupSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReadGroupSetRequest)
}
GetReadGroupSetRequest::GetReadGroupSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReadGroupSetRequest)
}
GetReadGroupSetRequest::GetReadGroupSetRequest(const GetReadGroupSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReadGroupSetRequest)
}

void GetReadGroupSetRequest::SharedCtor() {
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReadGroupSetRequest::~GetReadGroupSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReadGroupSetRequest)
  SharedDtor();
}

void GetReadGroupSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  read_group_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetReadGroupSetRequest::ArenaDtor(void* object) {
  GetReadGroupSetRequest* _this = reinterpret_cast< GetReadGroupSetRequest* >(object);
  (void)_this;
}
void GetReadGroupSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReadGroupSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReadGroupSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetReadGroupSetRequest& GetReadGroupSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetReadGroupSetRequest* GetReadGroupSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReadGroupSetRequest>(arena);
}

void GetReadGroupSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReadGroupSetRequest)
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetReadGroupSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReadGroupSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string read_group_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), this->read_group_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReadGroupSetRequest.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReadGroupSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReadGroupSetRequest)
  return false;
#undef DO_
}

void GetReadGroupSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReadGroupSetRequest.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->read_group_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReadGroupSetRequest)
}

::google::protobuf::uint8* GetReadGroupSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReadGroupSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReadGroupSetRequest.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->read_group_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReadGroupSetRequest)
  return target;
}

size_t GetReadGroupSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReadGroupSetRequest)
  size_t total_size = 0;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReadGroupSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReadGroupSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReadGroupSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReadGroupSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReadGroupSetRequest)
    MergeFrom(*source);
  }
}

void GetReadGroupSetRequest::MergeFrom(const GetReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReadGroupSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
}

void GetReadGroupSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReadGroupSetRequest::CopyFrom(const GetReadGroupSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReadGroupSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadGroupSetRequest::IsInitialized() const {
  return true;
}

void GetReadGroupSetRequest::Swap(GetReadGroupSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReadGroupSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetReadGroupSetRequest::UnsafeArenaSwap(GetReadGroupSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReadGroupSetRequest::InternalSwap(GetReadGroupSetRequest* other) {
  read_group_set_id_.Swap(&other->read_group_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReadGroupSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetReadGroupSetRequest

// string read_group_set_id = 1;
void GetReadGroupSetRequest::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetReadGroupSetRequest::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Get();
}
void GetReadGroupSetRequest::set_read_group_set_id(const ::std::string& value) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
}
void GetReadGroupSetRequest::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
}
void GetReadGroupSetRequest::set_read_group_set_id(const char* value,
    size_t size) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
}
::std::string* GetReadGroupSetRequest::mutable_read_group_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
  return read_group_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReadGroupSetRequest::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)

  return read_group_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReadGroupSetRequest::unsafe_arena_release_read_group_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return read_group_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetReadGroupSetRequest::set_allocated_read_group_set_id(::std::string* read_group_set_id) {
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
}
void GetReadGroupSetRequest::unsafe_arena_set_allocated_read_group_set_id(
    ::std::string* read_group_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      read_group_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReadGroupSetRequest.read_group_set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCoverageBucketsRequest::kReadGroupSetIdFieldNumber;
const int ListCoverageBucketsRequest::kReferenceNameFieldNumber;
const int ListCoverageBucketsRequest::kStartFieldNumber;
const int ListCoverageBucketsRequest::kEndFieldNumber;
const int ListCoverageBucketsRequest::kTargetBucketWidthFieldNumber;
const int ListCoverageBucketsRequest::kPageTokenFieldNumber;
const int ListCoverageBucketsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCoverageBucketsRequest::ListCoverageBucketsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListCoverageBucketsRequest)
}
ListCoverageBucketsRequest::ListCoverageBucketsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListCoverageBucketsRequest)
}
ListCoverageBucketsRequest::ListCoverageBucketsRequest(const ListCoverageBucketsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListCoverageBucketsRequest)
}

void ListCoverageBucketsRequest::SharedCtor() {
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  _cached_size_ = 0;
}

ListCoverageBucketsRequest::~ListCoverageBucketsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListCoverageBucketsRequest)
  SharedDtor();
}

void ListCoverageBucketsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  read_group_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListCoverageBucketsRequest::ArenaDtor(void* object) {
  ListCoverageBucketsRequest* _this = reinterpret_cast< ListCoverageBucketsRequest* >(object);
  (void)_this;
}
void ListCoverageBucketsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListCoverageBucketsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCoverageBucketsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListCoverageBucketsRequest& ListCoverageBucketsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListCoverageBucketsRequest* ListCoverageBucketsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListCoverageBucketsRequest>(arena);
}

void ListCoverageBucketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListCoverageBucketsRequest)
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
}

bool ListCoverageBucketsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListCoverageBucketsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string read_group_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), this->read_group_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListCoverageBucketsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_bucket_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_bucket_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListCoverageBucketsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListCoverageBucketsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListCoverageBucketsRequest)
  return false;
#undef DO_
}

void ListCoverageBucketsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListCoverageBucketsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->read_group_set_id(), output);
  }

  // string reference_name = 3;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_name(), output);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(), output);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(), output);
  }

  // int64 target_bucket_width = 6;
  if (this->target_bucket_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->target_bucket_width(), output);
  }

  // string page_token = 7;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page_token(), output);
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListCoverageBucketsRequest)
}

::google::protobuf::uint8* ListCoverageBucketsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListCoverageBucketsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->read_group_set_id(), target);
  }

  // string reference_name = 3;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_name(), target);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start(), target);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end(), target);
  }

  // int64 target_bucket_width = 6;
  if (this->target_bucket_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->target_bucket_width(), target);
  }

  // string page_token = 7;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page_token(), target);
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListCoverageBucketsRequest)
  return target;
}

size_t ListCoverageBucketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListCoverageBucketsRequest)
  size_t total_size = 0;

  // string read_group_set_id = 1;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  // string reference_name = 3;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // string page_token = 7;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int64 start = 4;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 5;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int64 target_bucket_width = 6;
  if (this->target_bucket_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_bucket_width());
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCoverageBucketsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListCoverageBucketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCoverageBucketsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListCoverageBucketsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListCoverageBucketsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListCoverageBucketsRequest)
    MergeFrom(*source);
  }
}

void ListCoverageBucketsRequest::MergeFrom(const ListCoverageBucketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListCoverageBucketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.target_bucket_width() != 0) {
    set_target_bucket_width(from.target_bucket_width());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListCoverageBucketsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListCoverageBucketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCoverageBucketsRequest::CopyFrom(const ListCoverageBucketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListCoverageBucketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCoverageBucketsRequest::IsInitialized() const {
  return true;
}

void ListCoverageBucketsRequest::Swap(ListCoverageBucketsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListCoverageBucketsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListCoverageBucketsRequest::UnsafeArenaSwap(ListCoverageBucketsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListCoverageBucketsRequest::InternalSwap(ListCoverageBucketsRequest* other) {
  read_group_set_id_.Swap(&other->read_group_set_id_);
  reference_name_.Swap(&other->reference_name_);
  page_token_.Swap(&other->page_token_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(target_bucket_width_, other->target_bucket_width_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListCoverageBucketsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListCoverageBucketsRequest

// string read_group_set_id = 1;
void ListCoverageBucketsRequest::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListCoverageBucketsRequest::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
  return read_group_set_id_.Get();
}
void ListCoverageBucketsRequest::set_read_group_set_id(const ::std::string& value) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
}
void ListCoverageBucketsRequest::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
}
void ListCoverageBucketsRequest::set_read_group_set_id(const char* value,
    size_t size) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
}
::std::string* ListCoverageBucketsRequest::mutable_read_group_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
  return read_group_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsRequest::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)

  return read_group_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsRequest::unsafe_arena_release_read_group_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return read_group_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListCoverageBucketsRequest::set_allocated_read_group_set_id(::std::string* read_group_set_id) {
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
}
void ListCoverageBucketsRequest::unsafe_arena_set_allocated_read_group_set_id(
    ::std::string* read_group_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      read_group_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListCoverageBucketsRequest.read_group_set_id)
}

// string reference_name = 3;
void ListCoverageBucketsRequest::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListCoverageBucketsRequest::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
  return reference_name_.Get();
}
void ListCoverageBucketsRequest::set_reference_name(const ::std::string& value) {

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
}
void ListCoverageBucketsRequest::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
}
void ListCoverageBucketsRequest::set_reference_name(const char* value,
    size_t size) {

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
}
::std::string* ListCoverageBucketsRequest::mutable_reference_name() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsRequest::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListCoverageBucketsRequest.reference_name)

  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsRequest::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListCoverageBucketsRequest::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {

  } else {

  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
}
void ListCoverageBucketsRequest::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {

  } else {

  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListCoverageBucketsRequest.reference_name)
}

// int64 start = 4;
void ListCoverageBucketsRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListCoverageBucketsRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.start)
  return start_;
}
void ListCoverageBucketsRequest::set_start(::google::protobuf::int64 value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.start)
}

// int64 end = 5;
void ListCoverageBucketsRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListCoverageBucketsRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.end)
  return end_;
}
void ListCoverageBucketsRequest::set_end(::google::protobuf::int64 value) {

  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.end)
}

// int64 target_bucket_width = 6;
void ListCoverageBucketsRequest::clear_target_bucket_width() {
  target_bucket_width_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListCoverageBucketsRequest::target_bucket_width() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.target_bucket_width)
  return target_bucket_width_;
}
void ListCoverageBucketsRequest::set_target_bucket_width(::google::protobuf::int64 value) {

  target_bucket_width_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.target_bucket_width)
}

// string page_token = 7;
void ListCoverageBucketsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListCoverageBucketsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.page_token)
  return page_token_.Get();
}
void ListCoverageBucketsRequest::set_page_token(const ::std::string& value) {

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.page_token)
}
void ListCoverageBucketsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListCoverageBucketsRequest.page_token)
}
void ListCoverageBucketsRequest::set_page_token(const char* value,
    size_t size) {

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListCoverageBucketsRequest.page_token)
}
::std::string* ListCoverageBucketsRequest::mutable_page_token() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListCoverageBucketsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListCoverageBucketsRequest.page_token)

  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListCoverageBucketsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListCoverageBucketsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {

  } else {

  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListCoverageBucketsRequest.page_token)
}
void ListCoverageBucketsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {

  } else {

  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListCoverageBucketsRequest.page_token)
}

// int32 page_size = 8;
void ListCoverageBucketsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListCoverageBucketsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsRequest.page_size)
  return page_size_;
}
void ListCoverageBucketsRequest::set_page_size(::google::protobuf::int32 value) {

  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CoverageBucket::_slow_mutable_range() {
  range_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Range >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Range* CoverageBucket::_slow_release_range() {
  if (range_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Range* temp = new ::google::genomics::v1::Range(*range_);
    range_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Range* CoverageBucket::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CoverageBucket.range)

  ::google::genomics::v1::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void CoverageBucket::_slow_set_allocated_range(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Range** range) {
    if (message_arena != NULL &&
        ::google::protobuf::Arena::GetArena(*range) == NULL) {
      message_arena->Own(*range);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*range)) {
      ::google::genomics::v1::Range* new_range =
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Range >(
            message_arena);
      new_range->CopyFrom(**range);
      *range = new_range;
    }
}
void CoverageBucket::unsafe_arena_set_allocated_range(
    ::google::genomics::v1::Range* range) {
  if (GetArenaNoVirtual() == NULL) {
    delete range_;
  }
  range_ = range;
  if (range) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CoverageBucket.range)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoverageBucket::kRangeFieldNumber;
const int CoverageBucket::kMeanCoverageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoverageBucket::CoverageBucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CoverageBucket)
}
CoverageBucket::CoverageBucket(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CoverageBucket)
}
CoverageBucket::CoverageBucket(const CoverageBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::google::genomics::v1::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  mean_coverage_ = from.mean_coverage_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CoverageBucket)
}

void CoverageBucket::SharedCtor() {
  ::memset(&range_, 0, reinterpret_cast<char*>(&mean_coverage_) -
    reinterpret_cast<char*>(&range_) + sizeof(mean_coverage_));
  _cached_size_ = 0;
}

CoverageBucket::~CoverageBucket() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CoverageBucket)
  SharedDtor();
}

void CoverageBucket::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete range_;
  }
}

void CoverageBucket::ArenaDtor(void* object) {
  CoverageBucket* _this = reinterpret_cast< CoverageBucket* >(object);
  (void)_this;
}
void CoverageBucket::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CoverageBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoverageBucket::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoverageBucket& CoverageBucket::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoverageBucket* CoverageBucket::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CoverageBucket>(arena);
}

void CoverageBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CoverageBucket)
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  mean_coverage_ = 0;
}

bool CoverageBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CoverageBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.Range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mean_coverage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_coverage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CoverageBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CoverageBucket)
  return false;
#undef DO_
}

void CoverageBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CoverageBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Range range = 1;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_, output);
  }

  // float mean_coverage = 2;
  if (this->mean_coverage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean_coverage(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CoverageBucket)
}

::google::protobuf::uint8* CoverageBucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CoverageBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Range range = 1;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->range_, deterministic, target);
  }

  // float mean_coverage = 2;
  if (this->mean_coverage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean_coverage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CoverageBucket)
  return target;
}

size_t CoverageBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CoverageBucket)
  size_t total_size = 0;

  // .google.genomics.v1.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // float mean_coverage = 2;
  if (this->mean_coverage() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoverageBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CoverageBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const CoverageBucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoverageBucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CoverageBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CoverageBucket)
    MergeFrom(*source);
  }
}

void CoverageBucket::MergeFrom(const CoverageBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CoverageBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::google::genomics::v1::Range::MergeFrom(from.range());
  }
  if (from.mean_coverage() != 0) {
    set_mean_coverage(from.mean_coverage());
  }
}

void CoverageBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CoverageBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoverageBucket::CopyFrom(const CoverageBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CoverageBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoverageBucket::IsInitialized() const {
  return true;
}

void CoverageBucket::Swap(CoverageBucket* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CoverageBucket* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CoverageBucket::UnsafeArenaSwap(CoverageBucket* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CoverageBucket::InternalSwap(CoverageBucket* other) {
  std::swap(range_, other->range_);
  std::swap(mean_coverage_, other->mean_coverage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoverageBucket::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoverageBucket

// .google.genomics.v1.Range range = 1;
bool CoverageBucket::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void CoverageBucket::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::google::genomics::v1::Range& CoverageBucket::range() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CoverageBucket.range)
  return range_ != NULL ? *range_
                         : *::google::genomics::v1::Range::internal_default_instance();
}
::google::genomics::v1::Range* CoverageBucket::mutable_range() {

  if (range_ == NULL) {
    _slow_mutable_range();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CoverageBucket.range)
  return range_;
}
::google::genomics::v1::Range* CoverageBucket::release_range() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CoverageBucket.range)

  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_range();
  } else {
    ::google::genomics::v1::Range* temp = range_;
    range_ = NULL;
    return temp;
  }
}
 void CoverageBucket::set_allocated_range(::google::genomics::v1::Range* range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete range_;
  }
  if (range != NULL) {
    _slow_set_allocated_range(message_arena, &range);
  }
  range_ = range;
  if (range) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CoverageBucket.range)
}

// float mean_coverage = 2;
void CoverageBucket::clear_mean_coverage() {
  mean_coverage_ = 0;
}
float CoverageBucket::mean_coverage() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CoverageBucket.mean_coverage)
  return mean_coverage_;
}
void CoverageBucket::set_mean_coverage(float value) {

  mean_coverage_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.CoverageBucket.mean_coverage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCoverageBucketsResponse::kBucketWidthFieldNumber;
const int ListCoverageBucketsResponse::kCoverageBucketsFieldNumber;
const int ListCoverageBucketsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCoverageBucketsResponse::ListCoverageBucketsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListCoverageBucketsResponse)
}
ListCoverageBucketsResponse::ListCoverageBucketsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  coverage_buckets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListCoverageBucketsResponse)
}
ListCoverageBucketsResponse::ListCoverageBucketsResponse(const ListCoverageBucketsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      coverage_buckets_(from.coverage_buckets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  bucket_width_ = from.bucket_width_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListCoverageBucketsResponse)
}

void ListCoverageBucketsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_width_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ListCoverageBucketsResponse::~ListCoverageBucketsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListCoverageBucketsResponse)
  SharedDtor();
}

void ListCoverageBucketsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListCoverageBucketsResponse::ArenaDtor(void* object) {
  ListCoverageBucketsResponse* _this = reinterpret_cast< ListCoverageBucketsResponse* >(object);
  (void)_this;
}
void ListCoverageBucketsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListCoverageBucketsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCoverageBucketsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListCoverageBucketsResponse& ListCoverageBucketsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListCoverageBucketsResponse* ListCoverageBucketsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListCoverageBucketsResponse>(arena);
}

void ListCoverageBucketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListCoverageBucketsResponse)
  coverage_buckets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bucket_width_ = GOOGLE_LONGLONG(0);
}

bool ListCoverageBucketsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListCoverageBucketsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 bucket_width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.CoverageBucket coverage_buckets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coverage_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListCoverageBucketsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListCoverageBucketsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListCoverageBucketsResponse)
  return false;
#undef DO_
}

void ListCoverageBucketsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListCoverageBucketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bucket_width = 1;
  if (this->bucket_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bucket_width(), output);
  }

  // repeated .google.genomics.v1.CoverageBucket coverage_buckets = 2;
  for (unsigned int i = 0, n = this->coverage_buckets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->coverage_buckets(i), output);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListCoverageBucketsResponse)
}

::google::protobuf::uint8* ListCoverageBucketsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListCoverageBucketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bucket_width = 1;
  if (this->bucket_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bucket_width(), target);
  }

  // repeated .google.genomics.v1.CoverageBucket coverage_buckets = 2;
  for (unsigned int i = 0, n = this->coverage_buckets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->coverage_buckets(i), deterministic, target);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListCoverageBucketsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListCoverageBucketsResponse)
  return target;
}

size_t ListCoverageBucketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListCoverageBucketsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.CoverageBucket coverage_buckets = 2;
  {
    unsigned int count = this->coverage_buckets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coverage_buckets(i));
    }
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // int64 bucket_width = 1;
  if (this->bucket_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCoverageBucketsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListCoverageBucketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCoverageBucketsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListCoverageBucketsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListCoverageBucketsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListCoverageBucketsResponse)
    MergeFrom(*source);
  }
}

void ListCoverageBucketsResponse::MergeFrom(const ListCoverageBucketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListCoverageBucketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coverage_buckets_.MergeFrom(from.coverage_buckets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
  if (from.bucket_width() != 0) {
    set_bucket_width(from.bucket_width());
  }
}

void ListCoverageBucketsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListCoverageBucketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCoverageBucketsResponse::CopyFrom(const ListCoverageBucketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListCoverageBucketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCoverageBucketsResponse::IsInitialized() const {
  return true;
}

void ListCoverageBucketsResponse::Swap(ListCoverageBucketsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListCoverageBucketsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListCoverageBucketsResponse::UnsafeArenaSwap(ListCoverageBucketsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListCoverageBucketsResponse::InternalSwap(ListCoverageBucketsResponse* other) {
  coverage_buckets_.InternalSwap(&other->coverage_buckets_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(bucket_width_, other->bucket_width_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListCoverageBucketsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListCoverageBucketsResponse

// int64 bucket_width = 1;
void ListCoverageBucketsResponse::clear_bucket_width() {
  bucket_width_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListCoverageBucketsResponse::bucket_width() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsResponse.bucket_width)
  return bucket_width_;
}
void ListCoverageBucketsResponse::set_bucket_width(::google::protobuf::int64 value) {

  bucket_width_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsResponse.bucket_width)
}

// repeated .google.genomics.v1.CoverageBucket coverage_buckets = 2;
int ListCoverageBucketsResponse::coverage_buckets_size() const {
  return coverage_buckets_.size();
}
void ListCoverageBucketsResponse::clear_coverage_buckets() {
  coverage_buckets_.Clear();
}
const ::google::genomics::v1::CoverageBucket& ListCoverageBucketsResponse::coverage_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsResponse.coverage_buckets)
  return coverage_buckets_.Get(index);
}
::google::genomics::v1::CoverageBucket* ListCoverageBucketsResponse::mutable_coverage_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListCoverageBucketsResponse.coverage_buckets)
  return coverage_buckets_.Mutable(index);
}
::google::genomics::v1::CoverageBucket* ListCoverageBucketsResponse::add_coverage_buckets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.ListCoverageBucketsResponse.coverage_buckets)
  return coverage_buckets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::CoverageBucket >*
ListCoverageBucketsResponse::mutable_coverage_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ListCoverageBucketsResponse.coverage_buckets)
  return &coverage_buckets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::CoverageBucket >&
ListCoverageBucketsResponse::coverage_buckets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ListCoverageBucketsResponse.coverage_buckets)
  return coverage_buckets_;
}

// string next_page_token = 3;
void ListCoverageBucketsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListCoverageBucketsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
  return next_page_token_.Get();
}
void ListCoverageBucketsResponse::set_next_page_token(const ::std::string& value) {

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
}
void ListCoverageBucketsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
}
void ListCoverageBucketsResponse::set_next_page_token(const char* value,
    size_t size) {

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
}
::std::string* ListCoverageBucketsResponse::mutable_next_page_token() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)

  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListCoverageBucketsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListCoverageBucketsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {

  } else {

  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
}
void ListCoverageBucketsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {

  } else {

  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListCoverageBucketsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReadsRequest::kReadGroupSetIdsFieldNumber;
const int SearchReadsRequest::kReadGroupIdsFieldNumber;
const int SearchReadsRequest::kReferenceNameFieldNumber;
const int SearchReadsRequest::kStartFieldNumber;
const int SearchReadsRequest::kEndFieldNumber;
const int SearchReadsRequest::kPageTokenFieldNumber;
const int SearchReadsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReadsRequest::SearchReadsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReadsRequest)
}
SearchReadsRequest::SearchReadsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  read_group_set_ids_(arena),
  read_group_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReadsRequest)
}
SearchReadsRequest::SearchReadsRequest(const SearchReadsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      read_group_set_ids_(from.read_group_set_ids_),
      read_group_ids_(from.read_group_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReadsRequest)
}

void SearchReadsRequest::SharedCtor() {
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

SearchReadsRequest::~SearchReadsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReadsRequest)
  SharedDtor();
}

void SearchReadsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReadsRequest::ArenaDtor(void* object) {
  SearchReadsRequest* _this = reinterpret_cast< SearchReadsRequest* >(object);
  (void)_this;
}
void SearchReadsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReadsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReadsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReadsRequest& SearchReadsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReadsRequest* SearchReadsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReadsRequest>(arena);
}

void SearchReadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReadsRequest)
  read_group_set_ids_.Clear();
  read_group_ids_.Clear();
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool SearchReadsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReadsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string read_group_set_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_read_group_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_ids(this->read_group_set_ids_size() - 1).data(),
            this->read_group_set_ids(this->read_group_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadsRequest.read_group_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string read_group_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_read_group_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_ids(this->read_group_ids_size() - 1).data(),
            this->read_group_ids(this->read_group_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadsRequest.read_group_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReadsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReadsRequest)
  return false;
#undef DO_
}

void SearchReadsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReadsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_group_set_ids = 1;
  for (int i = 0, n = this->read_group_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_ids(i).data(), this->read_group_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.read_group_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->read_group_set_ids(i), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_size(), output);
  }

  // repeated string read_group_ids = 5;
  for (int i = 0, n = this->read_group_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_ids(i).data(), this->read_group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.read_group_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->read_group_ids(i), output);
  }

  // string reference_name = 7;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reference_name(), output);
  }

  // int64 start = 8;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start(), output);
  }

  // int64 end = 9;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReadsRequest)
}

::google::protobuf::uint8* SearchReadsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReadsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_group_set_ids = 1;
  for (int i = 0, n = this->read_group_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_ids(i).data(), this->read_group_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.read_group_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->read_group_set_ids(i), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_size(), target);
  }

  // repeated string read_group_ids = 5;
  for (int i = 0, n = this->read_group_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_ids(i).data(), this->read_group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.read_group_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->read_group_ids(i), target);
  }

  // string reference_name = 7;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reference_name(), target);
  }

  // int64 start = 8;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->start(), target);
  }

  // int64 end = 9;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReadsRequest)
  return target;
}

size_t SearchReadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReadsRequest)
  size_t total_size = 0;

  // repeated string read_group_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->read_group_set_ids_size());
  for (int i = 0, n = this->read_group_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->read_group_set_ids(i));
  }

  // repeated string read_group_ids = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->read_group_ids_size());
  for (int i = 0, n = this->read_group_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->read_group_ids(i));
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string reference_name = 7;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // int64 start = 8;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // int64 end = 9;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReadsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReadsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReadsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReadsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReadsRequest)
    MergeFrom(*source);
  }
}

void SearchReadsRequest::MergeFrom(const SearchReadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_group_set_ids_.MergeFrom(from.read_group_set_ids_);
  read_group_ids_.MergeFrom(from.read_group_ids_);
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void SearchReadsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReadsRequest::CopyFrom(const SearchReadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReadsRequest::IsInitialized() const {
  return true;
}

void SearchReadsRequest::Swap(SearchReadsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReadsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReadsRequest::UnsafeArenaSwap(SearchReadsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReadsRequest::InternalSwap(SearchReadsRequest* other) {
  read_group_set_ids_.InternalSwap(&other->read_group_set_ids_);
  read_group_ids_.InternalSwap(&other->read_group_ids_);
  page_token_.Swap(&other->page_token_);
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(page_size_, other->page_size_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReadsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReadsRequest

// repeated string read_group_set_ids = 1;
int SearchReadsRequest::read_group_set_ids_size() const {
  return read_group_set_ids_.size();
}
void SearchReadsRequest::clear_read_group_set_ids() {
  read_group_set_ids_.Clear();
}
const ::std::string& SearchReadsRequest::read_group_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  return read_group_set_ids_.Get(index);
}
::std::string* SearchReadsRequest::mutable_read_group_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  return read_group_set_ids_.Mutable(index);
}
void SearchReadsRequest::set_read_group_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  read_group_set_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReadsRequest::set_read_group_set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  read_group_set_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReadsRequest::set_read_group_set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_group_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
}
void SearchReadsRequest::set_read_group_set_ids(int index, const char* value, size_t size) {
  read_group_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
}
::std::string* SearchReadsRequest::add_read_group_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  return read_group_set_ids_.Add();
}
void SearchReadsRequest::add_read_group_set_ids(const ::std::string& value) {
  read_group_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
}
#if LANG_CXX11
void SearchReadsRequest::add_read_group_set_ids(::std::string&& value) {
  read_group_set_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
}
#endif
void SearchReadsRequest::add_read_group_set_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_group_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
}
void SearchReadsRequest::add_read_group_set_ids(const char* value, size_t size) {
  read_group_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReadsRequest::read_group_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  return read_group_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReadsRequest::mutable_read_group_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReadsRequest.read_group_set_ids)
  return &read_group_set_ids_;
}

// repeated string read_group_ids = 5;
int SearchReadsRequest::read_group_ids_size() const {
  return read_group_ids_.size();
}
void SearchReadsRequest::clear_read_group_ids() {
  read_group_ids_.Clear();
}
const ::std::string& SearchReadsRequest::read_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.read_group_ids)
  return read_group_ids_.Get(index);
}
::std::string* SearchReadsRequest::mutable_read_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadsRequest.read_group_ids)
  return read_group_ids_.Mutable(index);
}
void SearchReadsRequest::set_read_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.read_group_ids)
  read_group_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReadsRequest::set_read_group_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.read_group_ids)
  read_group_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReadsRequest::set_read_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadsRequest.read_group_ids)
}
void SearchReadsRequest::set_read_group_ids(int index, const char* value, size_t size) {
  read_group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadsRequest.read_group_ids)
}
::std::string* SearchReadsRequest::add_read_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReadsRequest.read_group_ids)
  return read_group_ids_.Add();
}
void SearchReadsRequest::add_read_group_ids(const ::std::string& value) {
  read_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadsRequest.read_group_ids)
}
#if LANG_CXX11
void SearchReadsRequest::add_read_group_ids(::std::string&& value) {
  read_group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadsRequest.read_group_ids)
}
#endif
void SearchReadsRequest::add_read_group_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReadsRequest.read_group_ids)
}
void SearchReadsRequest::add_read_group_ids(const char* value, size_t size) {
  read_group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReadsRequest.read_group_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReadsRequest::read_group_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReadsRequest.read_group_ids)
  return read_group_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReadsRequest::mutable_read_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReadsRequest.read_group_ids)
  return &read_group_ids_;
}

// string reference_name = 7;
void SearchReadsRequest::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReadsRequest::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.reference_name)
  return reference_name_.Get();
}
void SearchReadsRequest::set_reference_name(const ::std::string& value) {

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.reference_name)
}
void SearchReadsRequest::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadsRequest.reference_name)
}
void SearchReadsRequest::set_reference_name(const char* value,
    size_t size) {

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadsRequest.reference_name)
}
::std::string* SearchReadsRequest::mutable_reference_name() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadsRequest.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadsRequest::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReadsRequest.reference_name)

  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadsRequest::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReadsRequest.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReadsRequest::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {

  } else {

  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReadsRequest.reference_name)
}
void SearchReadsRequest::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {

  } else {

  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReadsRequest.reference_name)
}

// int64 start = 8;
void SearchReadsRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SearchReadsRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.start)
  return start_;
}
void SearchReadsRequest::set_start(::google::protobuf::int64 value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.start)
}

// int64 end = 9;
void SearchReadsRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SearchReadsRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.end)
  return end_;
}
void SearchReadsRequest::set_end(::google::protobuf::int64 value) {

  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.end)
}

// string page_token = 3;
void SearchReadsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReadsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.page_token)
  return page_token_.Get();
}
void SearchReadsRequest::set_page_token(const ::std::string& value) {

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.page_token)
}
void SearchReadsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadsRequest.page_token)
}
void SearchReadsRequest::set_page_token(const char* value,
    size_t size) {

  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadsRequest.page_token)
}
::std::string* SearchReadsRequest::mutable_page_token() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReadsRequest.page_token)

  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReadsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReadsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {

  } else {

  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReadsRequest.page_token)
}
void SearchReadsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {

  } else {

  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReadsRequest.page_token)
}

// int32 page_size = 4;
void SearchReadsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchReadsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsRequest.page_size)
  return page_size_;
}
void SearchReadsRequest::set_page_size(::google::protobuf::int32 value) {

  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReadsResponse::kAlignmentsFieldNumber;
const int SearchReadsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReadsResponse::SearchReadsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReadsResponse)
}
SearchReadsResponse::SearchReadsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alignments_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReadsResponse)
}
SearchReadsResponse::SearchReadsResponse(const SearchReadsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alignments_(from.alignments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReadsResponse)
}

void SearchReadsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReadsResponse::~SearchReadsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReadsResponse)
  SharedDtor();
}

void SearchReadsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReadsResponse::ArenaDtor(void* object) {
  SearchReadsResponse* _this = reinterpret_cast< SearchReadsResponse* >(object);
  (void)_this;
}
void SearchReadsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReadsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReadsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReadsResponse& SearchReadsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReadsResponse* SearchReadsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReadsResponse>(arena);
}

void SearchReadsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReadsResponse)
  alignments_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SearchReadsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReadsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Read alignments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alignments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReadsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReadsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReadsResponse)
  return false;
#undef DO_
}

void SearchReadsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReadsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Read alignments = 1;
  for (unsigned int i = 0, n = this->alignments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alignments(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReadsResponse)
}

::google::protobuf::uint8* SearchReadsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReadsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Read alignments = 1;
  for (unsigned int i = 0, n = this->alignments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->alignments(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReadsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReadsResponse)
  return target;
}

size_t SearchReadsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReadsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Read alignments = 1;
  {
    unsigned int count = this->alignments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alignments(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReadsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReadsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReadsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReadsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReadsResponse)
    MergeFrom(*source);
  }
}

void SearchReadsResponse::MergeFrom(const SearchReadsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alignments_.MergeFrom(from.alignments_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReadsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReadsResponse::CopyFrom(const SearchReadsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReadsResponse::IsInitialized() const {
  return true;
}

void SearchReadsResponse::Swap(SearchReadsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReadsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReadsResponse::UnsafeArenaSwap(SearchReadsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReadsResponse::InternalSwap(SearchReadsResponse* other) {
  alignments_.InternalSwap(&other->alignments_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReadsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReadsResponse

// repeated .google.genomics.v1.Read alignments = 1;
int SearchReadsResponse::alignments_size() const {
  return alignments_.size();
}
void SearchReadsResponse::clear_alignments() {
  alignments_.Clear();
}
const ::google::genomics::v1::Read& SearchReadsResponse::alignments(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsResponse.alignments)
  return alignments_.Get(index);
}
::google::genomics::v1::Read* SearchReadsResponse::mutable_alignments(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadsResponse.alignments)
  return alignments_.Mutable(index);
}
::google::genomics::v1::Read* SearchReadsResponse::add_alignments() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReadsResponse.alignments)
  return alignments_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Read >*
SearchReadsResponse::mutable_alignments() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReadsResponse.alignments)
  return &alignments_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Read >&
SearchReadsResponse::alignments() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReadsResponse.alignments)
  return alignments_;
}

// string next_page_token = 2;
void SearchReadsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReadsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReadsResponse.next_page_token)
  return next_page_token_.Get();
}
void SearchReadsResponse::set_next_page_token(const ::std::string& value) {

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReadsResponse.next_page_token)
}
void SearchReadsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReadsResponse.next_page_token)
}
void SearchReadsResponse::set_next_page_token(const char* value,
    size_t size) {

  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReadsResponse.next_page_token)
}
::std::string* SearchReadsResponse::mutable_next_page_token() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReadsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReadsResponse.next_page_token)

  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReadsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReadsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReadsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {

  } else {

  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReadsResponse.next_page_token)
}
void SearchReadsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {

  } else {

  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReadsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamReadsRequest::kProjectIdFieldNumber;
const int StreamReadsRequest::kReadGroupSetIdFieldNumber;
const int StreamReadsRequest::kReferenceNameFieldNumber;
const int StreamReadsRequest::kStartFieldNumber;
const int StreamReadsRequest::kEndFieldNumber;
const int StreamReadsRequest::kShardFieldNumber;
const int StreamReadsRequest::kTotalShardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamReadsRequest::StreamReadsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.StreamReadsRequest)
}
StreamReadsRequest::StreamReadsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.StreamReadsRequest)
}
StreamReadsRequest::StreamReadsRequest(const StreamReadsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id(),
      GetArenaNoVirtual());
  }
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&total_shards_) -
    reinterpret_cast<char*>(&start_) + sizeof(total_shards_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.StreamReadsRequest)
}

void StreamReadsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&total_shards_) -
    reinterpret_cast<char*>(&start_) + sizeof(total_shards_));
  _cached_size_ = 0;
}

StreamReadsRequest::~StreamReadsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.StreamReadsRequest)
  SharedDtor();
}

void StreamReadsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  read_group_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamReadsRequest::ArenaDtor(void* object) {
  StreamReadsRequest* _this = reinterpret_cast< StreamReadsRequest* >(object);
  (void)_this;
}
void StreamReadsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamReadsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamReadsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamReadsRequest& StreamReadsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamReadsRequest* StreamReadsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamReadsRequest>(arena);
}

void StreamReadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.StreamReadsRequest)
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, reinterpret_cast<char*>(&total_shards_) -
    reinterpret_cast<char*>(&start_) + sizeof(total_shards_));
}

bool StreamReadsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.StreamReadsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamReadsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group_set_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), this->read_group_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamReadsRequest.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamReadsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shard = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_shards = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_shards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.StreamReadsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.StreamReadsRequest)
  return false;
#undef DO_
}

void StreamReadsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.StreamReadsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamReadsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string read_group_set_id = 2;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamReadsRequest.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->read_group_set_id(), output);
  }

  // string reference_name = 3;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamReadsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_name(), output);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(), output);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(), output);
  }

  // int32 shard = 6;
  if (this->shard() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shard(), output);
  }

  // int32 total_shards = 7;
  if (this->total_shards() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_shards(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.StreamReadsRequest)
}

::google::protobuf::uint8* StreamReadsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.StreamReadsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamReadsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string read_group_set_id = 2;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), this->read_group_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamReadsRequest.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->read_group_set_id(), target);
  }

  // string reference_name = 3;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamReadsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_name(), target);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start(), target);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end(), target);
  }

  // int32 shard = 6;
  if (this->shard() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shard(), target);
  }

  // int32 total_shards = 7;
  if (this->total_shards() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_shards(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.StreamReadsRequest)
  return target;
}

size_t StreamReadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.StreamReadsRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string read_group_set_id = 2;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  // string reference_name = 3;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // int64 start = 4;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 5;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int32 shard = 6;
  if (this->shard() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard());
  }

  // int32 total_shards = 7;
  if (this->total_shards() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_shards());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamReadsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.StreamReadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamReadsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamReadsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.StreamReadsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.StreamReadsRequest)
    MergeFrom(*source);
  }
}

void StreamReadsRequest::MergeFrom(const StreamReadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.StreamReadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.shard() != 0) {
    set_shard(from.shard());
  }
  if (from.total_shards() != 0) {
    set_total_shards(from.total_shards());
  }
}

void StreamReadsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.StreamReadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamReadsRequest::CopyFrom(const StreamReadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.StreamReadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamReadsRequest::IsInitialized() const {
  return true;
}

void StreamReadsRequest::Swap(StreamReadsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamReadsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamReadsRequest::UnsafeArenaSwap(StreamReadsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamReadsRequest::InternalSwap(StreamReadsRequest* other) {
  project_id_.Swap(&other->project_id_);
  read_group_set_id_.Swap(&other->read_group_set_id_);
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(shard_, other->shard_);
  std::swap(total_shards_, other->total_shards_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamReadsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamReadsRequest

// string project_id = 1;
void StreamReadsRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamReadsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.project_id)
  return project_id_.Get();
}
void StreamReadsRequest::set_project_id(const ::std::string& value) {

  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.project_id)
}
void StreamReadsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamReadsRequest.project_id)
}
void StreamReadsRequest::set_project_id(const char* value,
    size_t size) {

  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamReadsRequest.project_id)
}
::std::string* StreamReadsRequest::mutable_project_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamReadsRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamReadsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.StreamReadsRequest.project_id)

  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamReadsRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.StreamReadsRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamReadsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {

  } else {

  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.StreamReadsRequest.project_id)
}
void StreamReadsRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {

  } else {

  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.StreamReadsRequest.project_id)
}

// string read_group_set_id = 2;
void StreamReadsRequest::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamReadsRequest::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.read_group_set_id)
  return read_group_set_id_.Get();
}
void StreamReadsRequest::set_read_group_set_id(const ::std::string& value) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.read_group_set_id)
}
void StreamReadsRequest::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamReadsRequest.read_group_set_id)
}
void StreamReadsRequest::set_read_group_set_id(const char* value,
    size_t size) {

  read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamReadsRequest.read_group_set_id)
}
::std::string* StreamReadsRequest::mutable_read_group_set_id() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamReadsRequest.read_group_set_id)
  return read_group_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamReadsRequest::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.StreamReadsRequest.read_group_set_id)

  return read_group_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamReadsRequest::unsafe_arena_release_read_group_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.StreamReadsRequest.read_group_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return read_group_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamReadsRequest::set_allocated_read_group_set_id(::std::string* read_group_set_id) {
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.StreamReadsRequest.read_group_set_id)
}
void StreamReadsRequest::unsafe_arena_set_allocated_read_group_set_id(
    ::std::string* read_group_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (read_group_set_id != NULL) {

  } else {

  }
  read_group_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      read_group_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.StreamReadsRequest.read_group_set_id)
}

// string reference_name = 3;
void StreamReadsRequest::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamReadsRequest::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.reference_name)
  return reference_name_.Get();
}
void StreamReadsRequest::set_reference_name(const ::std::string& value) {

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.reference_name)
}
void StreamReadsRequest::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamReadsRequest.reference_name)
}
void StreamReadsRequest::set_reference_name(const char* value,
    size_t size) {

  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamReadsRequest.reference_name)
}
::std::string* StreamReadsRequest::mutable_reference_name() {

  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamReadsRequest.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamReadsRequest::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.StreamReadsRequest.reference_name)

  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamReadsRequest::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.StreamReadsRequest.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamReadsRequest::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {

  } else {

  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.StreamReadsRequest.reference_name)
}
void StreamReadsRequest::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {

  } else {

  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.StreamReadsRequest.reference_name)
}

// int64 start = 4;
void StreamReadsRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StreamReadsRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.start)
  return start_;
}
void StreamReadsRequest::set_start(::google::protobuf::int64 value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.start)
}

// int64 end = 5;
void StreamReadsRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StreamReadsRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.end)
  return end_;
}
void StreamReadsRequest::set_end(::google::protobuf::int64 value) {

  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.end)
}

// int32 shard = 6;
void StreamReadsRequest::clear_shard() {
  shard_ = 0;
}
::google::protobuf::int32 StreamReadsRequest::shard() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.shard)
  return shard_;
}
void StreamReadsRequest::set_shard(::google::protobuf::int32 value) {

  shard_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.shard)
}

// int32 total_shards = 7;
void StreamReadsRequest::clear_total_shards() {
  total_shards_ = 0;
}
::google::protobuf::int32 StreamReadsRequest::total_shards() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsRequest.total_shards)
  return total_shards_;
}
void StreamReadsRequest::set_total_shards(::google::protobuf::int32 value) {

  total_shards_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamReadsRequest.total_shards)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamReadsResponse::kAlignmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamReadsResponse::StreamReadsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.StreamReadsResponse)
}
StreamReadsResponse::StreamReadsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alignments_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.StreamReadsResponse)
}
StreamReadsResponse::StreamReadsResponse(const StreamReadsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alignments_(from.alignments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.StreamReadsResponse)
}

void StreamReadsResponse::SharedCtor() {
  _cached_size_ = 0;
}

StreamReadsResponse::~StreamReadsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.StreamReadsResponse)
  SharedDtor();
}

void StreamReadsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void StreamReadsResponse::ArenaDtor(void* object) {
  StreamReadsResponse* _this = reinterpret_cast< StreamReadsResponse* >(object);
  (void)_this;
}
void StreamReadsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamReadsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamReadsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamReadsResponse& StreamReadsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamReadsResponse* StreamReadsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamReadsResponse>(arena);
}

void StreamReadsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.StreamReadsResponse)
  alignments_.Clear();
}

bool StreamReadsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.StreamReadsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Read alignments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alignments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.StreamReadsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.StreamReadsResponse)
  return false;
#undef DO_
}

void StreamReadsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.StreamReadsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Read alignments = 1;
  for (unsigned int i = 0, n = this->alignments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alignments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.StreamReadsResponse)
}

::google::protobuf::uint8* StreamReadsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.StreamReadsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Read alignments = 1;
  for (unsigned int i = 0, n = this->alignments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->alignments(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.StreamReadsResponse)
  return target;
}

size_t StreamReadsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.StreamReadsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Read alignments = 1;
  {
    unsigned int count = this->alignments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alignments(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamReadsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.StreamReadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamReadsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamReadsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.StreamReadsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.StreamReadsResponse)
    MergeFrom(*source);
  }
}

void StreamReadsResponse::MergeFrom(const StreamReadsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.StreamReadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alignments_.MergeFrom(from.alignments_);
}

void StreamReadsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.StreamReadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamReadsResponse::CopyFrom(const StreamReadsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.StreamReadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamReadsResponse::IsInitialized() const {
  return true;
}

void StreamReadsResponse::Swap(StreamReadsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamReadsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamReadsResponse::UnsafeArenaSwap(StreamReadsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamReadsResponse::InternalSwap(StreamReadsResponse* other) {
  alignments_.InternalSwap(&other->alignments_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamReadsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freads_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freads_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamReadsResponse

// repeated .google.genomics.v1.Read alignments = 1;
int StreamReadsResponse::alignments_size() const {
  return alignments_.size();
}
void StreamReadsResponse::clear_alignments() {
  alignments_.Clear();
}
const ::google::genomics::v1::Read& StreamReadsResponse::alignments(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamReadsResponse.alignments)
  return alignments_.Get(index);
}
::google::genomics::v1::Read* StreamReadsResponse::mutable_alignments(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamReadsResponse.alignments)
  return alignments_.Mutable(index);
}
::google::genomics::v1::Read* StreamReadsResponse::add_alignments() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.StreamReadsResponse.alignments)
  return alignments_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Read >*
StreamReadsResponse::mutable_alignments() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.StreamReadsResponse.alignments)
  return &alignments_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Read >&
StreamReadsResponse::alignments() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.StreamReadsResponse.alignments)
  return alignments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
