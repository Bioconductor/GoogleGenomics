// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/references.proto

#ifndef PROTOBUF_google_2fgenomics_2fv1_2freferences_2eproto__INCLUDED
#define PROTOBUF_google_2fgenomics_2fv1_2freferences_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace genomics {
namespace v1 {
class GetReferenceRequest;
class GetReferenceRequestDefaultTypeInternal;
extern GetReferenceRequestDefaultTypeInternal _GetReferenceRequest_default_instance_;
class GetReferenceSetRequest;
class GetReferenceSetRequestDefaultTypeInternal;
extern GetReferenceSetRequestDefaultTypeInternal _GetReferenceSetRequest_default_instance_;
class ListBasesRequest;
class ListBasesRequestDefaultTypeInternal;
extern ListBasesRequestDefaultTypeInternal _ListBasesRequest_default_instance_;
class ListBasesResponse;
class ListBasesResponseDefaultTypeInternal;
extern ListBasesResponseDefaultTypeInternal _ListBasesResponse_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class ReferenceSet;
class ReferenceSetDefaultTypeInternal;
extern ReferenceSetDefaultTypeInternal _ReferenceSet_default_instance_;
class SearchReferenceSetsRequest;
class SearchReferenceSetsRequestDefaultTypeInternal;
extern SearchReferenceSetsRequestDefaultTypeInternal _SearchReferenceSetsRequest_default_instance_;
class SearchReferenceSetsResponse;
class SearchReferenceSetsResponseDefaultTypeInternal;
extern SearchReferenceSetsResponseDefaultTypeInternal _SearchReferenceSetsResponse_default_instance_;
class SearchReferencesRequest;
class SearchReferencesRequestDefaultTypeInternal;
extern SearchReferencesRequestDefaultTypeInternal _SearchReferencesRequest_default_instance_;
class SearchReferencesResponse;
class SearchReferencesResponseDefaultTypeInternal;
extern SearchReferencesResponseDefaultTypeInternal _SearchReferencesResponse_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace google

namespace google {
namespace genomics {
namespace v1 {

namespace protobuf_google_2fgenomics_2fv1_2freferences_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2fgenomics_2fv1_2freferences_2eproto

// ===================================================================

class Reference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Reference* other);
  void Swap(Reference* other);

  // implements Message ----------------------------------------------

  inline Reference* New() const PROTOBUF_FINAL { return New(NULL); }

  Reference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reference* other);
  protected:
  explicit Reference(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string source_accessions = 6;
  int source_accessions_size() const;
  void clear_source_accessions();
  static const int kSourceAccessionsFieldNumber = 6;
  const ::std::string& source_accessions(int index) const;
  ::std::string* mutable_source_accessions(int index);
  void set_source_accessions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_source_accessions(int index, ::std::string&& value);
  #endif
  void set_source_accessions(int index, const char* value);
  void set_source_accessions(int index, const char* value, size_t size);
  ::std::string* add_source_accessions();
  void add_source_accessions(const ::std::string& value);
  #if LANG_CXX11
  void add_source_accessions(::std::string&& value);
  #endif
  void add_source_accessions(const char* value);
  void add_source_accessions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& source_accessions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_source_accessions();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string md5checksum = 3;
  void clear_md5checksum();
  static const int kMd5ChecksumFieldNumber = 3;
  const ::std::string& md5checksum() const;
  void set_md5checksum(const ::std::string& value);
  void set_md5checksum(const char* value);
  void set_md5checksum(const char* value, size_t size);
  ::std::string* mutable_md5checksum();
  ::std::string* release_md5checksum();
  void set_allocated_md5checksum(::std::string* md5checksum);
  ::std::string* unsafe_arena_release_md5checksum();
  void unsafe_arena_set_allocated_md5checksum(
      ::std::string* md5checksum);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string source_uri = 5;
  void clear_source_uri();
  static const int kSourceUriFieldNumber = 5;
  const ::std::string& source_uri() const;
  void set_source_uri(const ::std::string& value);
  void set_source_uri(const char* value);
  void set_source_uri(const char* value, size_t size);
  ::std::string* mutable_source_uri();
  ::std::string* release_source_uri();
  void set_allocated_source_uri(::std::string* source_uri);
  ::std::string* unsafe_arena_release_source_uri();
  void unsafe_arena_set_allocated_source_uri(
      ::std::string* source_uri);

  // int64 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::int64 length() const;
  void set_length(::google::protobuf::int64 value);

  // int32 ncbi_taxon_id = 7;
  void clear_ncbi_taxon_id();
  static const int kNcbiTaxonIdFieldNumber = 7;
  ::google::protobuf::int32 ncbi_taxon_id() const;
  void set_ncbi_taxon_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.Reference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> source_accessions_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr md5checksum_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr source_uri_;
  ::google::protobuf::int64 length_;
  ::google::protobuf::int32 ncbi_taxon_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.ReferenceSet) */ {
 public:
  ReferenceSet();
  virtual ~ReferenceSet();

  ReferenceSet(const ReferenceSet& from);

  inline ReferenceSet& operator=(const ReferenceSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceSet& default_instance();

  static inline const ReferenceSet* internal_default_instance() {
    return reinterpret_cast<const ReferenceSet*>(
               &_ReferenceSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ReferenceSet* other);
  void Swap(ReferenceSet* other);

  // implements Message ----------------------------------------------

  inline ReferenceSet* New() const PROTOBUF_FINAL { return New(NULL); }

  ReferenceSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReferenceSet& from);
  void MergeFrom(const ReferenceSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReferenceSet* other);
  protected:
  explicit ReferenceSet(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string reference_ids = 2;
  int reference_ids_size() const;
  void clear_reference_ids();
  static const int kReferenceIdsFieldNumber = 2;
  const ::std::string& reference_ids(int index) const;
  ::std::string* mutable_reference_ids(int index);
  void set_reference_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reference_ids(int index, ::std::string&& value);
  #endif
  void set_reference_ids(int index, const char* value);
  void set_reference_ids(int index, const char* value, size_t size);
  ::std::string* add_reference_ids();
  void add_reference_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_reference_ids(::std::string&& value);
  #endif
  void add_reference_ids(const char* value);
  void add_reference_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reference_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reference_ids();

  // repeated string source_accessions = 8;
  int source_accessions_size() const;
  void clear_source_accessions();
  static const int kSourceAccessionsFieldNumber = 8;
  const ::std::string& source_accessions(int index) const;
  ::std::string* mutable_source_accessions(int index);
  void set_source_accessions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_source_accessions(int index, ::std::string&& value);
  #endif
  void set_source_accessions(int index, const char* value);
  void set_source_accessions(int index, const char* value, size_t size);
  ::std::string* add_source_accessions();
  void add_source_accessions(const ::std::string& value);
  #if LANG_CXX11
  void add_source_accessions(::std::string&& value);
  #endif
  void add_source_accessions(const char* value);
  void add_source_accessions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& source_accessions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_source_accessions();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string md5checksum = 3;
  void clear_md5checksum();
  static const int kMd5ChecksumFieldNumber = 3;
  const ::std::string& md5checksum() const;
  void set_md5checksum(const ::std::string& value);
  void set_md5checksum(const char* value);
  void set_md5checksum(const char* value, size_t size);
  ::std::string* mutable_md5checksum();
  ::std::string* release_md5checksum();
  void set_allocated_md5checksum(::std::string* md5checksum);
  ::std::string* unsafe_arena_release_md5checksum();
  void unsafe_arena_set_allocated_md5checksum(
      ::std::string* md5checksum);

  // string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  ::std::string* unsafe_arena_release_description();
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // string assembly_id = 6;
  void clear_assembly_id();
  static const int kAssemblyIdFieldNumber = 6;
  const ::std::string& assembly_id() const;
  void set_assembly_id(const ::std::string& value);
  void set_assembly_id(const char* value);
  void set_assembly_id(const char* value, size_t size);
  ::std::string* mutable_assembly_id();
  ::std::string* release_assembly_id();
  void set_allocated_assembly_id(::std::string* assembly_id);
  ::std::string* unsafe_arena_release_assembly_id();
  void unsafe_arena_set_allocated_assembly_id(
      ::std::string* assembly_id);

  // string source_uri = 7;
  void clear_source_uri();
  static const int kSourceUriFieldNumber = 7;
  const ::std::string& source_uri() const;
  void set_source_uri(const ::std::string& value);
  void set_source_uri(const char* value);
  void set_source_uri(const char* value, size_t size);
  ::std::string* mutable_source_uri();
  ::std::string* release_source_uri();
  void set_allocated_source_uri(::std::string* source_uri);
  ::std::string* unsafe_arena_release_source_uri();
  void unsafe_arena_set_allocated_source_uri(
      ::std::string* source_uri);

  // int32 ncbi_taxon_id = 4;
  void clear_ncbi_taxon_id();
  static const int kNcbiTaxonIdFieldNumber = 4;
  ::google::protobuf::int32 ncbi_taxon_id() const;
  void set_ncbi_taxon_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.ReferenceSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reference_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> source_accessions_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr md5checksum_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr assembly_id_;
  ::google::protobuf::internal::ArenaStringPtr source_uri_;
  ::google::protobuf::int32 ncbi_taxon_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchReferenceSetsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.SearchReferenceSetsRequest) */ {
 public:
  SearchReferenceSetsRequest();
  virtual ~SearchReferenceSetsRequest();

  SearchReferenceSetsRequest(const SearchReferenceSetsRequest& from);

  inline SearchReferenceSetsRequest& operator=(const SearchReferenceSetsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReferenceSetsRequest& default_instance();

  static inline const SearchReferenceSetsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchReferenceSetsRequest*>(
               &_SearchReferenceSetsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(SearchReferenceSetsRequest* other);
  void Swap(SearchReferenceSetsRequest* other);

  // implements Message ----------------------------------------------

  inline SearchReferenceSetsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReferenceSetsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReferenceSetsRequest& from);
  void MergeFrom(const SearchReferenceSetsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReferenceSetsRequest* other);
  protected:
  explicit SearchReferenceSetsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string md5checksums = 1;
  int md5checksums_size() const;
  void clear_md5checksums();
  static const int kMd5ChecksumsFieldNumber = 1;
  const ::std::string& md5checksums(int index) const;
  ::std::string* mutable_md5checksums(int index);
  void set_md5checksums(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_md5checksums(int index, ::std::string&& value);
  #endif
  void set_md5checksums(int index, const char* value);
  void set_md5checksums(int index, const char* value, size_t size);
  ::std::string* add_md5checksums();
  void add_md5checksums(const ::std::string& value);
  #if LANG_CXX11
  void add_md5checksums(::std::string&& value);
  #endif
  void add_md5checksums(const char* value);
  void add_md5checksums(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& md5checksums() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5checksums();

  // repeated string accessions = 2;
  int accessions_size() const;
  void clear_accessions();
  static const int kAccessionsFieldNumber = 2;
  const ::std::string& accessions(int index) const;
  ::std::string* mutable_accessions(int index);
  void set_accessions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_accessions(int index, ::std::string&& value);
  #endif
  void set_accessions(int index, const char* value);
  void set_accessions(int index, const char* value, size_t size);
  ::std::string* add_accessions();
  void add_accessions(const ::std::string& value);
  #if LANG_CXX11
  void add_accessions(::std::string&& value);
  #endif
  void add_accessions(const char* value);
  void add_accessions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& accessions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accessions();

  // string assembly_id = 3;
  void clear_assembly_id();
  static const int kAssemblyIdFieldNumber = 3;
  const ::std::string& assembly_id() const;
  void set_assembly_id(const ::std::string& value);
  void set_assembly_id(const char* value);
  void set_assembly_id(const char* value, size_t size);
  ::std::string* mutable_assembly_id();
  ::std::string* release_assembly_id();
  void set_allocated_assembly_id(::std::string* assembly_id);
  ::std::string* unsafe_arena_release_assembly_id();
  void unsafe_arena_set_allocated_assembly_id(
      ::std::string* assembly_id);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 5;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 5;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.SearchReferenceSetsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5checksums_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accessions_;
  ::google::protobuf::internal::ArenaStringPtr assembly_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchReferenceSetsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.SearchReferenceSetsResponse) */ {
 public:
  SearchReferenceSetsResponse();
  virtual ~SearchReferenceSetsResponse();

  SearchReferenceSetsResponse(const SearchReferenceSetsResponse& from);

  inline SearchReferenceSetsResponse& operator=(const SearchReferenceSetsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReferenceSetsResponse& default_instance();

  static inline const SearchReferenceSetsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchReferenceSetsResponse*>(
               &_SearchReferenceSetsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(SearchReferenceSetsResponse* other);
  void Swap(SearchReferenceSetsResponse* other);

  // implements Message ----------------------------------------------

  inline SearchReferenceSetsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReferenceSetsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReferenceSetsResponse& from);
  void MergeFrom(const SearchReferenceSetsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReferenceSetsResponse* other);
  protected:
  explicit SearchReferenceSetsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  int reference_sets_size() const;
  void clear_reference_sets();
  static const int kReferenceSetsFieldNumber = 1;
  const ::google::genomics::v1::ReferenceSet& reference_sets(int index) const;
  ::google::genomics::v1::ReferenceSet* mutable_reference_sets(int index);
  ::google::genomics::v1::ReferenceSet* add_reference_sets();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >*
      mutable_reference_sets();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >&
      reference_sets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.SearchReferenceSetsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet > reference_sets_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetReferenceSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.GetReferenceSetRequest) */ {
 public:
  GetReferenceSetRequest();
  virtual ~GetReferenceSetRequest();

  GetReferenceSetRequest(const GetReferenceSetRequest& from);

  inline GetReferenceSetRequest& operator=(const GetReferenceSetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetReferenceSetRequest& default_instance();

  static inline const GetReferenceSetRequest* internal_default_instance() {
    return reinterpret_cast<const GetReferenceSetRequest*>(
               &_GetReferenceSetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(GetReferenceSetRequest* other);
  void Swap(GetReferenceSetRequest* other);

  // implements Message ----------------------------------------------

  inline GetReferenceSetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetReferenceSetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetReferenceSetRequest& from);
  void MergeFrom(const GetReferenceSetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetReferenceSetRequest* other);
  protected:
  explicit GetReferenceSetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reference_set_id = 1;
  void clear_reference_set_id();
  static const int kReferenceSetIdFieldNumber = 1;
  const ::std::string& reference_set_id() const;
  void set_reference_set_id(const ::std::string& value);
  void set_reference_set_id(const char* value);
  void set_reference_set_id(const char* value, size_t size);
  ::std::string* mutable_reference_set_id();
  ::std::string* release_reference_set_id();
  void set_allocated_reference_set_id(::std::string* reference_set_id);
  ::std::string* unsafe_arena_release_reference_set_id();
  void unsafe_arena_set_allocated_reference_set_id(
      ::std::string* reference_set_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.GetReferenceSetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr reference_set_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchReferencesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.SearchReferencesRequest) */ {
 public:
  SearchReferencesRequest();
  virtual ~SearchReferencesRequest();

  SearchReferencesRequest(const SearchReferencesRequest& from);

  inline SearchReferencesRequest& operator=(const SearchReferencesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReferencesRequest& default_instance();

  static inline const SearchReferencesRequest* internal_default_instance() {
    return reinterpret_cast<const SearchReferencesRequest*>(
               &_SearchReferencesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(SearchReferencesRequest* other);
  void Swap(SearchReferencesRequest* other);

  // implements Message ----------------------------------------------

  inline SearchReferencesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReferencesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReferencesRequest& from);
  void MergeFrom(const SearchReferencesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReferencesRequest* other);
  protected:
  explicit SearchReferencesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string md5checksums = 1;
  int md5checksums_size() const;
  void clear_md5checksums();
  static const int kMd5ChecksumsFieldNumber = 1;
  const ::std::string& md5checksums(int index) const;
  ::std::string* mutable_md5checksums(int index);
  void set_md5checksums(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_md5checksums(int index, ::std::string&& value);
  #endif
  void set_md5checksums(int index, const char* value);
  void set_md5checksums(int index, const char* value, size_t size);
  ::std::string* add_md5checksums();
  void add_md5checksums(const ::std::string& value);
  #if LANG_CXX11
  void add_md5checksums(::std::string&& value);
  #endif
  void add_md5checksums(const char* value);
  void add_md5checksums(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& md5checksums() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5checksums();

  // repeated string accessions = 2;
  int accessions_size() const;
  void clear_accessions();
  static const int kAccessionsFieldNumber = 2;
  const ::std::string& accessions(int index) const;
  ::std::string* mutable_accessions(int index);
  void set_accessions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_accessions(int index, ::std::string&& value);
  #endif
  void set_accessions(int index, const char* value);
  void set_accessions(int index, const char* value, size_t size);
  ::std::string* add_accessions();
  void add_accessions(const ::std::string& value);
  #if LANG_CXX11
  void add_accessions(::std::string&& value);
  #endif
  void add_accessions(const char* value);
  void add_accessions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& accessions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accessions();

  // string reference_set_id = 3;
  void clear_reference_set_id();
  static const int kReferenceSetIdFieldNumber = 3;
  const ::std::string& reference_set_id() const;
  void set_reference_set_id(const ::std::string& value);
  void set_reference_set_id(const char* value);
  void set_reference_set_id(const char* value, size_t size);
  ::std::string* mutable_reference_set_id();
  ::std::string* release_reference_set_id();
  void set_allocated_reference_set_id(::std::string* reference_set_id);
  ::std::string* unsafe_arena_release_reference_set_id();
  void unsafe_arena_set_allocated_reference_set_id(
      ::std::string* reference_set_id);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 5;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 5;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.SearchReferencesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5checksums_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accessions_;
  ::google::protobuf::internal::ArenaStringPtr reference_set_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchReferencesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.SearchReferencesResponse) */ {
 public:
  SearchReferencesResponse();
  virtual ~SearchReferencesResponse();

  SearchReferencesResponse(const SearchReferencesResponse& from);

  inline SearchReferencesResponse& operator=(const SearchReferencesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReferencesResponse& default_instance();

  static inline const SearchReferencesResponse* internal_default_instance() {
    return reinterpret_cast<const SearchReferencesResponse*>(
               &_SearchReferencesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(SearchReferencesResponse* other);
  void Swap(SearchReferencesResponse* other);

  // implements Message ----------------------------------------------

  inline SearchReferencesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReferencesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReferencesResponse& from);
  void MergeFrom(const SearchReferencesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReferencesResponse* other);
  protected:
  explicit SearchReferencesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1.Reference references = 1;
  int references_size() const;
  void clear_references();
  static const int kReferencesFieldNumber = 1;
  const ::google::genomics::v1::Reference& references(int index) const;
  ::google::genomics::v1::Reference* mutable_references(int index);
  ::google::genomics::v1::Reference* add_references();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >*
      mutable_references();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >&
      references() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.SearchReferencesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference > references_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetReferenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.GetReferenceRequest) */ {
 public:
  GetReferenceRequest();
  virtual ~GetReferenceRequest();

  GetReferenceRequest(const GetReferenceRequest& from);

  inline GetReferenceRequest& operator=(const GetReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetReferenceRequest& default_instance();

  static inline const GetReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const GetReferenceRequest*>(
               &_GetReferenceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(GetReferenceRequest* other);
  void Swap(GetReferenceRequest* other);

  // implements Message ----------------------------------------------

  inline GetReferenceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetReferenceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetReferenceRequest& from);
  void MergeFrom(const GetReferenceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetReferenceRequest* other);
  protected:
  explicit GetReferenceRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reference_id = 1;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& reference_id() const;
  void set_reference_id(const ::std::string& value);
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  ::std::string* mutable_reference_id();
  ::std::string* release_reference_id();
  void set_allocated_reference_id(::std::string* reference_id);
  ::std::string* unsafe_arena_release_reference_id();
  void unsafe_arena_set_allocated_reference_id(
      ::std::string* reference_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.GetReferenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr reference_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListBasesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.ListBasesRequest) */ {
 public:
  ListBasesRequest();
  virtual ~ListBasesRequest();

  ListBasesRequest(const ListBasesRequest& from);

  inline ListBasesRequest& operator=(const ListBasesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBasesRequest& default_instance();

  static inline const ListBasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListBasesRequest*>(
               &_ListBasesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ListBasesRequest* other);
  void Swap(ListBasesRequest* other);

  // implements Message ----------------------------------------------

  inline ListBasesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListBasesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListBasesRequest& from);
  void MergeFrom(const ListBasesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListBasesRequest* other);
  protected:
  explicit ListBasesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reference_id = 1;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& reference_id() const;
  void set_reference_id(const ::std::string& value);
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  ::std::string* mutable_reference_id();
  ::std::string* release_reference_id();
  void set_allocated_reference_id(::std::string* reference_id);
  ::std::string* unsafe_arena_release_reference_id();
  void unsafe_arena_set_allocated_reference_id(
      ::std::string* reference_id);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int64 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // int32 page_size = 5;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 5;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.ListBasesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr reference_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListBasesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1.ListBasesResponse) */ {
 public:
  ListBasesResponse();
  virtual ~ListBasesResponse();

  ListBasesResponse(const ListBasesResponse& from);

  inline ListBasesResponse& operator=(const ListBasesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBasesResponse& default_instance();

  static inline const ListBasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListBasesResponse*>(
               &_ListBasesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ListBasesResponse* other);
  void Swap(ListBasesResponse* other);

  // implements Message ----------------------------------------------

  inline ListBasesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListBasesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListBasesResponse& from);
  void MergeFrom(const ListBasesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListBasesResponse* other);
  protected:
  explicit ListBasesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  const ::std::string& sequence() const;
  void set_sequence(const ::std::string& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  ::std::string* mutable_sequence();
  ::std::string* release_sequence();
  void set_allocated_sequence(::std::string* sequence);
  ::std::string* unsafe_arena_release_sequence();
  void unsafe_arena_set_allocated_sequence(
      ::std::string* sequence);

  // string next_page_token = 3;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 3;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // int64 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1.ListBasesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr sequence_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  ::google::protobuf::int64 offset_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fgenomics_2fv1_2freferences_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Reference

// string id = 1;
inline void Reference::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Reference::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.id)
  return id_.Get();
}
inline void Reference::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.id)
}
inline void Reference::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.id)
}
inline void Reference::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.id)
}
inline ::std::string* Reference::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Reference::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.id)
}
inline void Reference::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.id)
}

// int64 length = 2;
inline void Reference::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Reference::length() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.length)
  return length_;
}
inline void Reference::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.length)
}

// string md5checksum = 3;
inline void Reference::clear_md5checksum() {
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Reference::md5checksum() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.md5checksum)
  return md5checksum_.Get();
}
inline void Reference::set_md5checksum(const ::std::string& value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.md5checksum)
}
inline void Reference::set_md5checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.md5checksum)
}
inline void Reference::set_md5checksum(const char* value,
    size_t size) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.md5checksum)
}
inline ::std::string* Reference::mutable_md5checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.md5checksum)
  return md5checksum_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::release_md5checksum() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.md5checksum)
  
  return md5checksum_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::unsafe_arena_release_md5checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.md5checksum)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return md5checksum_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Reference::set_allocated_md5checksum(::std::string* md5checksum) {
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5checksum,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.md5checksum)
}
inline void Reference::unsafe_arena_set_allocated_md5checksum(
    ::std::string* md5checksum) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      md5checksum, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.md5checksum)
}

// string name = 4;
inline void Reference::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Reference::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.name)
  return name_.Get();
}
inline void Reference::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.name)
}
inline void Reference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.name)
}
inline void Reference::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.name)
}
inline ::std::string* Reference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Reference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.name)
}
inline void Reference::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.name)
}

// string source_uri = 5;
inline void Reference::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Reference::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.source_uri)
  return source_uri_.Get();
}
inline void Reference::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_uri)
}
inline void Reference::set_source_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.source_uri)
}
inline void Reference::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.source_uri)
}
inline ::std::string* Reference::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Reference::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.source_uri)
}
inline void Reference::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.source_uri)
}

// repeated string source_accessions = 6;
inline int Reference::source_accessions_size() const {
  return source_accessions_.size();
}
inline void Reference::clear_source_accessions() {
  source_accessions_.Clear();
}
inline const ::std::string& Reference::source_accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Get(index);
}
inline ::std::string* Reference::mutable_source_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Mutable(index);
}
inline void Reference::set_source_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_accessions)
  source_accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Reference::set_source_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_accessions)
  source_accessions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Reference::set_source_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.source_accessions)
}
inline void Reference::set_source_accessions(int index, const char* value, size_t size) {
  source_accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.source_accessions)
}
inline ::std::string* Reference::add_source_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Add();
}
inline void Reference::add_source_accessions(const ::std::string& value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.Reference.source_accessions)
}
#if LANG_CXX11
inline void Reference::add_source_accessions(::std::string&& value) {
  source_accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.Reference.source_accessions)
}
#endif
inline void Reference::add_source_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.Reference.source_accessions)
}
inline void Reference::add_source_accessions(const char* value, size_t size) {
  source_accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.Reference.source_accessions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reference::source_accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Reference.source_accessions)
  return source_accessions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Reference::mutable_source_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Reference.source_accessions)
  return &source_accessions_;
}

// int32 ncbi_taxon_id = 7;
inline void Reference::clear_ncbi_taxon_id() {
  ncbi_taxon_id_ = 0;
}
inline ::google::protobuf::int32 Reference::ncbi_taxon_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.ncbi_taxon_id)
  return ncbi_taxon_id_;
}
inline void Reference::set_ncbi_taxon_id(::google::protobuf::int32 value) {
  
  ncbi_taxon_id_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.ncbi_taxon_id)
}

// -------------------------------------------------------------------

// ReferenceSet

// string id = 1;
inline void ReferenceSet::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReferenceSet::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.id)
  return id_.Get();
}
inline void ReferenceSet::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.id)
}
inline void ReferenceSet::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.id)
}
inline void ReferenceSet::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.id)
}
inline ::std::string* ReferenceSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReferenceSet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.id)
}
inline void ReferenceSet::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.id)
}

// repeated string reference_ids = 2;
inline int ReferenceSet::reference_ids_size() const {
  return reference_ids_.size();
}
inline void ReferenceSet::clear_reference_ids() {
  reference_ids_.Clear();
}
inline const ::std::string& ReferenceSet::reference_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Get(index);
}
inline ::std::string* ReferenceSet::mutable_reference_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Mutable(index);
}
inline void ReferenceSet::set_reference_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.reference_ids)
  reference_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReferenceSet::set_reference_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.reference_ids)
  reference_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReferenceSet::set_reference_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.reference_ids)
}
inline void ReferenceSet::set_reference_ids(int index, const char* value, size_t size) {
  reference_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.reference_ids)
}
inline ::std::string* ReferenceSet::add_reference_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Add();
}
inline void ReferenceSet::add_reference_ids(const ::std::string& value) {
  reference_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.reference_ids)
}
#if LANG_CXX11
inline void ReferenceSet::add_reference_ids(::std::string&& value) {
  reference_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.reference_ids)
}
#endif
inline void ReferenceSet::add_reference_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ReferenceSet.reference_ids)
}
inline void ReferenceSet::add_reference_ids(const char* value, size_t size) {
  reference_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ReferenceSet.reference_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferenceSet::reference_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReferenceSet::mutable_reference_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ReferenceSet.reference_ids)
  return &reference_ids_;
}

// string md5checksum = 3;
inline void ReferenceSet::clear_md5checksum() {
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReferenceSet::md5checksum() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.md5checksum)
  return md5checksum_.Get();
}
inline void ReferenceSet::set_md5checksum(const ::std::string& value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.md5checksum)
}
inline void ReferenceSet::set_md5checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.md5checksum)
}
inline void ReferenceSet::set_md5checksum(const char* value,
    size_t size) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.md5checksum)
}
inline ::std::string* ReferenceSet::mutable_md5checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.md5checksum)
  return md5checksum_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::release_md5checksum() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.md5checksum)
  
  return md5checksum_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::unsafe_arena_release_md5checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.md5checksum)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return md5checksum_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReferenceSet::set_allocated_md5checksum(::std::string* md5checksum) {
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5checksum,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.md5checksum)
}
inline void ReferenceSet::unsafe_arena_set_allocated_md5checksum(
    ::std::string* md5checksum) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      md5checksum, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.md5checksum)
}

// int32 ncbi_taxon_id = 4;
inline void ReferenceSet::clear_ncbi_taxon_id() {
  ncbi_taxon_id_ = 0;
}
inline ::google::protobuf::int32 ReferenceSet::ncbi_taxon_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.ncbi_taxon_id)
  return ncbi_taxon_id_;
}
inline void ReferenceSet::set_ncbi_taxon_id(::google::protobuf::int32 value) {
  
  ncbi_taxon_id_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.ncbi_taxon_id)
}

// string description = 5;
inline void ReferenceSet::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReferenceSet::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.description)
  return description_.Get();
}
inline void ReferenceSet::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.description)
}
inline void ReferenceSet::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.description)
}
inline void ReferenceSet::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.description)
}
inline ::std::string* ReferenceSet::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReferenceSet::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.description)
}
inline void ReferenceSet::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.description)
}

// string assembly_id = 6;
inline void ReferenceSet::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReferenceSet::assembly_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.assembly_id)
  return assembly_id_.Get();
}
inline void ReferenceSet::set_assembly_id(const ::std::string& value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.assembly_id)
}
inline void ReferenceSet::set_assembly_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.assembly_id)
}
inline void ReferenceSet::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.assembly_id)
}
inline ::std::string* ReferenceSet::mutable_assembly_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.assembly_id)
  return assembly_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::release_assembly_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.assembly_id)
  
  return assembly_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.assembly_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return assembly_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReferenceSet::set_allocated_assembly_id(::std::string* assembly_id) {
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.assembly_id)
}
inline void ReferenceSet::unsafe_arena_set_allocated_assembly_id(
    ::std::string* assembly_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.assembly_id)
}

// string source_uri = 7;
inline void ReferenceSet::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReferenceSet::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.source_uri)
  return source_uri_.Get();
}
inline void ReferenceSet::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_uri)
}
inline void ReferenceSet::set_source_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.source_uri)
}
inline void ReferenceSet::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.source_uri)
}
inline ::std::string* ReferenceSet::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferenceSet::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReferenceSet::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.source_uri)
}
inline void ReferenceSet::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.source_uri)
}

// repeated string source_accessions = 8;
inline int ReferenceSet::source_accessions_size() const {
  return source_accessions_.size();
}
inline void ReferenceSet::clear_source_accessions() {
  source_accessions_.Clear();
}
inline const ::std::string& ReferenceSet::source_accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Get(index);
}
inline ::std::string* ReferenceSet::mutable_source_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Mutable(index);
}
inline void ReferenceSet::set_source_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_accessions)
  source_accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReferenceSet::set_source_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_accessions)
  source_accessions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReferenceSet::set_source_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.source_accessions)
}
inline void ReferenceSet::set_source_accessions(int index, const char* value, size_t size) {
  source_accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.source_accessions)
}
inline ::std::string* ReferenceSet::add_source_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Add();
}
inline void ReferenceSet::add_source_accessions(const ::std::string& value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.source_accessions)
}
#if LANG_CXX11
inline void ReferenceSet::add_source_accessions(::std::string&& value) {
  source_accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.source_accessions)
}
#endif
inline void ReferenceSet::add_source_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ReferenceSet.source_accessions)
}
inline void ReferenceSet::add_source_accessions(const char* value, size_t size) {
  source_accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ReferenceSet.source_accessions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferenceSet::source_accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReferenceSet::mutable_source_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ReferenceSet.source_accessions)
  return &source_accessions_;
}

// -------------------------------------------------------------------

// SearchReferenceSetsRequest

// repeated string md5checksums = 1;
inline int SearchReferenceSetsRequest::md5checksums_size() const {
  return md5checksums_.size();
}
inline void SearchReferenceSetsRequest::clear_md5checksums() {
  md5checksums_.Clear();
}
inline const ::std::string& SearchReferenceSetsRequest::md5checksums(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Get(index);
}
inline ::std::string* SearchReferenceSetsRequest::mutable_md5checksums(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Mutable(index);
}
inline void SearchReferenceSetsRequest::set_md5checksums(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchReferenceSetsRequest::set_md5checksums(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchReferenceSetsRequest::set_md5checksums(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
inline void SearchReferenceSetsRequest::set_md5checksums(int index, const char* value, size_t size) {
  md5checksums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
inline ::std::string* SearchReferenceSetsRequest::add_md5checksums() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Add();
}
inline void SearchReferenceSetsRequest::add_md5checksums(const ::std::string& value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
#if LANG_CXX11
inline void SearchReferenceSetsRequest::add_md5checksums(::std::string&& value) {
  md5checksums_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
#endif
inline void SearchReferenceSetsRequest::add_md5checksums(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
inline void SearchReferenceSetsRequest::add_md5checksums(const char* value, size_t size) {
  md5checksums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferenceSetsRequest::md5checksums() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferenceSetsRequest::mutable_md5checksums() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return &md5checksums_;
}

// repeated string accessions = 2;
inline int SearchReferenceSetsRequest::accessions_size() const {
  return accessions_.size();
}
inline void SearchReferenceSetsRequest::clear_accessions() {
  accessions_.Clear();
}
inline const ::std::string& SearchReferenceSetsRequest::accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Get(index);
}
inline ::std::string* SearchReferenceSetsRequest::mutable_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Mutable(index);
}
inline void SearchReferenceSetsRequest::set_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchReferenceSetsRequest::set_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  accessions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchReferenceSetsRequest::set_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
inline void SearchReferenceSetsRequest::set_accessions(int index, const char* value, size_t size) {
  accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
inline ::std::string* SearchReferenceSetsRequest::add_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Add();
}
inline void SearchReferenceSetsRequest::add_accessions(const ::std::string& value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
#if LANG_CXX11
inline void SearchReferenceSetsRequest::add_accessions(::std::string&& value) {
  accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
#endif
inline void SearchReferenceSetsRequest::add_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
inline void SearchReferenceSetsRequest::add_accessions(const char* value, size_t size) {
  accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferenceSetsRequest::accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferenceSetsRequest::mutable_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return &accessions_;
}

// string assembly_id = 3;
inline void SearchReferenceSetsRequest::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchReferenceSetsRequest::assembly_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  return assembly_id_.Get();
}
inline void SearchReferenceSetsRequest::set_assembly_id(const ::std::string& value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
inline void SearchReferenceSetsRequest::set_assembly_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
inline void SearchReferenceSetsRequest::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
inline ::std::string* SearchReferenceSetsRequest::mutable_assembly_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  return assembly_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferenceSetsRequest::release_assembly_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  
  return assembly_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferenceSetsRequest::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return assembly_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchReferenceSetsRequest::set_allocated_assembly_id(::std::string* assembly_id) {
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
inline void SearchReferenceSetsRequest::unsafe_arena_set_allocated_assembly_id(
    ::std::string* assembly_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}

// string page_token = 4;
inline void SearchReferenceSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchReferenceSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  return page_token_.Get();
}
inline void SearchReferenceSetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
inline void SearchReferenceSetsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
inline void SearchReferenceSetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
inline ::std::string* SearchReferenceSetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferenceSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferenceSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchReferenceSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
inline void SearchReferenceSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}

// int32 page_size = 5;
inline void SearchReferenceSetsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SearchReferenceSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.page_size)
  return page_size_;
}
inline void SearchReferenceSetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.page_size)
}

// -------------------------------------------------------------------

// SearchReferenceSetsResponse

// repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
inline int SearchReferenceSetsResponse::reference_sets_size() const {
  return reference_sets_.size();
}
inline void SearchReferenceSetsResponse::clear_reference_sets() {
  reference_sets_.Clear();
}
inline const ::google::genomics::v1::ReferenceSet& SearchReferenceSetsResponse::reference_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Get(index);
}
inline ::google::genomics::v1::ReferenceSet* SearchReferenceSetsResponse::mutable_reference_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Mutable(index);
}
inline ::google::genomics::v1::ReferenceSet* SearchReferenceSetsResponse::add_reference_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >*
SearchReferenceSetsResponse::mutable_reference_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return &reference_sets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >&
SearchReferenceSetsResponse::reference_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_;
}

// string next_page_token = 2;
inline void SearchReferenceSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchReferenceSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void SearchReferenceSetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
inline void SearchReferenceSetsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
inline void SearchReferenceSetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
inline ::std::string* SearchReferenceSetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferenceSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferenceSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchReferenceSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
inline void SearchReferenceSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetReferenceSetRequest

// string reference_set_id = 1;
inline void GetReferenceSetRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetReferenceSetRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  return reference_set_id_.Get();
}
inline void GetReferenceSetRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
inline void GetReferenceSetRequest::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
inline void GetReferenceSetRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
inline ::std::string* GetReferenceSetRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetReferenceSetRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetReferenceSetRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetReferenceSetRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
inline void GetReferenceSetRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}

// -------------------------------------------------------------------

// SearchReferencesRequest

// repeated string md5checksums = 1;
inline int SearchReferencesRequest::md5checksums_size() const {
  return md5checksums_.size();
}
inline void SearchReferencesRequest::clear_md5checksums() {
  md5checksums_.Clear();
}
inline const ::std::string& SearchReferencesRequest::md5checksums(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Get(index);
}
inline ::std::string* SearchReferencesRequest::mutable_md5checksums(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Mutable(index);
}
inline void SearchReferencesRequest::set_md5checksums(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchReferencesRequest::set_md5checksums(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchReferencesRequest::set_md5checksums(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
inline void SearchReferencesRequest::set_md5checksums(int index, const char* value, size_t size) {
  md5checksums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
inline ::std::string* SearchReferencesRequest::add_md5checksums() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Add();
}
inline void SearchReferencesRequest::add_md5checksums(const ::std::string& value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
#if LANG_CXX11
inline void SearchReferencesRequest::add_md5checksums(::std::string&& value) {
  md5checksums_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
#endif
inline void SearchReferencesRequest::add_md5checksums(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
inline void SearchReferencesRequest::add_md5checksums(const char* value, size_t size) {
  md5checksums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferencesRequest::md5checksums() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferencesRequest::mutable_md5checksums() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return &md5checksums_;
}

// repeated string accessions = 2;
inline int SearchReferencesRequest::accessions_size() const {
  return accessions_.size();
}
inline void SearchReferencesRequest::clear_accessions() {
  accessions_.Clear();
}
inline const ::std::string& SearchReferencesRequest::accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Get(index);
}
inline ::std::string* SearchReferencesRequest::mutable_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Mutable(index);
}
inline void SearchReferencesRequest::set_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.accessions)
  accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchReferencesRequest::set_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.accessions)
  accessions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchReferencesRequest::set_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.accessions)
}
inline void SearchReferencesRequest::set_accessions(int index, const char* value, size_t size) {
  accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.accessions)
}
inline ::std::string* SearchReferencesRequest::add_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Add();
}
inline void SearchReferencesRequest::add_accessions(const ::std::string& value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.accessions)
}
#if LANG_CXX11
inline void SearchReferencesRequest::add_accessions(::std::string&& value) {
  accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.accessions)
}
#endif
inline void SearchReferencesRequest::add_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferencesRequest.accessions)
}
inline void SearchReferencesRequest::add_accessions(const char* value, size_t size) {
  accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferencesRequest.accessions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferencesRequest::accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferencesRequest::mutable_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesRequest.accessions)
  return &accessions_;
}

// string reference_set_id = 3;
inline void SearchReferencesRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchReferencesRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  return reference_set_id_.Get();
}
inline void SearchReferencesRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
inline void SearchReferencesRequest::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
inline void SearchReferencesRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
inline ::std::string* SearchReferencesRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferencesRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferencesRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchReferencesRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
inline void SearchReferencesRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}

// string page_token = 4;
inline void SearchReferencesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchReferencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.page_token)
  return page_token_.Get();
}
inline void SearchReferencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.page_token)
}
inline void SearchReferencesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.page_token)
}
inline void SearchReferencesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.page_token)
}
inline ::std::string* SearchReferencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferencesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchReferencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesRequest.page_token)
}
inline void SearchReferencesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesRequest.page_token)
}

// int32 page_size = 5;
inline void SearchReferencesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SearchReferencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.page_size)
  return page_size_;
}
inline void SearchReferencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.page_size)
}

// -------------------------------------------------------------------

// SearchReferencesResponse

// repeated .google.genomics.v1.Reference references = 1;
inline int SearchReferencesResponse::references_size() const {
  return references_.size();
}
inline void SearchReferencesResponse::clear_references() {
  references_.Clear();
}
inline const ::google::genomics::v1::Reference& SearchReferencesResponse::references(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Get(index);
}
inline ::google::genomics::v1::Reference* SearchReferencesResponse::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Mutable(index);
}
inline ::google::genomics::v1::Reference* SearchReferencesResponse::add_references() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >*
SearchReferencesResponse::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesResponse.references)
  return &references_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >&
SearchReferencesResponse::references() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesResponse.references)
  return references_;
}

// string next_page_token = 2;
inline void SearchReferencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchReferencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesResponse.next_page_token)
  return next_page_token_.Get();
}
inline void SearchReferencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
inline void SearchReferencesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
inline void SearchReferencesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
inline ::std::string* SearchReferencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchReferencesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchReferencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
inline void SearchReferencesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetReferenceRequest

// string reference_id = 1;
inline void GetReferenceRequest::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetReferenceRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReferenceRequest.reference_id)
  return reference_id_.Get();
}
inline void GetReferenceRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReferenceRequest.reference_id)
}
inline void GetReferenceRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReferenceRequest.reference_id)
}
inline void GetReferenceRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReferenceRequest.reference_id)
}
inline ::std::string* GetReferenceRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReferenceRequest.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetReferenceRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReferenceRequest.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetReferenceRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReferenceRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetReferenceRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReferenceRequest.reference_id)
}
inline void GetReferenceRequest::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReferenceRequest.reference_id)
}

// -------------------------------------------------------------------

// ListBasesRequest

// string reference_id = 1;
inline void ListBasesRequest::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListBasesRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.reference_id)
  return reference_id_.Get();
}
inline void ListBasesRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.reference_id)
}
inline void ListBasesRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesRequest.reference_id)
}
inline void ListBasesRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesRequest.reference_id)
}
inline ::std::string* ListBasesRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesRequest.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesRequest.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListBasesRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesRequest.reference_id)
}
inline void ListBasesRequest::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesRequest.reference_id)
}

// int64 start = 2;
inline void ListBasesRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListBasesRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.start)
  return start_;
}
inline void ListBasesRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.start)
}

// int64 end = 3;
inline void ListBasesRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListBasesRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.end)
  return end_;
}
inline void ListBasesRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.end)
}

// string page_token = 4;
inline void ListBasesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListBasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.page_token)
  return page_token_.Get();
}
inline void ListBasesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.page_token)
}
inline void ListBasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesRequest.page_token)
}
inline void ListBasesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesRequest.page_token)
}
inline ::std::string* ListBasesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListBasesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesRequest.page_token)
}
inline void ListBasesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesRequest.page_token)
}

// int32 page_size = 5;
inline void ListBasesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListBasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.page_size)
  return page_size_;
}
inline void ListBasesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.page_size)
}

// -------------------------------------------------------------------

// ListBasesResponse

// int64 offset = 1;
inline void ListBasesResponse::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListBasesResponse::offset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.offset)
  return offset_;
}
inline void ListBasesResponse::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.offset)
}

// string sequence = 2;
inline void ListBasesResponse::clear_sequence() {
  sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListBasesResponse::sequence() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.sequence)
  return sequence_.Get();
}
inline void ListBasesResponse::set_sequence(const ::std::string& value) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.sequence)
}
inline void ListBasesResponse::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesResponse.sequence)
}
inline void ListBasesResponse::set_sequence(const char* value,
    size_t size) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesResponse.sequence)
}
inline ::std::string* ListBasesResponse::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesResponse.sequence)
  return sequence_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesResponse::release_sequence() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesResponse.sequence)
  
  return sequence_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesResponse::unsafe_arena_release_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesResponse.sequence)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sequence_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListBasesResponse::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesResponse.sequence)
}
inline void ListBasesResponse::unsafe_arena_set_allocated_sequence(
    ::std::string* sequence) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sequence, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesResponse.sequence)
}

// string next_page_token = 3;
inline void ListBasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListBasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListBasesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.next_page_token)
}
inline void ListBasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesResponse.next_page_token)
}
inline void ListBasesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesResponse.next_page_token)
}
inline ::std::string* ListBasesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListBasesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListBasesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesResponse.next_page_token)
}
inline void ListBasesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesResponse.next_page_token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fgenomics_2fv1_2freferences_2eproto__INCLUDED
