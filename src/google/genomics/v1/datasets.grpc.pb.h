// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/genomics/v1/datasets.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fgenomics_2fv1_2fdatasets_2eproto__INCLUDED
#define GRPC_google_2fgenomics_2fv1_2fdatasets_2eproto__INCLUDED

#include "google/genomics/v1/datasets.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace genomics {
namespace v1 {

// This service manages datasets, which are collections of genomic data.
class DatasetServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.genomics.v1.DatasetServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists datasets within a project.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status ListDatasets(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::google::genomics::v1::ListDatasetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListDatasetsResponse>> AsyncListDatasets(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListDatasetsResponse>>(AsyncListDatasetsRaw(context, request, cq));
    }
    // Creates a new dataset.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status CreateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::google::genomics::v1::Dataset* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>> AsyncCreateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>>(AsyncCreateDatasetRaw(context, request, cq));
    }
    // Gets a dataset by ID.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status GetDataset(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::google::genomics::v1::Dataset* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>> AsyncGetDataset(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>>(AsyncGetDatasetRaw(context, request, cq));
    }
    // Updates a dataset.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // This method supports patch semantics.
    virtual ::grpc::Status UpdateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::google::genomics::v1::Dataset* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>> AsyncUpdateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>>(AsyncUpdateDatasetRaw(context, request, cq));
    }
    // Deletes a dataset and all of its contents (all read group sets,
    // reference sets, variant sets, call sets, annotation sets, etc.)
    // This is reversible (up to one week after the deletion) via
    // the
    // [datasets.undelete][google.genomics.v1.DatasetServiceV1.UndeleteDataset]
    // operation.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status DeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteDatasetRaw(context, request, cq));
    }
    // Undeletes a dataset by restoring a dataset which was deleted via this API.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // This operation is only possible for a week after the deletion occurred.
    virtual ::grpc::Status UndeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::google::genomics::v1::Dataset* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>> AsyncUndeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>>(AsyncUndeleteDatasetRaw(context, request, cq));
    }
    // Sets the access control policy on the specified dataset. Replaces any
    // existing policy.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // See <a href="/iam/docs/managing-policies#setting_a_policy">Setting a
    // Policy</a> for more information.
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    // Gets the access control policy for the dataset. This is empty if the
    // policy or resource does not exist.
    //
    // See <a href="/iam/docs/managing-policies#getting_a_policy">Getting a
    // Policy</a> for more information.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    // Returns permissions that a caller has on the specified resource.
    // See <a href="/iam/docs/managing-policies#testing_permissions">Testing
    // Permissions</a> for more information.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListDatasetsResponse>* AsyncListDatasetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>* AsyncCreateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>* AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>* AsyncUpdateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Dataset>* AsyncUndeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListDatasets(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::google::genomics::v1::ListDatasetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListDatasetsResponse>> AsyncListDatasets(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListDatasetsResponse>>(AsyncListDatasetsRaw(context, request, cq));
    }
    ::grpc::Status CreateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::google::genomics::v1::Dataset* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>> AsyncCreateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>>(AsyncCreateDatasetRaw(context, request, cq));
    }
    ::grpc::Status GetDataset(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::google::genomics::v1::Dataset* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>> AsyncGetDataset(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>>(AsyncGetDatasetRaw(context, request, cq));
    }
    ::grpc::Status UpdateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::google::genomics::v1::Dataset* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>> AsyncUpdateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>>(AsyncUpdateDatasetRaw(context, request, cq));
    }
    ::grpc::Status DeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteDatasetRaw(context, request, cq));
    }
    ::grpc::Status UndeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::google::genomics::v1::Dataset* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>> AsyncUndeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>>(AsyncUndeleteDatasetRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListDatasetsResponse>* AsyncListDatasetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* AsyncCreateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* AsyncUpdateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* AsyncUndeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_ListDatasets_;
    const ::grpc::RpcMethod rpcmethod_CreateDataset_;
    const ::grpc::RpcMethod rpcmethod_GetDataset_;
    const ::grpc::RpcMethod rpcmethod_UpdateDataset_;
    const ::grpc::RpcMethod rpcmethod_DeleteDataset_;
    const ::grpc::RpcMethod rpcmethod_UndeleteDataset_;
    const ::grpc::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::RpcMethod rpcmethod_TestIamPermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists datasets within a project.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status ListDatasets(::grpc::ServerContext* context, const ::google::genomics::v1::ListDatasetsRequest* request, ::google::genomics::v1::ListDatasetsResponse* response);
    // Creates a new dataset.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status CreateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::CreateDatasetRequest* request, ::google::genomics::v1::Dataset* response);
    // Gets a dataset by ID.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status GetDataset(::grpc::ServerContext* context, const ::google::genomics::v1::GetDatasetRequest* request, ::google::genomics::v1::Dataset* response);
    // Updates a dataset.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // This method supports patch semantics.
    virtual ::grpc::Status UpdateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateDatasetRequest* request, ::google::genomics::v1::Dataset* response);
    // Deletes a dataset and all of its contents (all read group sets,
    // reference sets, variant sets, call sets, annotation sets, etc.)
    // This is reversible (up to one week after the deletion) via
    // the
    // [datasets.undelete][google.genomics.v1.DatasetServiceV1.UndeleteDataset]
    // operation.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status DeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteDatasetRequest* request, ::google::protobuf::Empty* response);
    // Undeletes a dataset by restoring a dataset which was deleted via this API.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // This operation is only possible for a week after the deletion occurred.
    virtual ::grpc::Status UndeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UndeleteDatasetRequest* request, ::google::genomics::v1::Dataset* response);
    // Sets the access control policy on the specified dataset. Replaces any
    // existing policy.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // See <a href="/iam/docs/managing-policies#setting_a_policy">Setting a
    // Policy</a> for more information.
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Gets the access control policy for the dataset. This is empty if the
    // policy or resource does not exist.
    //
    // See <a href="/iam/docs/managing-policies#getting_a_policy">Getting a
    // Policy</a> for more information.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns permissions that a caller has on the specified resource.
    // See <a href="/iam/docs/managing-policies#testing_permissions">Testing
    // Permissions</a> for more information.
    //
    // For the definitions of datasets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListDatasets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* context, const ::google::genomics::v1::ListDatasetsRequest* request, ::google::genomics::v1::ListDatasetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasets(::grpc::ServerContext* context, ::google::genomics::v1::ListDatasetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::ListDatasetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateDataset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::CreateDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDataset(::grpc::ServerContext* context, ::google::genomics::v1::CreateDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Dataset>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDataset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* context, const ::google::genomics::v1::GetDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataset(::grpc::ServerContext* context, ::google::genomics::v1::GetDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Dataset>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateDataset() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDataset(::grpc::ServerContext* context, ::google::genomics::v1::UpdateDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Dataset>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteDataset() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteDatasetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataset(::grpc::ServerContext* context, ::google::genomics::v1::DeleteDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UndeleteDataset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UndeleteDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UndeleteDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteDataset(::grpc::ServerContext* context, ::google::genomics::v1::UndeleteDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Dataset>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListDatasets<WithAsyncMethod_CreateDataset<WithAsyncMethod_GetDataset<WithAsyncMethod_UpdateDataset<WithAsyncMethod_DeleteDataset<WithAsyncMethod_UndeleteDataset<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_TestIamPermissions<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListDatasets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* context, const ::google::genomics::v1::ListDatasetsRequest* request, ::google::genomics::v1::ListDatasetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateDataset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::CreateDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDataset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* context, const ::google::genomics::v1::GetDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateDataset() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteDataset() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteDatasetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UndeleteDataset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UndeleteDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UndeleteDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListDatasets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::ListDatasetsRequest, ::google::genomics::v1::ListDatasetsResponse>(std::bind(&WithStreamedUnaryMethod_ListDatasets<BaseClass>::StreamedListDatasets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* context, const ::google::genomics::v1::ListDatasetsRequest* request, ::google::genomics::v1::ListDatasetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDatasets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::ListDatasetsRequest,::google::genomics::v1::ListDatasetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateDataset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::CreateDatasetRequest, ::google::genomics::v1::Dataset>(std::bind(&WithStreamedUnaryMethod_CreateDataset<BaseClass>::StreamedCreateDataset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::CreateDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::CreateDatasetRequest,::google::genomics::v1::Dataset>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDataset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::GetDatasetRequest, ::google::genomics::v1::Dataset>(std::bind(&WithStreamedUnaryMethod_GetDataset<BaseClass>::StreamedGetDataset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* context, const ::google::genomics::v1::GetDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::GetDatasetRequest,::google::genomics::v1::Dataset>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateDataset() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::UpdateDatasetRequest, ::google::genomics::v1::Dataset>(std::bind(&WithStreamedUnaryMethod_UpdateDataset<BaseClass>::StreamedUpdateDataset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::UpdateDatasetRequest,::google::genomics::v1::Dataset>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteDataset() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::DeleteDatasetRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteDataset<BaseClass>::StreamedDeleteDataset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteDatasetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::DeleteDatasetRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeleteDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UndeleteDataset() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::UndeleteDatasetRequest, ::google::genomics::v1::Dataset>(std::bind(&WithStreamedUnaryMethod_UndeleteDataset<BaseClass>::StreamedUndeleteDataset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UndeleteDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UndeleteDatasetRequest* request, ::google::genomics::v1::Dataset* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeleteDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::UndeleteDatasetRequest,::google::genomics::v1::Dataset>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_SetIamPolicy<BaseClass>::StreamedSetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_GetIamPolicy<BaseClass>::StreamedGetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(std::bind(&WithStreamedUnaryMethod_TestIamPermissions<BaseClass>::StreamedTestIamPermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListDatasets<WithStreamedUnaryMethod_CreateDataset<WithStreamedUnaryMethod_GetDataset<WithStreamedUnaryMethod_UpdateDataset<WithStreamedUnaryMethod_DeleteDataset<WithStreamedUnaryMethod_UndeleteDataset<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListDatasets<WithStreamedUnaryMethod_CreateDataset<WithStreamedUnaryMethod_GetDataset<WithStreamedUnaryMethod_UpdateDataset<WithStreamedUnaryMethod_DeleteDataset<WithStreamedUnaryMethod_UndeleteDataset<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace genomics
}  // namespace google


#endif  // GRPC_google_2fgenomics_2fv1_2fdatasets_2eproto__INCLUDED
