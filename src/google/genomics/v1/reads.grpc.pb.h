// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/genomics/v1/reads.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fgenomics_2fv1_2freads_2eproto__INCLUDED
#define GRPC_google_2fgenomics_2fv1_2freads_2eproto__INCLUDED

#include "google/genomics/v1/reads.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace genomics {
namespace v1 {

class StreamingReadService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.genomics.v1.StreamingReadService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns a stream of all the reads matching the search request, ordered
    // by reference name, position, and ID.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::genomics::v1::StreamReadsResponse>> StreamReads(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::genomics::v1::StreamReadsResponse>>(StreamReadsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::genomics::v1::StreamReadsResponse>> AsyncStreamReads(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::genomics::v1::StreamReadsResponse>>(AsyncStreamReadsRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::google::genomics::v1::StreamReadsResponse>* StreamReadsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::genomics::v1::StreamReadsResponse>* AsyncStreamReadsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::google::genomics::v1::StreamReadsResponse>> StreamReads(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::genomics::v1::StreamReadsResponse>>(StreamReadsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::genomics::v1::StreamReadsResponse>> AsyncStreamReads(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::genomics::v1::StreamReadsResponse>>(AsyncStreamReadsRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::google::genomics::v1::StreamReadsResponse>* StreamReadsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::genomics::v1::StreamReadsResponse>* AsyncStreamReadsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::StreamReadsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_StreamReads_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns a stream of all the reads matching the search request, ordered
    // by reference name, position, and ID.
    virtual ::grpc::Status StreamReads(::grpc::ServerContext* context, const ::google::genomics::v1::StreamReadsRequest* request, ::grpc::ServerWriter< ::google::genomics::v1::StreamReadsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamReads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamReads() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamReads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamReads(::grpc::ServerContext* context, const ::google::genomics::v1::StreamReadsRequest* request, ::grpc::ServerWriter< ::google::genomics::v1::StreamReadsResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamReads(::grpc::ServerContext* context, ::google::genomics::v1::StreamReadsRequest* request, ::grpc::ServerAsyncWriter< ::google::genomics::v1::StreamReadsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamReads<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_StreamReads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamReads() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamReads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamReads(::grpc::ServerContext* context, const ::google::genomics::v1::StreamReadsRequest* request, ::grpc::ServerWriter< ::google::genomics::v1::StreamReadsResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamReads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_StreamReads() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::SplitServerStreamingHandler< ::google::genomics::v1::StreamReadsRequest, ::google::genomics::v1::StreamReadsResponse>(std::bind(&WithSplitStreamingMethod_StreamReads<BaseClass>::StreamedStreamReads, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_StreamReads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamReads(::grpc::ServerContext* context, const ::google::genomics::v1::StreamReadsRequest* request, ::grpc::ServerWriter< ::google::genomics::v1::StreamReadsResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamReads(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::genomics::v1::StreamReadsRequest,::google::genomics::v1::StreamReadsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamReads<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_StreamReads<Service > StreamedService;
};

// The Readstore. A data store for DNA sequencing Reads.
class ReadServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.genomics.v1.ReadServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates read group sets by asynchronously importing the provided
    // information.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // The caller must have WRITE permissions to the dataset.
    //
    // ## Notes on [BAM](https://samtools.github.io/hts-specs/SAMv1.pdf) import
    //
    // - Tags will be converted to strings - tag types are not preserved
    // - Comments (`@CO`) in the input file header will not be preserved
    // - Original header order of references (`@SQ`) will not be preserved
    // - Any reverse stranded unmapped reads will be reverse complemented, and
    // their qualities (also the "BQ" and "OQ" tags, if any) will be reversed
    // - Unmapped reads will be stripped of positional information (reference name
    // and position)
    virtual ::grpc::Status ImportReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncImportReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncImportReadGroupSetsRaw(context, request, cq));
    }
    // Exports a read group set to a BAM file in Google Cloud Storage.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Note that currently there may be some differences between exported BAM
    // files and the original BAM file at the time of import. See
    // [ImportReadGroupSets][google.genomics.v1.ReadServiceV1.ImportReadGroupSets]
    // for caveats.
    virtual ::grpc::Status ExportReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncExportReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncExportReadGroupSetRaw(context, request, cq));
    }
    // Searches for read group sets matching the criteria.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.searchReadGroupSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L135).
    virtual ::grpc::Status SearchReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest& request, ::google::genomics::v1::SearchReadGroupSetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReadGroupSetsResponse>> AsyncSearchReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReadGroupSetsResponse>>(AsyncSearchReadGroupSetsRaw(context, request, cq));
    }
    // Updates a read group set.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // This method supports patch semantics.
    virtual ::grpc::Status UpdateReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest& request, ::google::genomics::v1::ReadGroupSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReadGroupSet>> AsyncUpdateReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReadGroupSet>>(AsyncUpdateReadGroupSetRaw(context, request, cq));
    }
    // Deletes a read group set.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status DeleteReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteReadGroupSetRaw(context, request, cq));
    }
    // Gets a read group set by ID.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status GetReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReadGroupSetRequest& request, ::google::genomics::v1::ReadGroupSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReadGroupSet>> AsyncGetReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReadGroupSet>>(AsyncGetReadGroupSetRaw(context, request, cq));
    }
    // Lists fixed width coverage buckets for a read group set, each of which
    // correspond to a range of a reference sequence. Each bucket summarizes
    // coverage information across its corresponding genomic range.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Coverage is defined as the number of reads which are aligned to a given
    // base in the reference sequence. Coverage buckets are available at several
    // precomputed bucket widths, enabling retrieval of various coverage 'zoom
    // levels'. The caller must have READ permissions for the target read group
    // set.
    virtual ::grpc::Status ListCoverageBuckets(::grpc::ClientContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest& request, ::google::genomics::v1::ListCoverageBucketsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListCoverageBucketsResponse>> AsyncListCoverageBuckets(::grpc::ClientContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListCoverageBucketsResponse>>(AsyncListCoverageBucketsRaw(context, request, cq));
    }
    // Gets a list of reads for one or more read group sets.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Reads search operates over a genomic coordinate space of reference sequence
    // & position defined over the reference sequences to which the requested
    // read group sets are aligned.
    //
    // If a target positional range is specified, search returns all reads whose
    // alignment to the reference genome overlap the range. A query which
    // specifies only read group set IDs yields all reads in those read group
    // sets, including unmapped reads.
    //
    // All reads returned (including reads on subsequent pages) are ordered by
    // genomic coordinate (by reference sequence, then position). Reads with
    // equivalent genomic coordinates are returned in an unspecified order. This
    // order is consistent, such that two queries for the same content (regardless
    // of page size) yield reads in the same order across their respective streams
    // of paginated responses.
    //
    // Implements
    // [GlobalAllianceApi.searchReads](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L85).
    virtual ::grpc::Status SearchReads(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadsRequest& request, ::google::genomics::v1::SearchReadsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReadsResponse>> AsyncSearchReads(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReadsResponse>>(AsyncSearchReadsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncImportReadGroupSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncExportReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReadGroupSetsResponse>* AsyncSearchReadGroupSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReadGroupSet>* AsyncUpdateReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReadGroupSet>* AsyncGetReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListCoverageBucketsResponse>* AsyncListCoverageBucketsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReadsResponse>* AsyncSearchReadsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ImportReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncImportReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncImportReadGroupSetsRaw(context, request, cq));
    }
    ::grpc::Status ExportReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncExportReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncExportReadGroupSetRaw(context, request, cq));
    }
    ::grpc::Status SearchReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest& request, ::google::genomics::v1::SearchReadGroupSetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReadGroupSetsResponse>> AsyncSearchReadGroupSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReadGroupSetsResponse>>(AsyncSearchReadGroupSetsRaw(context, request, cq));
    }
    ::grpc::Status UpdateReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest& request, ::google::genomics::v1::ReadGroupSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReadGroupSet>> AsyncUpdateReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReadGroupSet>>(AsyncUpdateReadGroupSetRaw(context, request, cq));
    }
    ::grpc::Status DeleteReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteReadGroupSetRaw(context, request, cq));
    }
    ::grpc::Status GetReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReadGroupSetRequest& request, ::google::genomics::v1::ReadGroupSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReadGroupSet>> AsyncGetReadGroupSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReadGroupSet>>(AsyncGetReadGroupSetRaw(context, request, cq));
    }
    ::grpc::Status ListCoverageBuckets(::grpc::ClientContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest& request, ::google::genomics::v1::ListCoverageBucketsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListCoverageBucketsResponse>> AsyncListCoverageBuckets(::grpc::ClientContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListCoverageBucketsResponse>>(AsyncListCoverageBucketsRaw(context, request, cq));
    }
    ::grpc::Status SearchReads(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadsRequest& request, ::google::genomics::v1::SearchReadsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReadsResponse>> AsyncSearchReads(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReadsResponse>>(AsyncSearchReadsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncImportReadGroupSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncExportReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReadGroupSetsResponse>* AsyncSearchReadGroupSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReadGroupSet>* AsyncUpdateReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReadGroupSet>* AsyncGetReadGroupSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetReadGroupSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListCoverageBucketsResponse>* AsyncListCoverageBucketsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReadsResponse>* AsyncSearchReadsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReadsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_ImportReadGroupSets_;
    const ::grpc::RpcMethod rpcmethod_ExportReadGroupSet_;
    const ::grpc::RpcMethod rpcmethod_SearchReadGroupSets_;
    const ::grpc::RpcMethod rpcmethod_UpdateReadGroupSet_;
    const ::grpc::RpcMethod rpcmethod_DeleteReadGroupSet_;
    const ::grpc::RpcMethod rpcmethod_GetReadGroupSet_;
    const ::grpc::RpcMethod rpcmethod_ListCoverageBuckets_;
    const ::grpc::RpcMethod rpcmethod_SearchReads_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates read group sets by asynchronously importing the provided
    // information.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // The caller must have WRITE permissions to the dataset.
    //
    // ## Notes on [BAM](https://samtools.github.io/hts-specs/SAMv1.pdf) import
    //
    // - Tags will be converted to strings - tag types are not preserved
    // - Comments (`@CO`) in the input file header will not be preserved
    // - Original header order of references (`@SQ`) will not be preserved
    // - Any reverse stranded unmapped reads will be reverse complemented, and
    // their qualities (also the "BQ" and "OQ" tags, if any) will be reversed
    // - Unmapped reads will be stripped of positional information (reference name
    // and position)
    virtual ::grpc::Status ImportReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest* request, ::google::longrunning::Operation* response);
    // Exports a read group set to a BAM file in Google Cloud Storage.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Note that currently there may be some differences between exported BAM
    // files and the original BAM file at the time of import. See
    // [ImportReadGroupSets][google.genomics.v1.ReadServiceV1.ImportReadGroupSets]
    // for caveats.
    virtual ::grpc::Status ExportReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest* request, ::google::longrunning::Operation* response);
    // Searches for read group sets matching the criteria.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.searchReadGroupSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L135).
    virtual ::grpc::Status SearchReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest* request, ::google::genomics::v1::SearchReadGroupSetsResponse* response);
    // Updates a read group set.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // This method supports patch semantics.
    virtual ::grpc::Status UpdateReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response);
    // Deletes a read group set.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status DeleteReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest* request, ::google::protobuf::Empty* response);
    // Gets a read group set by ID.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    virtual ::grpc::Status GetReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response);
    // Lists fixed width coverage buckets for a read group set, each of which
    // correspond to a range of a reference sequence. Each bucket summarizes
    // coverage information across its corresponding genomic range.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Coverage is defined as the number of reads which are aligned to a given
    // base in the reference sequence. Coverage buckets are available at several
    // precomputed bucket widths, enabling retrieval of various coverage 'zoom
    // levels'. The caller must have READ permissions for the target read group
    // set.
    virtual ::grpc::Status ListCoverageBuckets(::grpc::ServerContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest* request, ::google::genomics::v1::ListCoverageBucketsResponse* response);
    // Gets a list of reads for one or more read group sets.
    //
    // For the definitions of read group sets and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Reads search operates over a genomic coordinate space of reference sequence
    // & position defined over the reference sequences to which the requested
    // read group sets are aligned.
    //
    // If a target positional range is specified, search returns all reads whose
    // alignment to the reference genome overlap the range. A query which
    // specifies only read group set IDs yields all reads in those read group
    // sets, including unmapped reads.
    //
    // All reads returned (including reads on subsequent pages) are ordered by
    // genomic coordinate (by reference sequence, then position). Reads with
    // equivalent genomic coordinates are returned in an unspecified order. This
    // order is consistent, such that two queries for the same content (regardless
    // of page size) yield reads in the same order across their respective streams
    // of paginated responses.
    //
    // Implements
    // [GlobalAllianceApi.searchReads](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L85).
    virtual ::grpc::Status SearchReads(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadsRequest* request, ::google::genomics::v1::SearchReadsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ImportReadGroupSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ImportReadGroupSets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ImportReadGroupSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportReadGroupSets(::grpc::ServerContext* context, ::google::genomics::v1::ImportReadGroupSetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExportReadGroupSet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExportReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportReadGroupSet(::grpc::ServerContext* context, ::google::genomics::v1::ExportReadGroupSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchReadGroupSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchReadGroupSets() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SearchReadGroupSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest* request, ::google::genomics::v1::SearchReadGroupSetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchReadGroupSets(::grpc::ServerContext* context, ::google::genomics::v1::SearchReadGroupSetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::SearchReadGroupSetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateReadGroupSet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateReadGroupSet(::grpc::ServerContext* context, ::google::genomics::v1::UpdateReadGroupSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::ReadGroupSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteReadGroupSet() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReadGroupSet(::grpc::ServerContext* context, ::google::genomics::v1::DeleteReadGroupSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetReadGroupSet() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReadGroupSet(::grpc::ServerContext* context, ::google::genomics::v1::GetReadGroupSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::ReadGroupSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCoverageBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListCoverageBuckets() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListCoverageBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCoverageBuckets(::grpc::ServerContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest* request, ::google::genomics::v1::ListCoverageBucketsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCoverageBuckets(::grpc::ServerContext* context, ::google::genomics::v1::ListCoverageBucketsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::ListCoverageBucketsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchReads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchReads() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SearchReads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReads(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadsRequest* request, ::google::genomics::v1::SearchReadsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchReads(::grpc::ServerContext* context, ::google::genomics::v1::SearchReadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::SearchReadsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ImportReadGroupSets<WithAsyncMethod_ExportReadGroupSet<WithAsyncMethod_SearchReadGroupSets<WithAsyncMethod_UpdateReadGroupSet<WithAsyncMethod_DeleteReadGroupSet<WithAsyncMethod_GetReadGroupSet<WithAsyncMethod_ListCoverageBuckets<WithAsyncMethod_SearchReads<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ImportReadGroupSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ImportReadGroupSets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ImportReadGroupSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExportReadGroupSet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExportReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchReadGroupSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchReadGroupSets() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SearchReadGroupSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest* request, ::google::genomics::v1::SearchReadGroupSetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateReadGroupSet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteReadGroupSet() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetReadGroupSet() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCoverageBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListCoverageBuckets() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListCoverageBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCoverageBuckets(::grpc::ServerContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest* request, ::google::genomics::v1::ListCoverageBucketsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchReads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchReads() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SearchReads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReads(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadsRequest* request, ::google::genomics::v1::SearchReadsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ImportReadGroupSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ImportReadGroupSets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::ImportReadGroupSetsRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_ImportReadGroupSets<BaseClass>::StreamedImportReadGroupSets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ImportReadGroupSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ImportReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::ImportReadGroupSetsRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedImportReadGroupSets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::ImportReadGroupSetsRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ExportReadGroupSet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::ExportReadGroupSetRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_ExportReadGroupSet<BaseClass>::StreamedExportReadGroupSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExportReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::ExportReadGroupSetRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportReadGroupSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::ExportReadGroupSetRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchReadGroupSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchReadGroupSets() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::SearchReadGroupSetsRequest, ::google::genomics::v1::SearchReadGroupSetsResponse>(std::bind(&WithStreamedUnaryMethod_SearchReadGroupSets<BaseClass>::StreamedSearchReadGroupSets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchReadGroupSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchReadGroupSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadGroupSetsRequest* request, ::google::genomics::v1::SearchReadGroupSetsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchReadGroupSets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::SearchReadGroupSetsRequest,::google::genomics::v1::SearchReadGroupSetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateReadGroupSet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::UpdateReadGroupSetRequest, ::google::genomics::v1::ReadGroupSet>(std::bind(&WithStreamedUnaryMethod_UpdateReadGroupSet<BaseClass>::StreamedUpdateReadGroupSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateReadGroupSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::UpdateReadGroupSetRequest,::google::genomics::v1::ReadGroupSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteReadGroupSet() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::DeleteReadGroupSetRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteReadGroupSet<BaseClass>::StreamedDeleteReadGroupSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteReadGroupSetRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteReadGroupSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::DeleteReadGroupSetRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetReadGroupSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetReadGroupSet() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::GetReadGroupSetRequest, ::google::genomics::v1::ReadGroupSet>(std::bind(&WithStreamedUnaryMethod_GetReadGroupSet<BaseClass>::StreamedGetReadGroupSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetReadGroupSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReadGroupSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReadGroupSetRequest* request, ::google::genomics::v1::ReadGroupSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetReadGroupSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::GetReadGroupSetRequest,::google::genomics::v1::ReadGroupSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCoverageBuckets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListCoverageBuckets() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::ListCoverageBucketsRequest, ::google::genomics::v1::ListCoverageBucketsResponse>(std::bind(&WithStreamedUnaryMethod_ListCoverageBuckets<BaseClass>::StreamedListCoverageBuckets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCoverageBuckets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCoverageBuckets(::grpc::ServerContext* context, const ::google::genomics::v1::ListCoverageBucketsRequest* request, ::google::genomics::v1::ListCoverageBucketsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCoverageBuckets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::ListCoverageBucketsRequest,::google::genomics::v1::ListCoverageBucketsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchReads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchReads() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::google::genomics::v1::SearchReadsRequest, ::google::genomics::v1::SearchReadsResponse>(std::bind(&WithStreamedUnaryMethod_SearchReads<BaseClass>::StreamedSearchReads, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchReads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchReads(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReadsRequest* request, ::google::genomics::v1::SearchReadsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchReads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::genomics::v1::SearchReadsRequest,::google::genomics::v1::SearchReadsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ImportReadGroupSets<WithStreamedUnaryMethod_ExportReadGroupSet<WithStreamedUnaryMethod_SearchReadGroupSets<WithStreamedUnaryMethod_UpdateReadGroupSet<WithStreamedUnaryMethod_DeleteReadGroupSet<WithStreamedUnaryMethod_GetReadGroupSet<WithStreamedUnaryMethod_ListCoverageBuckets<WithStreamedUnaryMethod_SearchReads<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ImportReadGroupSets<WithStreamedUnaryMethod_ExportReadGroupSet<WithStreamedUnaryMethod_SearchReadGroupSets<WithStreamedUnaryMethod_UpdateReadGroupSet<WithStreamedUnaryMethod_DeleteReadGroupSet<WithStreamedUnaryMethod_GetReadGroupSet<WithStreamedUnaryMethod_ListCoverageBuckets<WithStreamedUnaryMethod_SearchReads<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace genomics
}  // namespace google


#endif  // GRPC_google_2fgenomics_2fv1_2freads_2eproto__INCLUDED
