// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/references.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/references.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {
class ReferenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reference> {
} _Reference_default_instance_;
class ReferenceSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReferenceSet> {
} _ReferenceSet_default_instance_;
class SearchReferenceSetsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReferenceSetsRequest> {
} _SearchReferenceSetsRequest_default_instance_;
class SearchReferenceSetsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReferenceSetsResponse> {
} _SearchReferenceSetsResponse_default_instance_;
class GetReferenceSetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetReferenceSetRequest> {
} _GetReferenceSetRequest_default_instance_;
class SearchReferencesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReferencesRequest> {
} _SearchReferencesRequest_default_instance_;
class SearchReferencesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReferencesResponse> {
} _SearchReferencesResponse_default_instance_;
class GetReferenceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetReferenceRequest> {
} _GetReferenceRequest_default_instance_;
class ListBasesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListBasesRequest> {
} _ListBasesRequest_default_instance_;
class ListBasesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListBasesResponse> {
} _ListBasesResponse_default_instance_;

namespace protobuf_google_2fgenomics_2fv1_2freferences_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, md5checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, source_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, source_accessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, ncbi_taxon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, reference_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, md5checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, ncbi_taxon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, assembly_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, source_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, source_accessions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, md5checksums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, accessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, assembly_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsResponse, reference_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceSetRequest, reference_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, md5checksums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, accessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, reference_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesResponse, references_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceRequest, reference_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, reference_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, next_page_token_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Reference)},
  { 12, -1, sizeof(ReferenceSet)},
  { 25, -1, sizeof(SearchReferenceSetsRequest)},
  { 35, -1, sizeof(SearchReferenceSetsResponse)},
  { 42, -1, sizeof(GetReferenceSetRequest)},
  { 48, -1, sizeof(SearchReferencesRequest)},
  { 58, -1, sizeof(SearchReferencesResponse)},
  { 65, -1, sizeof(GetReferenceRequest)},
  { 71, -1, sizeof(ListBasesRequest)},
  { 81, -1, sizeof(ListBasesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReferenceSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReferenceSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReferenceSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetReferenceSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReferencesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReferencesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetReferenceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListBasesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListBasesResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/genomics/v1/references.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Reference_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ReferenceSet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SearchReferenceSetsRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SearchReferenceSetsResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GetReferenceSetRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SearchReferencesRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SearchReferencesResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetReferenceRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ListBasesRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ListBasesResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  _Reference_default_instance_.DefaultConstruct();
  _ReferenceSet_default_instance_.DefaultConstruct();
  _SearchReferenceSetsRequest_default_instance_.DefaultConstruct();
  _SearchReferenceSetsResponse_default_instance_.DefaultConstruct();
  _GetReferenceSetRequest_default_instance_.DefaultConstruct();
  _SearchReferencesRequest_default_instance_.DefaultConstruct();
  _SearchReferencesResponse_default_instance_.DefaultConstruct();
  _GetReferenceRequest_default_instance_.DefaultConstruct();
  _ListBasesRequest_default_instance_.DefaultConstruct();
  _ListBasesResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n#google/genomics/v1/references.proto\022\022g"
      "oogle.genomics.v1\032\034google/api/annotation"
      "s.proto\"\220\001\n\tReference\022\n\n\002id\030\001 \001(\t\022\016\n\006len"
      "gth\030\002 \001(\003\022\023\n\013md5checksum\030\003 \001(\t\022\014\n\004name\030\004"
      " \001(\t\022\022\n\nsource_uri\030\005 \001(\t\022\031\n\021source_acces"
      "sions\030\006 \003(\t\022\025\n\rncbi_taxon_id\030\007 \001(\005\"\266\001\n\014R"
      "eferenceSet\022\n\n\002id\030\001 \001(\t\022\025\n\rreference_ids"
      "\030\002 \003(\t\022\023\n\013md5checksum\030\003 \001(\t\022\025\n\rncbi_taxo"
      "n_id\030\004 \001(\005\022\023\n\013description\030\005 \001(\t\022\023\n\013assem"
      "bly_id\030\006 \001(\t\022\022\n\nsource_uri\030\007 \001(\t\022\031\n\021sour"
      "ce_accessions\030\010 \003(\t\"\202\001\n\032SearchReferenceS"
      "etsRequest\022\024\n\014md5checksums\030\001 \003(\t\022\022\n\nacce"
      "ssions\030\002 \003(\t\022\023\n\013assembly_id\030\003 \001(\t\022\022\n\npag"
      "e_token\030\004 \001(\t\022\021\n\tpage_size\030\005 \001(\005\"p\n\033Sear"
      "chReferenceSetsResponse\0228\n\016reference_set"
      "s\030\001 \003(\0132 .google.genomics.v1.ReferenceSe"
      "t\022\027\n\017next_page_token\030\002 \001(\t\"2\n\026GetReferen"
      "ceSetRequest\022\030\n\020reference_set_id\030\001 \001(\t\"\204"
      "\001\n\027SearchReferencesRequest\022\024\n\014md5checksu"
      "ms\030\001 \003(\t\022\022\n\naccessions\030\002 \003(\t\022\030\n\020referenc"
      "e_set_id\030\003 \001(\t\022\022\n\npage_token\030\004 \001(\t\022\021\n\tpa"
      "ge_size\030\005 \001(\005\"f\n\030SearchReferencesRespons"
      "e\0221\n\nreferences\030\001 \003(\0132\035.google.genomics."
      "v1.Reference\022\027\n\017next_page_token\030\002 \001(\t\"+\n"
      "\023GetReferenceRequest\022\024\n\014reference_id\030\001 \001"
      "(\t\"k\n\020ListBasesRequest\022\024\n\014reference_id\030\001"
      " \001(\t\022\r\n\005start\030\002 \001(\003\022\013\n\003end\030\003 \001(\003\022\022\n\npage"
      "_token\030\004 \001(\t\022\021\n\tpage_size\030\005 \001(\005\"N\n\021ListB"
      "asesResponse\022\016\n\006offset\030\001 \001(\003\022\020\n\010sequence"
      "\030\002 \001(\t\022\027\n\017next_page_token\030\003 \001(\t2\333\005\n\022Refe"
      "renceServiceV1\022\233\001\n\023SearchReferenceSets\022."
      ".google.genomics.v1.SearchReferenceSetsR"
      "equest\032/.google.genomics.v1.SearchRefere"
      "nceSetsResponse\"#\202\323\344\223\002\035\"\030/v1/referencese"
      "ts/search:\001*\022\215\001\n\017GetReferenceSet\022*.googl"
      "e.genomics.v1.GetReferenceSetRequest\032 .g"
      "oogle.genomics.v1.ReferenceSet\",\202\323\344\223\002&\022$"
      "/v1/referencesets/{reference_set_id}\022\217\001\n"
      "\020SearchReferences\022+.google.genomics.v1.S"
      "earchReferencesRequest\032,.google.genomics"
      ".v1.SearchReferencesResponse\" \202\323\344\223\002\032\"\025/v"
      "1/references/search:\001*\022}\n\014GetReference\022\'"
      ".google.genomics.v1.GetReferenceRequest\032"
      "\035.google.genomics.v1.Reference\"%\202\323\344\223\002\037\022\035"
      "/v1/references/{reference_id}\022\205\001\n\tListBa"
      "ses\022$.google.genomics.v1.ListBasesReques"
      "t\032%.google.genomics.v1.ListBasesResponse"
      "\"+\202\323\344\223\002%\022#/v1/references/{reference_id}/"
      "basesBj\n\026com.google.genomics.v1B\017Referen"
      "cesProtoP\001Z:google.golang.org/genproto/g"
      "oogleapis/genomics/v1;genomics\370\001\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/references.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fgenomics_2fv1_2freferences_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reference::kIdFieldNumber;
const int Reference::kLengthFieldNumber;
const int Reference::kMd5ChecksumFieldNumber;
const int Reference::kNameFieldNumber;
const int Reference::kSourceUriFieldNumber;
const int Reference::kSourceAccessionsFieldNumber;
const int Reference::kNcbiTaxonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reference::Reference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Reference)
}
Reference::Reference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Reference)
}
Reference::Reference(const Reference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_accessions_(from.source_accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5checksum().size() > 0) {
    md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5checksum(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_uri().size() > 0) {
    source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_uri(),
      GetArenaNoVirtual());
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&ncbi_taxon_id_) -
    reinterpret_cast<char*>(&length_) + sizeof(ncbi_taxon_id_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Reference)
}

void Reference::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&ncbi_taxon_id_) -
    reinterpret_cast<char*>(&length_) + sizeof(ncbi_taxon_id_));
  _cached_size_ = 0;
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  md5checksum_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Reference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reference& Reference::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reference* Reference::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Reference>(arena);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Reference)
  source_accessions_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&length_, 0, reinterpret_cast<char*>(&ncbi_taxon_id_) -
    reinterpret_cast<char*>(&length_) + sizeof(ncbi_taxon_id_));
}

bool Reference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Reference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksum().data(), this->md5checksum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.md5checksum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), this->source_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.source_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_accessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_accessions(this->source_accessions_size() - 1).data(),
            this->source_accessions(this->source_accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.source_accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ncbi_taxon_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncbi_taxon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Reference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Reference)
  return false;
#undef DO_
}

void Reference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Reference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.md5checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5checksum(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_uri(), output);
  }

  // repeated string source_accessions = 6;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->source_accessions(i), output);
  }

  // int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ncbi_taxon_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Reference)
}

::google::protobuf::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Reference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.md5checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5checksum(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_uri(), target);
  }

  // repeated string source_accessions = 6;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->source_accessions(i), target);
  }

  // int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ncbi_taxon_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Reference)
  size_t total_size = 0;

  // repeated string source_accessions = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_accessions_size());
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_accessions(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5checksum());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  // int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncbi_taxon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Reference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_accessions_.MergeFrom(from.source_accessions_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.md5checksum().size() > 0) {
    set_md5checksum(from.md5checksum());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.ncbi_taxon_id() != 0) {
    set_ncbi_taxon_id(from.ncbi_taxon_id());
  }
}

void Reference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::Swap(Reference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Reference* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Reference::UnsafeArenaSwap(Reference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Reference::InternalSwap(Reference* other) {
  source_accessions_.InternalSwap(&other->source_accessions_);
  id_.Swap(&other->id_);
  md5checksum_.Swap(&other->md5checksum_);
  name_.Swap(&other->name_);
  source_uri_.Swap(&other->source_uri_);
  std::swap(length_, other->length_);
  std::swap(ncbi_taxon_id_, other->ncbi_taxon_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reference::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reference

// string id = 1;
void Reference::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.id)
  return id_.Get();
}
void Reference::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.id)
}
void Reference::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.id)
}
void Reference::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.id)
}
::std::string* Reference::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.id)
}
void Reference::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.id)
}

// int64 length = 2;
void Reference::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Reference::length() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.length)
  return length_;
}
void Reference::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.length)
}

// string md5checksum = 3;
void Reference::clear_md5checksum() {
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::md5checksum() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.md5checksum)
  return md5checksum_.Get();
}
void Reference::set_md5checksum(const ::std::string& value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.md5checksum)
}
void Reference::set_md5checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.md5checksum)
}
void Reference::set_md5checksum(const char* value,
    size_t size) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.md5checksum)
}
::std::string* Reference::mutable_md5checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.md5checksum)
  return md5checksum_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_md5checksum() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.md5checksum)
  
  return md5checksum_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_md5checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.md5checksum)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return md5checksum_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_md5checksum(::std::string* md5checksum) {
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5checksum,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.md5checksum)
}
void Reference::unsafe_arena_set_allocated_md5checksum(
    ::std::string* md5checksum) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      md5checksum, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.md5checksum)
}

// string name = 4;
void Reference::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.name)
  return name_.Get();
}
void Reference::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.name)
}
void Reference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.name)
}
void Reference::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.name)
}
::std::string* Reference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.name)
}
void Reference::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.name)
}

// string source_uri = 5;
void Reference::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.source_uri)
  return source_uri_.Get();
}
void Reference::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_uri)
}
void Reference::set_source_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.source_uri)
}
void Reference::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.source_uri)
}
::std::string* Reference::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.source_uri)
}
void Reference::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.source_uri)
}

// repeated string source_accessions = 6;
int Reference::source_accessions_size() const {
  return source_accessions_.size();
}
void Reference::clear_source_accessions() {
  source_accessions_.Clear();
}
const ::std::string& Reference::source_accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Get(index);
}
::std::string* Reference::mutable_source_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Mutable(index);
}
void Reference::set_source_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_accessions)
  source_accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Reference::set_source_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_accessions)
  source_accessions_.Mutable(index)->assign(std::move(value));
}
#endif
void Reference::set_source_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.source_accessions)
}
void Reference::set_source_accessions(int index, const char* value, size_t size) {
  source_accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.source_accessions)
}
::std::string* Reference::add_source_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Add();
}
void Reference::add_source_accessions(const ::std::string& value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.Reference.source_accessions)
}
#if LANG_CXX11
void Reference::add_source_accessions(::std::string&& value) {
  source_accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.Reference.source_accessions)
}
#endif
void Reference::add_source_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.Reference.source_accessions)
}
void Reference::add_source_accessions(const char* value, size_t size) {
  source_accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.Reference.source_accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reference::source_accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Reference.source_accessions)
  return source_accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Reference::mutable_source_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Reference.source_accessions)
  return &source_accessions_;
}

// int32 ncbi_taxon_id = 7;
void Reference::clear_ncbi_taxon_id() {
  ncbi_taxon_id_ = 0;
}
::google::protobuf::int32 Reference::ncbi_taxon_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.ncbi_taxon_id)
  return ncbi_taxon_id_;
}
void Reference::set_ncbi_taxon_id(::google::protobuf::int32 value) {
  
  ncbi_taxon_id_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.ncbi_taxon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceSet::kIdFieldNumber;
const int ReferenceSet::kReferenceIdsFieldNumber;
const int ReferenceSet::kMd5ChecksumFieldNumber;
const int ReferenceSet::kNcbiTaxonIdFieldNumber;
const int ReferenceSet::kDescriptionFieldNumber;
const int ReferenceSet::kAssemblyIdFieldNumber;
const int ReferenceSet::kSourceUriFieldNumber;
const int ReferenceSet::kSourceAccessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceSet::ReferenceSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ReferenceSet)
}
ReferenceSet::ReferenceSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_ids_(arena),
  source_accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ReferenceSet)
}
ReferenceSet::ReferenceSet(const ReferenceSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_ids_(from.reference_ids_),
      source_accessions_(from.source_accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5checksum().size() > 0) {
    md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5checksum(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assembly_id().size() > 0) {
    assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assembly_id(),
      GetArenaNoVirtual());
  }
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_uri().size() > 0) {
    source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_uri(),
      GetArenaNoVirtual());
  }
  ncbi_taxon_id_ = from.ncbi_taxon_id_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ReferenceSet)
}

void ReferenceSet::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ncbi_taxon_id_ = 0;
  _cached_size_ = 0;
}

ReferenceSet::~ReferenceSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ReferenceSet)
  SharedDtor();
}

void ReferenceSet::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  md5checksum_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  assembly_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ReferenceSet::ArenaDtor(void* object) {
  ReferenceSet* _this = reinterpret_cast< ReferenceSet* >(object);
  (void)_this;
}
void ReferenceSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReferenceSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceSet::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceSet& ReferenceSet::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReferenceSet* ReferenceSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReferenceSet>(arena);
}

void ReferenceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ReferenceSet)
  reference_ids_.Clear();
  source_accessions_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ncbi_taxon_id_ = 0;
}

bool ReferenceSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ReferenceSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_ids(this->reference_ids_size() - 1).data(),
            this->reference_ids(this->reference_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.reference_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksum().data(), this->md5checksum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.md5checksum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ncbi_taxon_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncbi_taxon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assembly_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assembly_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assembly_id().data(), this->assembly_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.assembly_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_uri = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), this->source_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.source_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_accessions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_accessions(this->source_accessions_size() - 1).data(),
            this->source_accessions(this->source_accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.source_accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ReferenceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ReferenceSet)
  return false;
#undef DO_
}

void ReferenceSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ReferenceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string reference_ids = 2;
  for (int i = 0, n = this->reference_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_ids(i).data(), this->reference_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.reference_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reference_ids(i), output);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.md5checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5checksum(), output);
  }

  // int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncbi_taxon_id(), output);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.assembly_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->assembly_id(), output);
  }

  // string source_uri = 7;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_uri(), output);
  }

  // repeated string source_accessions = 8;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->source_accessions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ReferenceSet)
}

::google::protobuf::uint8* ReferenceSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ReferenceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string reference_ids = 2;
  for (int i = 0, n = this->reference_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_ids(i).data(), this->reference_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.reference_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->reference_ids(i), target);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.md5checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5checksum(), target);
  }

  // int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ncbi_taxon_id(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.assembly_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->assembly_id(), target);
  }

  // string source_uri = 7;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_uri(), target);
  }

  // repeated string source_accessions = 8;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->source_accessions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ReferenceSet)
  return target;
}

size_t ReferenceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ReferenceSet)
  size_t total_size = 0;

  // repeated string reference_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_ids_size());
  for (int i = 0, n = this->reference_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_ids(i));
  }

  // repeated string source_accessions = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_accessions_size());
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_accessions(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5checksum());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assembly_id());
  }

  // string source_uri = 7;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncbi_taxon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ReferenceSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ReferenceSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ReferenceSet)
    MergeFrom(*source);
  }
}

void ReferenceSet::MergeFrom(const ReferenceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ReferenceSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_ids_.MergeFrom(from.reference_ids_);
  source_accessions_.MergeFrom(from.source_accessions_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.md5checksum().size() > 0) {
    set_md5checksum(from.md5checksum());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.assembly_id().size() > 0) {
    set_assembly_id(from.assembly_id());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
  if (from.ncbi_taxon_id() != 0) {
    set_ncbi_taxon_id(from.ncbi_taxon_id());
  }
}

void ReferenceSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ReferenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSet::CopyFrom(const ReferenceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ReferenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSet::IsInitialized() const {
  return true;
}

void ReferenceSet::Swap(ReferenceSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReferenceSet* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReferenceSet::UnsafeArenaSwap(ReferenceSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReferenceSet::InternalSwap(ReferenceSet* other) {
  reference_ids_.InternalSwap(&other->reference_ids_);
  source_accessions_.InternalSwap(&other->source_accessions_);
  id_.Swap(&other->id_);
  md5checksum_.Swap(&other->md5checksum_);
  description_.Swap(&other->description_);
  assembly_id_.Swap(&other->assembly_id_);
  source_uri_.Swap(&other->source_uri_);
  std::swap(ncbi_taxon_id_, other->ncbi_taxon_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceSet::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceSet

// string id = 1;
void ReferenceSet::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.id)
  return id_.Get();
}
void ReferenceSet::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.id)
}
void ReferenceSet::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.id)
}
void ReferenceSet::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.id)
}
::std::string* ReferenceSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.id)
}
void ReferenceSet::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.id)
}

// repeated string reference_ids = 2;
int ReferenceSet::reference_ids_size() const {
  return reference_ids_.size();
}
void ReferenceSet::clear_reference_ids() {
  reference_ids_.Clear();
}
const ::std::string& ReferenceSet::reference_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Get(index);
}
::std::string* ReferenceSet::mutable_reference_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Mutable(index);
}
void ReferenceSet::set_reference_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.reference_ids)
  reference_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ReferenceSet::set_reference_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.reference_ids)
  reference_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void ReferenceSet::set_reference_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.reference_ids)
}
void ReferenceSet::set_reference_ids(int index, const char* value, size_t size) {
  reference_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.reference_ids)
}
::std::string* ReferenceSet::add_reference_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Add();
}
void ReferenceSet::add_reference_ids(const ::std::string& value) {
  reference_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.reference_ids)
}
#if LANG_CXX11
void ReferenceSet::add_reference_ids(::std::string&& value) {
  reference_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.reference_ids)
}
#endif
void ReferenceSet::add_reference_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ReferenceSet.reference_ids)
}
void ReferenceSet::add_reference_ids(const char* value, size_t size) {
  reference_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ReferenceSet.reference_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferenceSet::reference_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReferenceSet::mutable_reference_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ReferenceSet.reference_ids)
  return &reference_ids_;
}

// string md5checksum = 3;
void ReferenceSet::clear_md5checksum() {
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::md5checksum() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.md5checksum)
  return md5checksum_.Get();
}
void ReferenceSet::set_md5checksum(const ::std::string& value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.md5checksum)
}
void ReferenceSet::set_md5checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.md5checksum)
}
void ReferenceSet::set_md5checksum(const char* value,
    size_t size) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.md5checksum)
}
::std::string* ReferenceSet::mutable_md5checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.md5checksum)
  return md5checksum_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_md5checksum() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.md5checksum)
  
  return md5checksum_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_md5checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.md5checksum)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return md5checksum_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_md5checksum(::std::string* md5checksum) {
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5checksum,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.md5checksum)
}
void ReferenceSet::unsafe_arena_set_allocated_md5checksum(
    ::std::string* md5checksum) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      md5checksum, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.md5checksum)
}

// int32 ncbi_taxon_id = 4;
void ReferenceSet::clear_ncbi_taxon_id() {
  ncbi_taxon_id_ = 0;
}
::google::protobuf::int32 ReferenceSet::ncbi_taxon_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.ncbi_taxon_id)
  return ncbi_taxon_id_;
}
void ReferenceSet::set_ncbi_taxon_id(::google::protobuf::int32 value) {
  
  ncbi_taxon_id_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.ncbi_taxon_id)
}

// string description = 5;
void ReferenceSet::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.description)
  return description_.Get();
}
void ReferenceSet::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.description)
}
void ReferenceSet::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.description)
}
void ReferenceSet::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.description)
}
::std::string* ReferenceSet::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.description)
}
void ReferenceSet::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.description)
}

// string assembly_id = 6;
void ReferenceSet::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::assembly_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.assembly_id)
  return assembly_id_.Get();
}
void ReferenceSet::set_assembly_id(const ::std::string& value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.assembly_id)
}
void ReferenceSet::set_assembly_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.assembly_id)
}
void ReferenceSet::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.assembly_id)
}
::std::string* ReferenceSet::mutable_assembly_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.assembly_id)
  return assembly_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_assembly_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.assembly_id)
  
  return assembly_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.assembly_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return assembly_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_assembly_id(::std::string* assembly_id) {
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.assembly_id)
}
void ReferenceSet::unsafe_arena_set_allocated_assembly_id(
    ::std::string* assembly_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.assembly_id)
}

// string source_uri = 7;
void ReferenceSet::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.source_uri)
  return source_uri_.Get();
}
void ReferenceSet::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_uri)
}
void ReferenceSet::set_source_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.source_uri)
}
void ReferenceSet::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.source_uri)
}
::std::string* ReferenceSet::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.source_uri)
}
void ReferenceSet::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.source_uri)
}

// repeated string source_accessions = 8;
int ReferenceSet::source_accessions_size() const {
  return source_accessions_.size();
}
void ReferenceSet::clear_source_accessions() {
  source_accessions_.Clear();
}
const ::std::string& ReferenceSet::source_accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Get(index);
}
::std::string* ReferenceSet::mutable_source_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Mutable(index);
}
void ReferenceSet::set_source_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_accessions)
  source_accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ReferenceSet::set_source_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_accessions)
  source_accessions_.Mutable(index)->assign(std::move(value));
}
#endif
void ReferenceSet::set_source_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.source_accessions)
}
void ReferenceSet::set_source_accessions(int index, const char* value, size_t size) {
  source_accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.source_accessions)
}
::std::string* ReferenceSet::add_source_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Add();
}
void ReferenceSet::add_source_accessions(const ::std::string& value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.source_accessions)
}
#if LANG_CXX11
void ReferenceSet::add_source_accessions(::std::string&& value) {
  source_accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.source_accessions)
}
#endif
void ReferenceSet::add_source_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ReferenceSet.source_accessions)
}
void ReferenceSet::add_source_accessions(const char* value, size_t size) {
  source_accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ReferenceSet.source_accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferenceSet::source_accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReferenceSet::mutable_source_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ReferenceSet.source_accessions)
  return &source_accessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferenceSetsRequest::kMd5ChecksumsFieldNumber;
const int SearchReferenceSetsRequest::kAccessionsFieldNumber;
const int SearchReferenceSetsRequest::kAssemblyIdFieldNumber;
const int SearchReferenceSetsRequest::kPageTokenFieldNumber;
const int SearchReferenceSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferenceSetsRequest::SearchReferenceSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferenceSetsRequest)
}
SearchReferenceSetsRequest::SearchReferenceSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  md5checksums_(arena),
  accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferenceSetsRequest)
}
SearchReferenceSetsRequest::SearchReferenceSetsRequest(const SearchReferenceSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      md5checksums_(from.md5checksums_),
      accessions_(from.accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assembly_id().size() > 0) {
    assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assembly_id(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferenceSetsRequest)
}

void SearchReferenceSetsRequest::SharedCtor() {
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReferenceSetsRequest::~SearchReferenceSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferenceSetsRequest)
  SharedDtor();
}

void SearchReferenceSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  assembly_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferenceSetsRequest::ArenaDtor(void* object) {
  SearchReferenceSetsRequest* _this = reinterpret_cast< SearchReferenceSetsRequest* >(object);
  (void)_this;
}
void SearchReferenceSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferenceSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferenceSetsRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferenceSetsRequest& SearchReferenceSetsRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReferenceSetsRequest* SearchReferenceSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferenceSetsRequest>(arena);
}

void SearchReferenceSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferenceSetsRequest)
  md5checksums_.Clear();
  accessions_.Clear();
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
}

bool SearchReferenceSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferenceSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5checksums = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5checksums()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksums(this->md5checksums_size() - 1).data(),
            this->md5checksums(this->md5checksums_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.md5checksums"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string accessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessions(this->accessions_size() - 1).data(),
            this->accessions(this->accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assembly_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assembly_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assembly_id().data(), this->assembly_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.assembly_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferenceSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferenceSetsRequest)
  return false;
#undef DO_
}

void SearchReferenceSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferenceSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.md5checksums");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5checksums(i), output);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accessions(i), output);
  }

  // string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.assembly_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->assembly_id(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferenceSetsRequest)
}

::google::protobuf::uint8* SearchReferenceSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferenceSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.md5checksums");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5checksums(i), target);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->accessions(i), target);
  }

  // string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.assembly_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assembly_id(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferenceSetsRequest)
  return target;
}

size_t SearchReferenceSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferenceSetsRequest)
  size_t total_size = 0;

  // repeated string md5checksums = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5checksums_size());
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5checksums(i));
  }

  // repeated string accessions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accessions_size());
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accessions(i));
  }

  // string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assembly_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferenceSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferenceSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferenceSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferenceSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferenceSetsRequest)
    MergeFrom(*source);
  }
}

void SearchReferenceSetsRequest::MergeFrom(const SearchReferenceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5checksums_.MergeFrom(from.md5checksums_);
  accessions_.MergeFrom(from.accessions_);
  if (from.assembly_id().size() > 0) {
    set_assembly_id(from.assembly_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReferenceSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferenceSetsRequest::CopyFrom(const SearchReferenceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferenceSetsRequest::IsInitialized() const {
  return true;
}

void SearchReferenceSetsRequest::Swap(SearchReferenceSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferenceSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferenceSetsRequest::UnsafeArenaSwap(SearchReferenceSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferenceSetsRequest::InternalSwap(SearchReferenceSetsRequest* other) {
  md5checksums_.InternalSwap(&other->md5checksums_);
  accessions_.InternalSwap(&other->accessions_);
  assembly_id_.Swap(&other->assembly_id_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferenceSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferenceSetsRequest

// repeated string md5checksums = 1;
int SearchReferenceSetsRequest::md5checksums_size() const {
  return md5checksums_.size();
}
void SearchReferenceSetsRequest::clear_md5checksums() {
  md5checksums_.Clear();
}
const ::std::string& SearchReferenceSetsRequest::md5checksums(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Get(index);
}
::std::string* SearchReferenceSetsRequest::mutable_md5checksums(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Mutable(index);
}
void SearchReferenceSetsRequest::set_md5checksums(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReferenceSetsRequest::set_md5checksums(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReferenceSetsRequest::set_md5checksums(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
void SearchReferenceSetsRequest::set_md5checksums(int index, const char* value, size_t size) {
  md5checksums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
::std::string* SearchReferenceSetsRequest::add_md5checksums() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Add();
}
void SearchReferenceSetsRequest::add_md5checksums(const ::std::string& value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
#if LANG_CXX11
void SearchReferenceSetsRequest::add_md5checksums(::std::string&& value) {
  md5checksums_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
#endif
void SearchReferenceSetsRequest::add_md5checksums(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
void SearchReferenceSetsRequest::add_md5checksums(const char* value, size_t size) {
  md5checksums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferenceSetsRequest::md5checksums() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferenceSetsRequest::mutable_md5checksums() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return &md5checksums_;
}

// repeated string accessions = 2;
int SearchReferenceSetsRequest::accessions_size() const {
  return accessions_.size();
}
void SearchReferenceSetsRequest::clear_accessions() {
  accessions_.Clear();
}
const ::std::string& SearchReferenceSetsRequest::accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Get(index);
}
::std::string* SearchReferenceSetsRequest::mutable_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Mutable(index);
}
void SearchReferenceSetsRequest::set_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReferenceSetsRequest::set_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  accessions_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReferenceSetsRequest::set_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
void SearchReferenceSetsRequest::set_accessions(int index, const char* value, size_t size) {
  accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
::std::string* SearchReferenceSetsRequest::add_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Add();
}
void SearchReferenceSetsRequest::add_accessions(const ::std::string& value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
#if LANG_CXX11
void SearchReferenceSetsRequest::add_accessions(::std::string&& value) {
  accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
#endif
void SearchReferenceSetsRequest::add_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
void SearchReferenceSetsRequest::add_accessions(const char* value, size_t size) {
  accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferenceSetsRequest::accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferenceSetsRequest::mutable_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return &accessions_;
}

// string assembly_id = 3;
void SearchReferenceSetsRequest::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferenceSetsRequest::assembly_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  return assembly_id_.Get();
}
void SearchReferenceSetsRequest::set_assembly_id(const ::std::string& value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
void SearchReferenceSetsRequest::set_assembly_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
void SearchReferenceSetsRequest::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
::std::string* SearchReferenceSetsRequest::mutable_assembly_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  return assembly_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::release_assembly_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  
  return assembly_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return assembly_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferenceSetsRequest::set_allocated_assembly_id(::std::string* assembly_id) {
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
void SearchReferenceSetsRequest::unsafe_arena_set_allocated_assembly_id(
    ::std::string* assembly_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}

// string page_token = 4;
void SearchReferenceSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferenceSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  return page_token_.Get();
}
void SearchReferenceSetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
void SearchReferenceSetsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
void SearchReferenceSetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
::std::string* SearchReferenceSetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferenceSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
void SearchReferenceSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}

// int32 page_size = 5;
void SearchReferenceSetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchReferenceSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.page_size)
  return page_size_;
}
void SearchReferenceSetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferenceSetsResponse::kReferenceSetsFieldNumber;
const int SearchReferenceSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferenceSetsResponse::SearchReferenceSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferenceSetsResponse)
}
SearchReferenceSetsResponse::SearchReferenceSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_sets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferenceSetsResponse)
}
SearchReferenceSetsResponse::SearchReferenceSetsResponse(const SearchReferenceSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_sets_(from.reference_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferenceSetsResponse)
}

void SearchReferenceSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReferenceSetsResponse::~SearchReferenceSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferenceSetsResponse)
  SharedDtor();
}

void SearchReferenceSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferenceSetsResponse::ArenaDtor(void* object) {
  SearchReferenceSetsResponse* _this = reinterpret_cast< SearchReferenceSetsResponse* >(object);
  (void)_this;
}
void SearchReferenceSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferenceSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferenceSetsResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferenceSetsResponse& SearchReferenceSetsResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReferenceSetsResponse* SearchReferenceSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferenceSetsResponse>(arena);
}

void SearchReferenceSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferenceSetsResponse)
  reference_sets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SearchReferenceSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferenceSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reference_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferenceSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferenceSetsResponse)
  return false;
#undef DO_
}

void SearchReferenceSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferenceSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  for (unsigned int i = 0, n = this->reference_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reference_sets(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferenceSetsResponse)
}

::google::protobuf::uint8* SearchReferenceSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferenceSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  for (unsigned int i = 0, n = this->reference_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->reference_sets(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferenceSetsResponse)
  return target;
}

size_t SearchReferenceSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferenceSetsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  {
    unsigned int count = this->reference_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_sets(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferenceSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferenceSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferenceSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferenceSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferenceSetsResponse)
    MergeFrom(*source);
  }
}

void SearchReferenceSetsResponse::MergeFrom(const SearchReferenceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_sets_.MergeFrom(from.reference_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReferenceSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferenceSetsResponse::CopyFrom(const SearchReferenceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferenceSetsResponse::IsInitialized() const {
  return true;
}

void SearchReferenceSetsResponse::Swap(SearchReferenceSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferenceSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferenceSetsResponse::UnsafeArenaSwap(SearchReferenceSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferenceSetsResponse::InternalSwap(SearchReferenceSetsResponse* other) {
  reference_sets_.InternalSwap(&other->reference_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferenceSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferenceSetsResponse

// repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
int SearchReferenceSetsResponse::reference_sets_size() const {
  return reference_sets_.size();
}
void SearchReferenceSetsResponse::clear_reference_sets() {
  reference_sets_.Clear();
}
const ::google::genomics::v1::ReferenceSet& SearchReferenceSetsResponse::reference_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Get(index);
}
::google::genomics::v1::ReferenceSet* SearchReferenceSetsResponse::mutable_reference_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Mutable(index);
}
::google::genomics::v1::ReferenceSet* SearchReferenceSetsResponse::add_reference_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >*
SearchReferenceSetsResponse::mutable_reference_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return &reference_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >&
SearchReferenceSetsResponse::reference_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_;
}

// string next_page_token = 2;
void SearchReferenceSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferenceSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  return next_page_token_.Get();
}
void SearchReferenceSetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
void SearchReferenceSetsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
void SearchReferenceSetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
::std::string* SearchReferenceSetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferenceSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
void SearchReferenceSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReferenceSetRequest::kReferenceSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReferenceSetRequest::GetReferenceSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReferenceSetRequest)
}
GetReferenceSetRequest::GetReferenceSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReferenceSetRequest)
}
GetReferenceSetRequest::GetReferenceSetRequest(const GetReferenceSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReferenceSetRequest)
}

void GetReferenceSetRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReferenceSetRequest::~GetReferenceSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReferenceSetRequest)
  SharedDtor();
}

void GetReferenceSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetReferenceSetRequest::ArenaDtor(void* object) {
  GetReferenceSetRequest* _this = reinterpret_cast< GetReferenceSetRequest* >(object);
  (void)_this;
}
void GetReferenceSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReferenceSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReferenceSetRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetReferenceSetRequest& GetReferenceSetRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetReferenceSetRequest* GetReferenceSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReferenceSetRequest>(arena);
}

void GetReferenceSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReferenceSetRequest)
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetReferenceSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReferenceSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReferenceSetRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReferenceSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReferenceSetRequest)
  return false;
#undef DO_
}

void GetReferenceSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReferenceSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceSetRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReferenceSetRequest)
}

::google::protobuf::uint8* GetReferenceSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReferenceSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceSetRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReferenceSetRequest)
  return target;
}

size_t GetReferenceSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReferenceSetRequest)
  size_t total_size = 0;

  // string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReferenceSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReferenceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReferenceSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReferenceSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReferenceSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReferenceSetRequest)
    MergeFrom(*source);
  }
}

void GetReferenceSetRequest::MergeFrom(const GetReferenceSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReferenceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
}

void GetReferenceSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReferenceSetRequest::CopyFrom(const GetReferenceSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReferenceSetRequest::IsInitialized() const {
  return true;
}

void GetReferenceSetRequest::Swap(GetReferenceSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReferenceSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetReferenceSetRequest::UnsafeArenaSwap(GetReferenceSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReferenceSetRequest::InternalSwap(GetReferenceSetRequest* other) {
  reference_set_id_.Swap(&other->reference_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReferenceSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetReferenceSetRequest

// string reference_set_id = 1;
void GetReferenceSetRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetReferenceSetRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  return reference_set_id_.Get();
}
void GetReferenceSetRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
void GetReferenceSetRequest::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
void GetReferenceSetRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
::std::string* GetReferenceSetRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceSetRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceSetRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetReferenceSetRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
void GetReferenceSetRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferencesRequest::kMd5ChecksumsFieldNumber;
const int SearchReferencesRequest::kAccessionsFieldNumber;
const int SearchReferencesRequest::kReferenceSetIdFieldNumber;
const int SearchReferencesRequest::kPageTokenFieldNumber;
const int SearchReferencesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferencesRequest::SearchReferencesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferencesRequest)
}
SearchReferencesRequest::SearchReferencesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  md5checksums_(arena),
  accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferencesRequest)
}
SearchReferencesRequest::SearchReferencesRequest(const SearchReferencesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      md5checksums_(from.md5checksums_),
      accessions_(from.accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferencesRequest)
}

void SearchReferencesRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReferencesRequest::~SearchReferencesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferencesRequest)
  SharedDtor();
}

void SearchReferencesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferencesRequest::ArenaDtor(void* object) {
  SearchReferencesRequest* _this = reinterpret_cast< SearchReferencesRequest* >(object);
  (void)_this;
}
void SearchReferencesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferencesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferencesRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferencesRequest& SearchReferencesRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReferencesRequest* SearchReferencesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferencesRequest>(arena);
}

void SearchReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferencesRequest)
  md5checksums_.Clear();
  accessions_.Clear();
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
}

bool SearchReferencesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferencesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5checksums = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5checksums()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksums(this->md5checksums_size() - 1).data(),
            this->md5checksums(this->md5checksums_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.md5checksums"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string accessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessions(this->accessions_size() - 1).data(),
            this->accessions(this->accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_set_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferencesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferencesRequest)
  return false;
#undef DO_
}

void SearchReferencesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferencesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.md5checksums");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5checksums(i), output);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accessions(i), output);
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_set_id(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferencesRequest)
}

::google::protobuf::uint8* SearchReferencesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferencesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.md5checksums");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5checksums(i), target);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->accessions(i), target);
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_set_id(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferencesRequest)
  return target;
}

size_t SearchReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferencesRequest)
  size_t total_size = 0;

  // repeated string md5checksums = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5checksums_size());
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5checksums(i));
  }

  // repeated string accessions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accessions_size());
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accessions(i));
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferencesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferencesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferencesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferencesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferencesRequest)
    MergeFrom(*source);
  }
}

void SearchReferencesRequest::MergeFrom(const SearchReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5checksums_.MergeFrom(from.md5checksums_);
  accessions_.MergeFrom(from.accessions_);
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReferencesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferencesRequest::CopyFrom(const SearchReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferencesRequest::IsInitialized() const {
  return true;
}

void SearchReferencesRequest::Swap(SearchReferencesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferencesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferencesRequest::UnsafeArenaSwap(SearchReferencesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferencesRequest::InternalSwap(SearchReferencesRequest* other) {
  md5checksums_.InternalSwap(&other->md5checksums_);
  accessions_.InternalSwap(&other->accessions_);
  reference_set_id_.Swap(&other->reference_set_id_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferencesRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferencesRequest

// repeated string md5checksums = 1;
int SearchReferencesRequest::md5checksums_size() const {
  return md5checksums_.size();
}
void SearchReferencesRequest::clear_md5checksums() {
  md5checksums_.Clear();
}
const ::std::string& SearchReferencesRequest::md5checksums(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Get(index);
}
::std::string* SearchReferencesRequest::mutable_md5checksums(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Mutable(index);
}
void SearchReferencesRequest::set_md5checksums(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReferencesRequest::set_md5checksums(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReferencesRequest::set_md5checksums(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
void SearchReferencesRequest::set_md5checksums(int index, const char* value, size_t size) {
  md5checksums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
::std::string* SearchReferencesRequest::add_md5checksums() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Add();
}
void SearchReferencesRequest::add_md5checksums(const ::std::string& value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
#if LANG_CXX11
void SearchReferencesRequest::add_md5checksums(::std::string&& value) {
  md5checksums_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
#endif
void SearchReferencesRequest::add_md5checksums(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
void SearchReferencesRequest::add_md5checksums(const char* value, size_t size) {
  md5checksums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferencesRequest::md5checksums() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferencesRequest::mutable_md5checksums() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return &md5checksums_;
}

// repeated string accessions = 2;
int SearchReferencesRequest::accessions_size() const {
  return accessions_.size();
}
void SearchReferencesRequest::clear_accessions() {
  accessions_.Clear();
}
const ::std::string& SearchReferencesRequest::accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Get(index);
}
::std::string* SearchReferencesRequest::mutable_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Mutable(index);
}
void SearchReferencesRequest::set_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.accessions)
  accessions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReferencesRequest::set_accessions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.accessions)
  accessions_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReferencesRequest::set_accessions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.accessions)
}
void SearchReferencesRequest::set_accessions(int index, const char* value, size_t size) {
  accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.accessions)
}
::std::string* SearchReferencesRequest::add_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Add();
}
void SearchReferencesRequest::add_accessions(const ::std::string& value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.accessions)
}
#if LANG_CXX11
void SearchReferencesRequest::add_accessions(::std::string&& value) {
  accessions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.accessions)
}
#endif
void SearchReferencesRequest::add_accessions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferencesRequest.accessions)
}
void SearchReferencesRequest::add_accessions(const char* value, size_t size) {
  accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferencesRequest.accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferencesRequest::accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferencesRequest::mutable_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesRequest.accessions)
  return &accessions_;
}

// string reference_set_id = 3;
void SearchReferencesRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferencesRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  return reference_set_id_.Get();
}
void SearchReferencesRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
void SearchReferencesRequest::set_reference_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
void SearchReferencesRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
::std::string* SearchReferencesRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferencesRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
void SearchReferencesRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}

// string page_token = 4;
void SearchReferencesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.page_token)
  return page_token_.Get();
}
void SearchReferencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.page_token)
}
void SearchReferencesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.page_token)
}
void SearchReferencesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.page_token)
}
::std::string* SearchReferencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesRequest.page_token)
}
void SearchReferencesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesRequest.page_token)
}

// int32 page_size = 5;
void SearchReferencesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchReferencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.page_size)
  return page_size_;
}
void SearchReferencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferencesResponse::kReferencesFieldNumber;
const int SearchReferencesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferencesResponse::SearchReferencesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferencesResponse)
}
SearchReferencesResponse::SearchReferencesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  references_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferencesResponse)
}
SearchReferencesResponse::SearchReferencesResponse(const SearchReferencesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      references_(from.references_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferencesResponse)
}

void SearchReferencesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReferencesResponse::~SearchReferencesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferencesResponse)
  SharedDtor();
}

void SearchReferencesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferencesResponse::ArenaDtor(void* object) {
  SearchReferencesResponse* _this = reinterpret_cast< SearchReferencesResponse* >(object);
  (void)_this;
}
void SearchReferencesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferencesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferencesResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferencesResponse& SearchReferencesResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReferencesResponse* SearchReferencesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferencesResponse>(arena);
}

void SearchReferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferencesResponse)
  references_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SearchReferencesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferencesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Reference references = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_references()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferencesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferencesResponse)
  return false;
#undef DO_
}

void SearchReferencesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferencesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Reference references = 1;
  for (unsigned int i = 0, n = this->references_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->references(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferencesResponse)
}

::google::protobuf::uint8* SearchReferencesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferencesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Reference references = 1;
  for (unsigned int i = 0, n = this->references_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->references(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferencesResponse)
  return target;
}

size_t SearchReferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferencesResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Reference references = 1;
  {
    unsigned int count = this->references_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->references(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferencesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferencesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferencesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferencesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferencesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferencesResponse)
    MergeFrom(*source);
  }
}

void SearchReferencesResponse::MergeFrom(const SearchReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferencesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReferencesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferencesResponse::CopyFrom(const SearchReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferencesResponse::IsInitialized() const {
  return true;
}

void SearchReferencesResponse::Swap(SearchReferencesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferencesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferencesResponse::UnsafeArenaSwap(SearchReferencesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferencesResponse::InternalSwap(SearchReferencesResponse* other) {
  references_.InternalSwap(&other->references_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferencesResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferencesResponse

// repeated .google.genomics.v1.Reference references = 1;
int SearchReferencesResponse::references_size() const {
  return references_.size();
}
void SearchReferencesResponse::clear_references() {
  references_.Clear();
}
const ::google::genomics::v1::Reference& SearchReferencesResponse::references(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Get(index);
}
::google::genomics::v1::Reference* SearchReferencesResponse::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Mutable(index);
}
::google::genomics::v1::Reference* SearchReferencesResponse::add_references() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >*
SearchReferencesResponse::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesResponse.references)
  return &references_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >&
SearchReferencesResponse::references() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesResponse.references)
  return references_;
}

// string next_page_token = 2;
void SearchReferencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesResponse.next_page_token)
  return next_page_token_.Get();
}
void SearchReferencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
void SearchReferencesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
void SearchReferencesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
::std::string* SearchReferencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
void SearchReferencesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReferenceRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReferenceRequest::GetReferenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReferenceRequest)
}
GetReferenceRequest::GetReferenceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReferenceRequest)
}
GetReferenceRequest::GetReferenceRequest(const GetReferenceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReferenceRequest)
}

void GetReferenceRequest::SharedCtor() {
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReferenceRequest::~GetReferenceRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReferenceRequest)
  SharedDtor();
}

void GetReferenceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetReferenceRequest::ArenaDtor(void* object) {
  GetReferenceRequest* _this = reinterpret_cast< GetReferenceRequest* >(object);
  (void)_this;
}
void GetReferenceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReferenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReferenceRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetReferenceRequest& GetReferenceRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetReferenceRequest* GetReferenceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReferenceRequest>(arena);
}

void GetReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReferenceRequest)
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetReferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReferenceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), this->reference_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReferenceRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReferenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReferenceRequest)
  return false;
#undef DO_
}

void GetReferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReferenceRequest)
}

::google::protobuf::uint8* GetReferenceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReferenceRequest)
  return target;
}

size_t GetReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReferenceRequest)
  size_t total_size = 0;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReferenceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReferenceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReferenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReferenceRequest)
    MergeFrom(*source);
  }
}

void GetReferenceRequest::MergeFrom(const GetReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
}

void GetReferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReferenceRequest::CopyFrom(const GetReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReferenceRequest::IsInitialized() const {
  return true;
}

void GetReferenceRequest::Swap(GetReferenceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReferenceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetReferenceRequest::UnsafeArenaSwap(GetReferenceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReferenceRequest::InternalSwap(GetReferenceRequest* other) {
  reference_id_.Swap(&other->reference_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReferenceRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetReferenceRequest

// string reference_id = 1;
void GetReferenceRequest::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetReferenceRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReferenceRequest.reference_id)
  return reference_id_.Get();
}
void GetReferenceRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReferenceRequest.reference_id)
}
void GetReferenceRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReferenceRequest.reference_id)
}
void GetReferenceRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReferenceRequest.reference_id)
}
::std::string* GetReferenceRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReferenceRequest.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReferenceRequest.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReferenceRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetReferenceRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReferenceRequest.reference_id)
}
void GetReferenceRequest::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReferenceRequest.reference_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBasesRequest::kReferenceIdFieldNumber;
const int ListBasesRequest::kStartFieldNumber;
const int ListBasesRequest::kEndFieldNumber;
const int ListBasesRequest::kPageTokenFieldNumber;
const int ListBasesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBasesRequest::ListBasesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListBasesRequest)
}
ListBasesRequest::ListBasesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListBasesRequest)
}
ListBasesRequest::ListBasesRequest(const ListBasesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListBasesRequest)
}

void ListBasesRequest::SharedCtor() {
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  _cached_size_ = 0;
}

ListBasesRequest::~ListBasesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListBasesRequest)
  SharedDtor();
}

void ListBasesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListBasesRequest::ArenaDtor(void* object) {
  ListBasesRequest* _this = reinterpret_cast< ListBasesRequest* >(object);
  (void)_this;
}
void ListBasesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListBasesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBasesRequest::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListBasesRequest& ListBasesRequest::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListBasesRequest* ListBasesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListBasesRequest>(arena);
}

void ListBasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListBasesRequest)
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
}

bool ListBasesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListBasesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), this->reference_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListBasesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListBasesRequest)
  return false;
#undef DO_
}

void ListBasesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListBasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_id(), output);
  }

  // int64 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // int64 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListBasesRequest)
}

::google::protobuf::uint8* ListBasesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListBasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_id(), target);
  }

  // int64 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // int64 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListBasesRequest)
  return target;
}

size_t ListBasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListBasesRequest)
  size_t total_size = 0;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBasesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListBasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBasesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBasesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListBasesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListBasesRequest)
    MergeFrom(*source);
  }
}

void ListBasesRequest::MergeFrom(const ListBasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListBasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListBasesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListBasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBasesRequest::CopyFrom(const ListBasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListBasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBasesRequest::IsInitialized() const {
  return true;
}

void ListBasesRequest::Swap(ListBasesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListBasesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListBasesRequest::UnsafeArenaSwap(ListBasesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListBasesRequest::InternalSwap(ListBasesRequest* other) {
  reference_id_.Swap(&other->reference_id_);
  page_token_.Swap(&other->page_token_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBasesRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListBasesRequest

// string reference_id = 1;
void ListBasesRequest::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.reference_id)
  return reference_id_.Get();
}
void ListBasesRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.reference_id)
}
void ListBasesRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesRequest.reference_id)
}
void ListBasesRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesRequest.reference_id)
}
::std::string* ListBasesRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesRequest.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesRequest.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesRequest.reference_id)
}
void ListBasesRequest::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesRequest.reference_id)
}

// int64 start = 2;
void ListBasesRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListBasesRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.start)
  return start_;
}
void ListBasesRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.start)
}

// int64 end = 3;
void ListBasesRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListBasesRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.end)
  return end_;
}
void ListBasesRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.end)
}

// string page_token = 4;
void ListBasesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.page_token)
  return page_token_.Get();
}
void ListBasesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.page_token)
}
void ListBasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesRequest.page_token)
}
void ListBasesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesRequest.page_token)
}
::std::string* ListBasesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesRequest.page_token)
}
void ListBasesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesRequest.page_token)
}

// int32 page_size = 5;
void ListBasesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListBasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.page_size)
  return page_size_;
}
void ListBasesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBasesResponse::kOffsetFieldNumber;
const int ListBasesResponse::kSequenceFieldNumber;
const int ListBasesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBasesResponse::ListBasesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListBasesResponse)
}
ListBasesResponse::ListBasesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListBasesResponse)
}
ListBasesResponse::ListBasesResponse(const ListBasesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence(),
      GetArenaNoVirtual());
  }
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListBasesResponse)
}

void ListBasesResponse::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ListBasesResponse::~ListBasesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListBasesResponse)
  SharedDtor();
}

void ListBasesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  sequence_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListBasesResponse::ArenaDtor(void* object) {
  ListBasesResponse* _this = reinterpret_cast< ListBasesResponse* >(object);
  (void)_this;
}
void ListBasesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListBasesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBasesResponse::descriptor() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListBasesResponse& ListBasesResponse::default_instance() {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListBasesResponse* ListBasesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListBasesResponse>(arena);
}

void ListBasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListBasesResponse)
  sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  offset_ = GOOGLE_LONGLONG(0);
}

bool ListBasesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListBasesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesResponse.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListBasesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListBasesResponse)
  return false;
#undef DO_
}

void ListBasesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListBasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset(), output);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sequence(), output);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListBasesResponse)
}

::google::protobuf::uint8* ListBasesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListBasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset(), target);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sequence(), target);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListBasesResponse)
  return target;
}

size_t ListBasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListBasesResponse)
  size_t total_size = 0;

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBasesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListBasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBasesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBasesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListBasesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListBasesResponse)
    MergeFrom(*source);
  }
}

void ListBasesResponse::MergeFrom(const ListBasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListBasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {
    set_sequence(from.sequence());
  }
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void ListBasesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListBasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBasesResponse::CopyFrom(const ListBasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListBasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBasesResponse::IsInitialized() const {
  return true;
}

void ListBasesResponse::Swap(ListBasesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListBasesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListBasesResponse::UnsafeArenaSwap(ListBasesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListBasesResponse::InternalSwap(ListBasesResponse* other) {
  sequence_.Swap(&other->sequence_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBasesResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListBasesResponse

// int64 offset = 1;
void ListBasesResponse::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListBasesResponse::offset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.offset)
  return offset_;
}
void ListBasesResponse::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.offset)
}

// string sequence = 2;
void ListBasesResponse::clear_sequence() {
  sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesResponse::sequence() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.sequence)
  return sequence_.Get();
}
void ListBasesResponse::set_sequence(const ::std::string& value) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.sequence)
}
void ListBasesResponse::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesResponse.sequence)
}
void ListBasesResponse::set_sequence(const char* value,
    size_t size) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesResponse.sequence)
}
::std::string* ListBasesResponse::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesResponse.sequence)
  return sequence_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::release_sequence() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesResponse.sequence)
  
  return sequence_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::unsafe_arena_release_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesResponse.sequence)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sequence_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesResponse::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesResponse.sequence)
}
void ListBasesResponse::unsafe_arena_set_allocated_sequence(
    ::std::string* sequence) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sequence, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesResponse.sequence)
}

// string next_page_token = 3;
void ListBasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.next_page_token)
  return next_page_token_.Get();
}
void ListBasesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.next_page_token)
}
void ListBasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesResponse.next_page_token)
}
void ListBasesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesResponse.next_page_token)
}
::std::string* ListBasesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesResponse.next_page_token)
}
void ListBasesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
