// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/iam_policy.proto

#ifndef PROTOBUF_google_2fiam_2fv1_2fiam_5fpolicy_2eproto__INCLUDED
#define PROTOBUF_google_2fiam_2fv1_2fiam_5fpolicy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/policy.pb.h"
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace iam {
namespace v1 {
class Binding;
class BindingDefaultTypeInternal;
extern BindingDefaultTypeInternal _Binding_default_instance_;
class BindingDelta;
class BindingDeltaDefaultTypeInternal;
extern BindingDeltaDefaultTypeInternal _BindingDelta_default_instance_;
class GetIamPolicyRequest;
class GetIamPolicyRequestDefaultTypeInternal;
extern GetIamPolicyRequestDefaultTypeInternal _GetIamPolicyRequest_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyDelta;
class PolicyDeltaDefaultTypeInternal;
extern PolicyDeltaDefaultTypeInternal _PolicyDelta_default_instance_;
class SetIamPolicyRequest;
class SetIamPolicyRequestDefaultTypeInternal;
extern SetIamPolicyRequestDefaultTypeInternal _SetIamPolicyRequest_default_instance_;
class TestIamPermissionsRequest;
class TestIamPermissionsRequestDefaultTypeInternal;
extern TestIamPermissionsRequestDefaultTypeInternal _TestIamPermissionsRequest_default_instance_;
class TestIamPermissionsResponse;
class TestIamPermissionsResponseDefaultTypeInternal;
extern TestIamPermissionsResponseDefaultTypeInternal _TestIamPermissionsResponse_default_instance_;
}  // namespace v1
}  // namespace iam
}  // namespace google

namespace google {
namespace iam {
namespace v1 {

namespace protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto

// ===================================================================

class SetIamPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.SetIamPolicyRequest) */ {
 public:
  SetIamPolicyRequest();
  virtual ~SetIamPolicyRequest();

  SetIamPolicyRequest(const SetIamPolicyRequest& from);

  inline SetIamPolicyRequest& operator=(const SetIamPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetIamPolicyRequest& default_instance();

  static inline const SetIamPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const SetIamPolicyRequest*>(
               &_SetIamPolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(SetIamPolicyRequest* other);
  void Swap(SetIamPolicyRequest* other);

  // implements Message ----------------------------------------------

  inline SetIamPolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetIamPolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetIamPolicyRequest& from);
  void MergeFrom(const SetIamPolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetIamPolicyRequest* other);
  protected:
  explicit SetIamPolicyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);
  ::std::string* unsafe_arena_release_resource();
  void unsafe_arena_set_allocated_resource(
      ::std::string* resource);

  // .google.iam.v1.Policy policy = 2;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 2;
  private:
  void _slow_mutable_policy();
  void _slow_set_allocated_policy(
      ::google::protobuf::Arena* message_arena, ::google::iam::v1::Policy** policy);
  ::google::iam::v1::Policy* _slow_release_policy();
  public:
  const ::google::iam::v1::Policy& policy() const;
  ::google::iam::v1::Policy* mutable_policy();
  ::google::iam::v1::Policy* release_policy();
  void set_allocated_policy(::google::iam::v1::Policy* policy);
  ::google::iam::v1::Policy* unsafe_arena_release_policy();
  void unsafe_arena_set_allocated_policy(
      ::google::iam::v1::Policy* policy);

  // @@protoc_insertion_point(class_scope:google.iam.v1.SetIamPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::iam::v1::Policy* policy_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetIamPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.GetIamPolicyRequest) */ {
 public:
  GetIamPolicyRequest();
  virtual ~GetIamPolicyRequest();

  GetIamPolicyRequest(const GetIamPolicyRequest& from);

  inline GetIamPolicyRequest& operator=(const GetIamPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetIamPolicyRequest& default_instance();

  static inline const GetIamPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetIamPolicyRequest*>(
               &_GetIamPolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(GetIamPolicyRequest* other);
  void Swap(GetIamPolicyRequest* other);

  // implements Message ----------------------------------------------

  inline GetIamPolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetIamPolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetIamPolicyRequest& from);
  void MergeFrom(const GetIamPolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetIamPolicyRequest* other);
  protected:
  explicit GetIamPolicyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);
  ::std::string* unsafe_arena_release_resource();
  void unsafe_arena_set_allocated_resource(
      ::std::string* resource);

  // @@protoc_insertion_point(class_scope:google.iam.v1.GetIamPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestIamPermissionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.TestIamPermissionsRequest) */ {
 public:
  TestIamPermissionsRequest();
  virtual ~TestIamPermissionsRequest();

  TestIamPermissionsRequest(const TestIamPermissionsRequest& from);

  inline TestIamPermissionsRequest& operator=(const TestIamPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestIamPermissionsRequest& default_instance();

  static inline const TestIamPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const TestIamPermissionsRequest*>(
               &_TestIamPermissionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(TestIamPermissionsRequest* other);
  void Swap(TestIamPermissionsRequest* other);

  // implements Message ----------------------------------------------

  inline TestIamPermissionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TestIamPermissionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestIamPermissionsRequest& from);
  void MergeFrom(const TestIamPermissionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestIamPermissionsRequest* other);
  protected:
  explicit TestIamPermissionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string permissions = 2;
  int permissions_size() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  const ::std::string& permissions(int index) const;
  ::std::string* mutable_permissions(int index);
  void set_permissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_permissions(int index, ::std::string&& value);
  #endif
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  ::std::string* add_permissions();
  void add_permissions(const ::std::string& value);
  #if LANG_CXX11
  void add_permissions(::std::string&& value);
  #endif
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_permissions();

  // string resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);
  ::std::string* unsafe_arena_release_resource();
  void unsafe_arena_set_allocated_resource(
      ::std::string* resource);

  // @@protoc_insertion_point(class_scope:google.iam.v1.TestIamPermissionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> permissions_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestIamPermissionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.v1.TestIamPermissionsResponse) */ {
 public:
  TestIamPermissionsResponse();
  virtual ~TestIamPermissionsResponse();

  TestIamPermissionsResponse(const TestIamPermissionsResponse& from);

  inline TestIamPermissionsResponse& operator=(const TestIamPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestIamPermissionsResponse& default_instance();

  static inline const TestIamPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const TestIamPermissionsResponse*>(
               &_TestIamPermissionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(TestIamPermissionsResponse* other);
  void Swap(TestIamPermissionsResponse* other);

  // implements Message ----------------------------------------------

  inline TestIamPermissionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TestIamPermissionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestIamPermissionsResponse& from);
  void MergeFrom(const TestIamPermissionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestIamPermissionsResponse* other);
  protected:
  explicit TestIamPermissionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string permissions = 1;
  int permissions_size() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  const ::std::string& permissions(int index) const;
  ::std::string* mutable_permissions(int index);
  void set_permissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_permissions(int index, ::std::string&& value);
  #endif
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  ::std::string* add_permissions();
  void add_permissions(const ::std::string& value);
  #if LANG_CXX11
  void add_permissions(::std::string&& value);
  #endif
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_permissions();

  // @@protoc_insertion_point(class_scope:google.iam.v1.TestIamPermissionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> permissions_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SetIamPolicyRequest

// string resource = 1;
inline void SetIamPolicyRequest::clear_resource() {
  resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SetIamPolicyRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.SetIamPolicyRequest.resource)
  return resource_.Get();
}
inline void SetIamPolicyRequest::set_resource(const ::std::string& value) {
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.v1.SetIamPolicyRequest.resource)
}
inline void SetIamPolicyRequest::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.SetIamPolicyRequest.resource)
}
inline void SetIamPolicyRequest::set_resource(const char* value,
    size_t size) {
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.SetIamPolicyRequest.resource)
}
inline ::std::string* SetIamPolicyRequest::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.v1.SetIamPolicyRequest.resource)
  return resource_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetIamPolicyRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.iam.v1.SetIamPolicyRequest.resource)
  
  return resource_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetIamPolicyRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.v1.SetIamPolicyRequest.resource)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return resource_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SetIamPolicyRequest::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.SetIamPolicyRequest.resource)
}
inline void SetIamPolicyRequest::unsafe_arena_set_allocated_resource(
    ::std::string* resource) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      resource, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.SetIamPolicyRequest.resource)
}

// .google.iam.v1.Policy policy = 2;
inline bool SetIamPolicyRequest::has_policy() const {
  return this != internal_default_instance() && policy_ != NULL;
}
inline void SetIamPolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) delete policy_;
  policy_ = NULL;
}
inline const ::google::iam::v1::Policy& SetIamPolicyRequest::policy() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.SetIamPolicyRequest.policy)
  return policy_ != NULL ? *policy_
                         : *::google::iam::v1::Policy::internal_default_instance();
}
inline ::google::iam::v1::Policy* SetIamPolicyRequest::mutable_policy() {
  
  if (policy_ == NULL) {
    _slow_mutable_policy();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.v1.SetIamPolicyRequest.policy)
  return policy_;
}
inline ::google::iam::v1::Policy* SetIamPolicyRequest::release_policy() {
  // @@protoc_insertion_point(field_release:google.iam.v1.SetIamPolicyRequest.policy)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_policy();
  } else {
    ::google::iam::v1::Policy* temp = policy_;
    policy_ = NULL;
    return temp;
  }
}
inline  void SetIamPolicyRequest::set_allocated_policy(::google::iam::v1::Policy* policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete policy_;
  }
  if (policy != NULL) {
    _slow_set_allocated_policy(message_arena, &policy);
  }
  policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.SetIamPolicyRequest.policy)
}

// -------------------------------------------------------------------

// GetIamPolicyRequest

// string resource = 1;
inline void GetIamPolicyRequest::clear_resource() {
  resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetIamPolicyRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.GetIamPolicyRequest.resource)
  return resource_.Get();
}
inline void GetIamPolicyRequest::set_resource(const ::std::string& value) {
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.v1.GetIamPolicyRequest.resource)
}
inline void GetIamPolicyRequest::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.GetIamPolicyRequest.resource)
}
inline void GetIamPolicyRequest::set_resource(const char* value,
    size_t size) {
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.GetIamPolicyRequest.resource)
}
inline ::std::string* GetIamPolicyRequest::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.v1.GetIamPolicyRequest.resource)
  return resource_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetIamPolicyRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.iam.v1.GetIamPolicyRequest.resource)
  
  return resource_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetIamPolicyRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.v1.GetIamPolicyRequest.resource)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return resource_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetIamPolicyRequest::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.GetIamPolicyRequest.resource)
}
inline void GetIamPolicyRequest::unsafe_arena_set_allocated_resource(
    ::std::string* resource) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      resource, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.GetIamPolicyRequest.resource)
}

// -------------------------------------------------------------------

// TestIamPermissionsRequest

// string resource = 1;
inline void TestIamPermissionsRequest::clear_resource() {
  resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TestIamPermissionsRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.iam.v1.TestIamPermissionsRequest.resource)
  return resource_.Get();
}
inline void TestIamPermissionsRequest::set_resource(const ::std::string& value) {
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsRequest.resource)
}
inline void TestIamPermissionsRequest::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.v1.TestIamPermissionsRequest.resource)
}
inline void TestIamPermissionsRequest::set_resource(const char* value,
    size_t size) {
  
  resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.TestIamPermissionsRequest.resource)
}
inline ::std::string* TestIamPermissionsRequest::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.v1.TestIamPermissionsRequest.resource)
  return resource_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TestIamPermissionsRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.iam.v1.TestIamPermissionsRequest.resource)
  
  return resource_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TestIamPermissionsRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.v1.TestIamPermissionsRequest.resource)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return resource_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TestIamPermissionsRequest::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.v1.TestIamPermissionsRequest.resource)
}
inline void TestIamPermissionsRequest::unsafe_arena_set_allocated_resource(
    ::std::string* resource) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      resource, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.TestIamPermissionsRequest.resource)
}

// repeated string permissions = 2;
inline int TestIamPermissionsRequest::permissions_size() const {
  return permissions_.size();
}
inline void TestIamPermissionsRequest::clear_permissions() {
  permissions_.Clear();
}
inline const ::std::string& TestIamPermissionsRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.TestIamPermissionsRequest.permissions)
  return permissions_.Get(index);
}
inline ::std::string* TestIamPermissionsRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.TestIamPermissionsRequest.permissions)
  return permissions_.Mutable(index);
}
inline void TestIamPermissionsRequest::set_permissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsRequest.permissions)
  permissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestIamPermissionsRequest::set_permissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsRequest.permissions)
  permissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestIamPermissionsRequest::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::set_permissions(int index, const char* value, size_t size) {
  permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline ::std::string* TestIamPermissionsRequest::add_permissions() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.TestIamPermissionsRequest.permissions)
  return permissions_.Add();
}
inline void TestIamPermissionsRequest::add_permissions(const ::std::string& value) {
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsRequest.permissions)
}
#if LANG_CXX11
inline void TestIamPermissionsRequest::add_permissions(::std::string&& value) {
  permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsRequest.permissions)
}
#endif
inline void TestIamPermissionsRequest::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline void TestIamPermissionsRequest::add_permissions(const char* value, size_t size) {
  permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.TestIamPermissionsRequest.permissions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestIamPermissionsRequest::permissions() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.TestIamPermissionsRequest.permissions)
  return permissions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestIamPermissionsRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.TestIamPermissionsRequest.permissions)
  return &permissions_;
}

// -------------------------------------------------------------------

// TestIamPermissionsResponse

// repeated string permissions = 1;
inline int TestIamPermissionsResponse::permissions_size() const {
  return permissions_.size();
}
inline void TestIamPermissionsResponse::clear_permissions() {
  permissions_.Clear();
}
inline const ::std::string& TestIamPermissionsResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.v1.TestIamPermissionsResponse.permissions)
  return permissions_.Get(index);
}
inline ::std::string* TestIamPermissionsResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.v1.TestIamPermissionsResponse.permissions)
  return permissions_.Mutable(index);
}
inline void TestIamPermissionsResponse::set_permissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsResponse.permissions)
  permissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestIamPermissionsResponse::set_permissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.v1.TestIamPermissionsResponse.permissions)
  permissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestIamPermissionsResponse::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::set_permissions(int index, const char* value, size_t size) {
  permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline ::std::string* TestIamPermissionsResponse::add_permissions() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.v1.TestIamPermissionsResponse.permissions)
  return permissions_.Add();
}
inline void TestIamPermissionsResponse::add_permissions(const ::std::string& value) {
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsResponse.permissions)
}
#if LANG_CXX11
inline void TestIamPermissionsResponse::add_permissions(::std::string&& value) {
  permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.v1.TestIamPermissionsResponse.permissions)
}
#endif
inline void TestIamPermissionsResponse::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline void TestIamPermissionsResponse::add_permissions(const char* value, size_t size) {
  permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.v1.TestIamPermissionsResponse.permissions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestIamPermissionsResponse::permissions() const {
  // @@protoc_insertion_point(field_list:google.iam.v1.TestIamPermissionsResponse.permissions)
  return permissions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestIamPermissionsResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.v1.TestIamPermissionsResponse.permissions)
  return &permissions_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fiam_2fv1_2fiam_5fpolicy_2eproto__INCLUDED
